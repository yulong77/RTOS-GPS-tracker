
LCD_GPS_Tasks_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d80  08006d80  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d80  08006d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d88  08006d88  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d88  08006d88  00007d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d8c  08006d8c  00007d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006d90  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a8b4  2000001c  08006dac  0000801c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a8d0  08006dac  000088d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144c5  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d1  00000000  00000000  0001c511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0001f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f84  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023104  00000000  00000000  00021984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167a9  00000000  00000000  00044a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7091  00000000  00000000  0005b231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001322c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005474  00000000  00000000  00132308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000102  00000000  00000000  0013777c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ba0 	.word	0x08006ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006ba0 	.word	0x08006ba0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192fc 	.word	0x200192fc

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000274:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <I2C_Config>:
}


/*Configure I2C Peripheral */
static void I2C_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	//Enable I2C peripheral clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <I2C_Config+0x68>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000562:	4a16      	ldr	r2, [pc, #88]	@ (80005bc <I2C_Config+0x68>)
 8000564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000568:	6413      	str	r3, [r2, #64]	@ 0x40
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <I2C_Config+0x68>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
	
	myI2Chandle.Instance = I2C1;
 8000576:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <I2C_Config+0x6c>)
 8000578:	4a12      	ldr	r2, [pc, #72]	@ (80005c4 <I2C_Config+0x70>)
 800057a:	601a      	str	r2, [r3, #0]
	myI2Chandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057c:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <I2C_Config+0x6c>)
 800057e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000582:	611a      	str	r2, [r3, #16]
	myI2Chandle.Init.ClockSpeed = 100000;
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <I2C_Config+0x6c>)
 8000586:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <I2C_Config+0x74>)
 8000588:	605a      	str	r2, [r3, #4]
	myI2Chandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <I2C_Config+0x6c>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
	myI2Chandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000590:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <I2C_Config+0x6c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
	myI2Chandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <I2C_Config+0x6c>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
	myI2Chandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <I2C_Config+0x6c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	621a      	str	r2, [r3, #32]
	myI2Chandle.Init.OwnAddress1 = 0;
 80005a2:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <I2C_Config+0x6c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
	myI2Chandle.Init.OwnAddress2 = 0;
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <I2C_Config+0x6c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
	HAL_I2C_Init(&myI2Chandle);
 80005ae:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <I2C_Config+0x6c>)
 80005b0:	f001 f84e 	bl	8001650 <HAL_I2C_Init>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	20000038 	.word	0x20000038
 80005c4:	40005400 	.word	0x40005400
 80005c8:	000186a0 	.word	0x000186a0

080005cc <LCD_Send_Cmd>:
 * @brief Send Command to LCD
 * @param cmd : LCD commands 
 * @retval None
 */
void LCD_Send_Cmd(uint8_t cmd)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (cmd & 0xF0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f023 030f 	bic.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((cmd << 4) & 0xF0);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030c 	orr.w	r3, r3, #12
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	737b      	strb	r3, [r7, #13]
	
	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN;
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	f043 030c 	orr.w	r3, r3, #12
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	b2db      	uxtb	r3, r3
 800060a:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 800060c:	230a      	movs	r3, #10
 800060e:	2201      	movs	r2, #1
 8000610:	214e      	movs	r1, #78	@ 0x4e
 8000612:	4815      	ldr	r0, [pc, #84]	@ (8000668 <LCD_Send_Cmd+0x9c>)
 8000614:	f001 fa5e 	bl	8001ad4 <HAL_I2C_IsDeviceReady>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d108      	bne.n	8000630 <LCD_Send_Cmd+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100); 
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2302      	movs	r3, #2
 8000628:	214e      	movs	r1, #78	@ 0x4e
 800062a:	480f      	ldr	r0, [pc, #60]	@ (8000668 <LCD_Send_Cmd+0x9c>)
 800062c:	f001 f954 	bl	80018d8 <HAL_I2C_Master_Transmit>
	
	/*Provide a delay */
	HAL_Delay(5);
 8000630:	2005      	movs	r0, #5
 8000632:	f000 fd37 	bl	80010a4 <HAL_Delay>

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000636:	230a      	movs	r3, #10
 8000638:	2201      	movs	r2, #1
 800063a:	214e      	movs	r1, #78	@ 0x4e
 800063c:	480a      	ldr	r0, [pc, #40]	@ (8000668 <LCD_Send_Cmd+0x9c>)
 800063e:	f001 fa49 	bl	8001ad4 <HAL_I2C_IsDeviceReady>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d108      	bne.n	800065a <LCD_Send_Cmd+0x8e>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);	
 8000648:	f107 0208 	add.w	r2, r7, #8
 800064c:	2364      	movs	r3, #100	@ 0x64
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	214e      	movs	r1, #78	@ 0x4e
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <LCD_Send_Cmd+0x9c>)
 8000656:	f001 f93f 	bl	80018d8 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 800065a:	2005      	movs	r0, #5
 800065c:	f000 fd22 	bl	80010a4 <HAL_Delay>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000038 	.word	0x20000038

0800066c <LCD_Send_Data>:
 * @brief Send Data to LCD
 * @param data: Data to be sent to LCD
 * @retval None
 */
void LCD_Send_Data(uint8_t data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (data & 0xF0);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((data << 4) & 0xF0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN|PIN_RS;
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f043 030d 	orr.w	r3, r3, #13
 800068a:	b2db      	uxtb	r3, r3
 800068c:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT|PIN_RS;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	f043 0309 	orr.w	r3, r3, #9
 8000694:	b2db      	uxtb	r3, r3
 8000696:	737b      	strb	r3, [r7, #13]
	
	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN|PIN_RS;
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	f043 030d 	orr.w	r3, r3, #13
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT|PIN_RS;
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	f043 0309 	orr.w	r3, r3, #9
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 80006ac:	230a      	movs	r3, #10
 80006ae:	2201      	movs	r2, #1
 80006b0:	214e      	movs	r1, #78	@ 0x4e
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <LCD_Send_Data+0x98>)
 80006b4:	f001 fa0e 	bl	8001ad4 <HAL_I2C_IsDeviceReady>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d108      	bne.n	80006d0 <LCD_Send_Data+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100); 
 80006be:	f107 020c 	add.w	r2, r7, #12
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2302      	movs	r3, #2
 80006c8:	214e      	movs	r1, #78	@ 0x4e
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <LCD_Send_Data+0x98>)
 80006cc:	f001 f904 	bl	80018d8 <HAL_I2C_Master_Transmit>
	
	/*Provide a delay */
	//HAL_Delay(1);

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 80006d0:	230a      	movs	r3, #10
 80006d2:	2201      	movs	r2, #1
 80006d4:	214e      	movs	r1, #78	@ 0x4e
 80006d6:	480b      	ldr	r0, [pc, #44]	@ (8000704 <LCD_Send_Data+0x98>)
 80006d8:	f001 f9fc 	bl	8001ad4 <HAL_I2C_IsDeviceReady>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d108      	bne.n	80006f4 <LCD_Send_Data+0x88>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);	
 80006e2:	f107 0208 	add.w	r2, r7, #8
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2302      	movs	r3, #2
 80006ec:	214e      	movs	r1, #78	@ 0x4e
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <LCD_Send_Data+0x98>)
 80006f0:	f001 f8f2 	bl	80018d8 <HAL_I2C_Master_Transmit>
    
    /*Provide a delay */
    HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fcd5 	bl	80010a4 <HAL_Delay>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000038 	.word	0x20000038

08000708 <LCD_Init>:
/**
 * @brief  Initializes LCD
 * @retval None
 */
void LCD_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	/* Configure GPIOs */
	//GPIO_Config();

	/*Configure I2C */
	I2C_Config();
 800070c:	f7ff ff22 	bl	8000554 <I2C_Config>

	/* Wait for 15ms */
	HAL_Delay(50);
 8000710:	2032      	movs	r0, #50	@ 0x32
 8000712:	f000 fcc7 	bl	80010a4 <HAL_Delay>
	
	/*Function Set - As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET1);
 8000716:	2033      	movs	r0, #51	@ 0x33
 8000718:	f7ff ff58 	bl	80005cc <LCD_Send_Cmd>
	
	/*Function Set -As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET2);
 800071c:	2032      	movs	r0, #50	@ 0x32
 800071e:	f7ff ff55 	bl	80005cc <LCD_Send_Cmd>
	
	/*Set 4bit mode and 2 lines */
	LCD_Send_Cmd(LCD_4BIT_2LINE_MODE);
 8000722:	2028      	movs	r0, #40	@ 0x28
 8000724:	f7ff ff52 	bl	80005cc <LCD_Send_Cmd>
	
	/*Display on, cursor off*/
	LCD_Send_Cmd(0x0C);
 8000728:	200c      	movs	r0, #12
 800072a:	f7ff ff4f 	bl	80005cc <LCD_Send_Cmd>
	
	/* SET Row1 and Col1 (1st Line) */
	LCD_Send_Cmd(0x80);
 800072e:	2080      	movs	r0, #128	@ 0x80
 8000730:	f7ff ff4c 	bl	80005cc <LCD_Send_Cmd>
	
	/*Clear Display*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff49 	bl	80005cc <LCD_Send_Cmd>
	
	/* Wait for 5ms to ensure commands are processed */
	HAL_Delay(5);
 800073a:	2005      	movs	r0, #5
 800073c:	f000 fcb2 	bl	80010a4 <HAL_Delay>

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_Send_String>:
 * @brief Send Strings to LCD
 * @param str: pointer to strings
 * @retval None
 */
void LCD_Send_String(char *str)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	while (*str)  
 800074c:	e006      	b.n	800075c <LCD_Send_String+0x18>
	{
		LCD_Send_Data(*str++);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff88 	bl	800066c <LCD_Send_Data>
	while (*str)  
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f4      	bne.n	800074e <LCD_Send_String+0xa>
	}
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	@ 0x38
 8000774:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fc53 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f8b5 	bl	80008e8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 800077e:	f000 f94b 	bl	8000a18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000782:	f000 f91b 	bl	80009bc <MX_I2C1_Init>


  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000786:	484c      	ldr	r0, [pc, #304]	@ (80008b8 <main+0x148>)
 8000788:	f004 f8cc 	bl	8004924 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 800078c:	4b4b      	ldr	r3, [pc, #300]	@ (80008bc <main+0x14c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a4a      	ldr	r2, [pc, #296]	@ (80008bc <main+0x14c>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000798:	f003 fe32 	bl	8004400 <SEGGER_SYSVIEW_Conf>

  //Initialize LCD
  LCD_Init();
 800079c:	f7ff ffb4 	bl	8000708 <LCD_Init>


  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2302      	movs	r3, #2
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	22c8      	movs	r2, #200	@ 0xc8
 80007ae:	4944      	ldr	r1, [pc, #272]	@ (80008c0 <main+0x150>)
 80007b0:	4844      	ldr	r0, [pc, #272]	@ (80008c4 <main+0x154>)
 80007b2:	f002 fc2c 	bl	800300e <xTaskCreate>
 80007b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 80007b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d00b      	beq.n	80007d6 <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c2:	f383 8811 	msr	BASEPRI, r3
 80007c6:	f3bf 8f6f 	isb	sy
 80007ca:	f3bf 8f4f 	dsb	sy
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <main+0x62>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2302      	movs	r3, #2
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	22c8      	movs	r2, #200	@ 0xc8
 80007e4:	4938      	ldr	r1, [pc, #224]	@ (80008c8 <main+0x158>)
 80007e6:	4839      	ldr	r0, [pc, #228]	@ (80008cc <main+0x15c>)
 80007e8:	f002 fc11 	bl	800300e <xTaskCreate>
 80007ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 80007ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d00b      	beq.n	800080c <main+0x9c>
        __asm volatile
 80007f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f8:	f383 8811 	msr	BASEPRI, r3
 80007fc:	f3bf 8f6f 	isb	sy
 8000800:	f3bf 8f4f 	dsb	sy
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <main+0x98>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	2302      	movs	r3, #2
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2300      	movs	r3, #0
 8000818:	22c8      	movs	r2, #200	@ 0xc8
 800081a:	492d      	ldr	r1, [pc, #180]	@ (80008d0 <main+0x160>)
 800081c:	482d      	ldr	r0, [pc, #180]	@ (80008d4 <main+0x164>)
 800081e:	f002 fbf6 	bl	800300e <xTaskCreate>
 8000822:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8000824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000826:	2b01      	cmp	r3, #1
 8000828:	d00b      	beq.n	8000842 <main+0xd2>
        __asm volatile
 800082a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800082e:	f383 8811 	msr	BASEPRI, r3
 8000832:	f3bf 8f6f 	isb	sy
 8000836:	f3bf 8f4f 	dsb	sy
 800083a:	623b      	str	r3, [r7, #32]
    }
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	e7fd      	b.n	800083e <main+0xce>

  status = xTaskCreate(lcd_task_01_handler, "LCD_task_01", 256, NULL, 2, &task4_handle);
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	2302      	movs	r3, #2
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000852:	4921      	ldr	r1, [pc, #132]	@ (80008d8 <main+0x168>)
 8000854:	4821      	ldr	r0, [pc, #132]	@ (80008dc <main+0x16c>)
 8000856:	f002 fbda 	bl	800300e <xTaskCreate>
 800085a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 800085c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800085e:	2b01      	cmp	r3, #1
 8000860:	d00b      	beq.n	800087a <main+0x10a>
        __asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	61fb      	str	r3, [r7, #28]
    }
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <main+0x106>

  status = xTaskCreate(gps_task_01_handler, "GPS_task_01", 200, NULL, 2, &task5_handle);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	2302      	movs	r3, #2
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	22c8      	movs	r2, #200	@ 0xc8
 8000886:	4916      	ldr	r1, [pc, #88]	@ (80008e0 <main+0x170>)
 8000888:	4816      	ldr	r0, [pc, #88]	@ (80008e4 <main+0x174>)
 800088a:	f002 fbc0 	bl	800300e <xTaskCreate>
 800088e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8000890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000892:	2b01      	cmp	r3, #1
 8000894:	d00b      	beq.n	80008ae <main+0x13e>
        __asm volatile
 8000896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089a:	f383 8811 	msr	BASEPRI, r3
 800089e:	f3bf 8f6f 	isb	sy
 80008a2:	f3bf 8f4f 	dsb	sy
 80008a6:	61bb      	str	r3, [r7, #24]
    }
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <main+0x13a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80008ae:	f002 fdbd 	bl	800342c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <main+0x142>
 80008b6:	bf00      	nop
 80008b8:	0007a120 	.word	0x0007a120
 80008bc:	e0001000 	.word	0xe0001000
 80008c0:	08006bb8 	.word	0x08006bb8
 80008c4:	08000cb5 	.word	0x08000cb5
 80008c8:	08006bc8 	.word	0x08006bc8
 80008cc:	08000d0d 	.word	0x08000d0d
 80008d0:	08006bd8 	.word	0x08006bd8
 80008d4:	08000ce1 	.word	0x08000ce1
 80008d8:	08006be8 	.word	0x08006be8
 80008dc:	08000d39 	.word	0x08000d39
 80008e0:	08006bf4 	.word	0x08006bf4
 80008e4:	08000d79 	.word	0x08000d79

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	@ 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 f918 	bl	8006b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b28      	ldr	r3, [pc, #160]	@ (80009b4 <SystemClock_Config+0xcc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a27      	ldr	r2, [pc, #156]	@ (80009b4 <SystemClock_Config+0xcc>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <SystemClock_Config+0xd0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <SystemClock_Config+0xd0>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2310      	movs	r3, #16
 800094e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000958:	2308      	movs	r3, #8
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800095c:	23a8      	movs	r3, #168	@ 0xa8
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fbe9 	bl	8002144 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000978:	f000 fa18 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fe40 	bl	8002620 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009a6:	f000 fa01 	bl	8000dac <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	@ 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009c2:	4a13      	ldr	r2, [pc, #76]	@ (8000a10 <MX_I2C1_Init+0x54>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009c8:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <MX_I2C1_Init+0x58>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_I2C1_Init+0x50>)
 80009fa:	f000 fe29 	bl	8001650 <HAL_I2C_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a04:	f000 f9d2 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	40005400 	.word	0x40005400
 8000a14:	000186a0 	.word	0x000186a0

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
 8000a32:	4b98      	ldr	r3, [pc, #608]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a97      	ldr	r2, [pc, #604]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b95      	ldr	r3, [pc, #596]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	4b91      	ldr	r3, [pc, #580]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a90      	ldr	r2, [pc, #576]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b8e      	ldr	r3, [pc, #568]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b8a      	ldr	r3, [pc, #552]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a89      	ldr	r2, [pc, #548]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b87      	ldr	r3, [pc, #540]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b83      	ldr	r3, [pc, #524]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a82      	ldr	r2, [pc, #520]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b80      	ldr	r3, [pc, #512]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a7b      	ldr	r2, [pc, #492]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b79      	ldr	r3, [pc, #484]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b75      	ldr	r3, [pc, #468]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a74      	ldr	r2, [pc, #464]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b72      	ldr	r3, [pc, #456]	@ (8000c94 <MX_GPIO_Init+0x27c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2108      	movs	r1, #8
 8000ada:	486f      	ldr	r0, [pc, #444]	@ (8000c98 <MX_GPIO_Init+0x280>)
 8000adc:	f000 fd84 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	486d      	ldr	r0, [pc, #436]	@ (8000c9c <MX_GPIO_Init+0x284>)
 8000ae6:	f000 fd7f 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aea:	2200      	movs	r2, #0
 8000aec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000af0:	486b      	ldr	r0, [pc, #428]	@ (8000ca0 <MX_GPIO_Init+0x288>)
 8000af2:	f000 fd79 	bl	80015e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000af6:	2308      	movs	r3, #8
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4862      	ldr	r0, [pc, #392]	@ (8000c98 <MX_GPIO_Init+0x280>)
 8000b0e:	f000 fbcf 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	485c      	ldr	r0, [pc, #368]	@ (8000c9c <MX_GPIO_Init+0x284>)
 8000b2a:	f000 fbc1 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4854      	ldr	r0, [pc, #336]	@ (8000c9c <MX_GPIO_Init+0x284>)
 8000b4a:	f000 fbb1 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	4b54      	ldr	r3, [pc, #336]	@ (8000ca4 <MX_GPIO_Init+0x28c>)
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4851      	ldr	r0, [pc, #324]	@ (8000ca8 <MX_GPIO_Init+0x290>)
 8000b62:	f000 fba5 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b66:	2310      	movs	r3, #16
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b76:	2306      	movs	r3, #6
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4849      	ldr	r0, [pc, #292]	@ (8000ca8 <MX_GPIO_Init+0x290>)
 8000b82:	f000 fb95 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b86:	23e0      	movs	r3, #224	@ 0xe0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4841      	ldr	r0, [pc, #260]	@ (8000ca8 <MX_GPIO_Init+0x290>)
 8000ba2:	f000 fb85 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	483c      	ldr	r0, [pc, #240]	@ (8000cac <MX_GPIO_Init+0x294>)
 8000bba:	f000 fb79 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4834      	ldr	r0, [pc, #208]	@ (8000cac <MX_GPIO_Init+0x294>)
 8000bdc:	f000 fb68 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000be0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000be4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4829      	ldr	r0, [pc, #164]	@ (8000ca0 <MX_GPIO_Init+0x288>)
 8000bfa:	f000 fb59 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bfe:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c10:	2306      	movs	r3, #6
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4820      	ldr	r0, [pc, #128]	@ (8000c9c <MX_GPIO_Init+0x284>)
 8000c1c:	f000 fb48 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	481c      	ldr	r0, [pc, #112]	@ (8000ca8 <MX_GPIO_Init+0x290>)
 8000c36:	f000 fb3b 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c3a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <MX_GPIO_Init+0x290>)
 8000c58:	f000 fb2a 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <MX_GPIO_Init+0x288>)
 8000c70:	f000 fb1e 	bl	80012b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <MX_GPIO_Init+0x298>)
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_GPIO_Init+0x280>)
 8000c88:	f000 fb12 	bl	80012b0 <HAL_GPIO_Init>

}
 8000c8c:	bf00      	nop
 8000c8e:	3730      	adds	r7, #48	@ 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	10110000 	.word	0x10110000
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	10120000 	.word	0x10120000

08000cb4 <led_green_handler>:

/* USER CODE BEGIN 4 */


static void led_green_handler(void* parameters)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000cbc:	4806      	ldr	r0, [pc, #24]	@ (8000cd8 <led_green_handler+0x24>)
 8000cbe:	f005 fe87 	bl	80069d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000cc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <led_green_handler+0x28>)
 8000cc8:	f000 fca7 	bl	800161a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000ccc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000cd0:	f000 f9e8 	bl	80010a4 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000cd4:	bf00      	nop
 8000cd6:	e7f1      	b.n	8000cbc <led_green_handler+0x8>
 8000cd8:	08006c00 	.word	0x08006c00
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <led_orange_handler+0x24>)
 8000cea:	f005 fe71 	bl	80069d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <led_orange_handler+0x28>)
 8000cf4:	f000 fc91 	bl	800161a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000cf8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000cfc:	f000 f9d2 	bl	80010a4 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000d00:	bf00      	nop
 8000d02:	e7f1      	b.n	8000ce8 <led_orange_handler+0x8>
 8000d04:	08006c14 	.word	0x08006c14
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <led_red_handler>:
	}
}


static void led_red_handler(void* parameters)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000d14:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <led_red_handler+0x24>)
 8000d16:	f005 fe5b 	bl	80069d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000d1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <led_red_handler+0x28>)
 8000d20:	f000 fc7b 	bl	800161a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000d24:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000d28:	f000 f9bc 	bl	80010a4 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000d2c:	bf00      	nop
 8000d2e:	e7f1      	b.n	8000d14 <led_red_handler+0x8>
 8000d30:	08006c28 	.word	0x08006c28
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <lcd_task_01_handler>:
	}
}


static void lcd_task_01_handler(void* parameters)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LCD screen output.");
 8000d40:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <lcd_task_01_handler+0x34>)
 8000d42:	f005 fe45 	bl	80069d0 <SEGGER_SYSVIEW_PrintfTarget>

		LCD_Send_String("Hello World!");
 8000d46:	480a      	ldr	r0, [pc, #40]	@ (8000d70 <lcd_task_01_handler+0x38>)
 8000d48:	f7ff fcfc 	bl	8000744 <LCD_Send_String>

		LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 8000d4c:	20c0      	movs	r0, #192	@ 0xc0
 8000d4e:	f7ff fc3d 	bl	80005cc <LCD_Send_Cmd>

		LCD_Send_String("Hello RTOS!");
 8000d52:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <lcd_task_01_handler+0x3c>)
 8000d54:	f7ff fcf6 	bl	8000744 <LCD_Send_String>

		HAL_Delay(2000);
 8000d58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d5c:	f000 f9a2 	bl	80010a4 <HAL_Delay>

		//LCD_Display_Long_Message("This is a function to display long messages on 16x02 LCD :-)");
		vTaskDelete(NULL);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f002 fab9 	bl	80032d8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("LCD screen output.");
 8000d66:	bf00      	nop
 8000d68:	e7ea      	b.n	8000d40 <lcd_task_01_handler+0x8>
 8000d6a:	bf00      	nop
 8000d6c:	08006c3c 	.word	0x08006c3c
 8000d70:	08006c50 	.word	0x08006c50
 8000d74:	08006c60 	.word	0x08006c60

08000d78 <gps_task_01_handler>:
	}
}


static void gps_task_01_handler(void* parameters)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelete(NULL); // Implement later
 8000d80:	2000      	movs	r0, #0
 8000d82:	f002 faa9 	bl	80032d8 <vTaskDelete>
 8000d86:	e7fb      	b.n	8000d80 <gps_task_01_handler+0x8>

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 f963 	bl	8001064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40001000 	.word	0x40001000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000dfa:	f002 ff3f 	bl	8003c7c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	@ (8000e90 <HAL_I2C_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	@ 0xc0
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <HAL_I2C_MspInit+0x8c>)
 8000e66:	f000 fa23 	bl	80012b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400

08000e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	@ 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	2036      	movs	r0, #54	@ 0x36
 8000eb2:	f000 f9d3 	bl	800125c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eb6:	2036      	movs	r0, #54	@ 0x36
 8000eb8:	f000 f9ec 	bl	8001294 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <HAL_InitTick+0xa4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_InitTick+0xa4>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_InitTick+0xa4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed8:	f107 0210 	add.w	r2, r7, #16
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fda8 	bl	8002a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ee8:	f001 fd92 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8000eec:	4603      	mov	r3, r0
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef4:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <HAL_InitTick+0xa8>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	0c9b      	lsrs	r3, r3, #18
 8000efc:	3b01      	subs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <HAL_InitTick+0xb0>)
 8000f04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f22:	f001 fdbb 	bl	8002a9c <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d104      	bne.n	8000f36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <HAL_InitTick+0xac>)
 8000f2e:	f001 fdea 	bl	8002b06 <HAL_TIM_Base_Start_IT>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3730      	adds	r7, #48	@ 0x30
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	431bde83 	.word	0x431bde83
 8000f48:	200000e0 	.word	0x200000e0
 8000f4c:	40001000 	.word	0x40001000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	bf00      	nop
 8000f64:	e7fd      	b.n	8000f62 <HardFault_Handler+0x4>

08000f66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6a:	bf00      	nop
 8000f6c:	e7fd      	b.n	8000f6a <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	bf00      	nop
 8000f74:	e7fd      	b.n	8000f72 <BusFault_Handler+0x4>

08000f76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7a:	bf00      	nop
 8000f7c:	e7fd      	b.n	8000f7a <UsageFault_Handler+0x4>

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <TIM6_DAC_IRQHandler+0x10>)
 8000f92:	f001 fddc 	bl	8002b4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000e0 	.word	0x200000e0

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <SystemInit+0x28>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000faa:	4a07      	ldr	r2, [pc, #28]	@ (8000fc8 <SystemInit+0x28>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <SystemInit+0x28>)
 8000fb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fba:	609a      	str	r2, [r3, #8]
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd2:	e003      	b.n	8000fdc <LoopCopyDataInit>

08000fd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fda:	3104      	adds	r1, #4

08000fdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fdc:	480b      	ldr	r0, [pc, #44]	@ (800100c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe4:	d3f6      	bcc.n	8000fd4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fe8:	e002      	b.n	8000ff0 <LoopFillZerobss>

08000fea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fec:	f842 3b04 	str.w	r3, [r2], #4

08000ff0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff4:	d3f9      	bcc.n	8000fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ff6:	f7ff ffd3 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f005 fd9f 	bl	8006b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fbb7 	bl	8000770 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001004:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001008:	08006d90 	.word	0x08006d90
  ldr  r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001010:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8001014:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8001018:	2001a8d0 	.word	0x2001a8d0

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f8fc 	bl	8001246 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff ff24 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff feb2 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000120 	.word	0x20000120

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000120 	.word	0x20000120

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff4c 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126e:	f7ff ff61 	bl	8001134 <__NVIC_GetPriorityGrouping>
 8001272:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff ffb1 	bl	80011e0 <NVIC_EncodePriority>
 800127e:	4602      	mov	r2, r0
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff80 	bl	800118c <__NVIC_SetPriority>
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff54 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e16b      	b.n	80015a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 815a 	bne.w	800159e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d00b      	beq.n	800130a <HAL_GPIO_Init+0x5a>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b12      	cmp	r3, #18
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0xfc>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b12      	cmp	r3, #18
 80013aa:	d123      	bne.n	80013f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80b4 	beq.w	800159e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b60      	ldr	r3, [pc, #384]	@ (80015bc <HAL_GPIO_Init+0x30c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a5f      	ldr	r2, [pc, #380]	@ (80015bc <HAL_GPIO_Init+0x30c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b5d      	ldr	r3, [pc, #372]	@ (80015bc <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001452:	4a5b      	ldr	r2, [pc, #364]	@ (80015c0 <HAL_GPIO_Init+0x310>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a52      	ldr	r2, [pc, #328]	@ (80015c4 <HAL_GPIO_Init+0x314>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d02b      	beq.n	80014d6 <HAL_GPIO_Init+0x226>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a51      	ldr	r2, [pc, #324]	@ (80015c8 <HAL_GPIO_Init+0x318>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x222>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a50      	ldr	r2, [pc, #320]	@ (80015cc <HAL_GPIO_Init+0x31c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x21e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4f      	ldr	r2, [pc, #316]	@ (80015d0 <HAL_GPIO_Init+0x320>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x21a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4e      	ldr	r2, [pc, #312]	@ (80015d4 <HAL_GPIO_Init+0x324>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x216>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4d      	ldr	r2, [pc, #308]	@ (80015d8 <HAL_GPIO_Init+0x328>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x212>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	@ (80015dc <HAL_GPIO_Init+0x32c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x20e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4b      	ldr	r2, [pc, #300]	@ (80015e0 <HAL_GPIO_Init+0x330>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x20a>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00e      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ba:	2308      	movs	r3, #8
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014be:	2306      	movs	r3, #6
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x228>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	@ (80015c0 <HAL_GPIO_Init+0x310>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151a:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001544:	4a27      	ldr	r2, [pc, #156]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800156e:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <HAL_GPIO_Init+0x334>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f ae90 	bls.w	80012cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40021c00 	.word	0x40021c00
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	401a      	ands	r2, r3
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	429a      	cmp	r2, r3
 8001632:	d104      	bne.n	800163e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800163c:	e002      	b.n	8001644 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e12b      	b.n	80018ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fbc8 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	@ 0x24
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b4:	f001 f9ac 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a81      	ldr	r2, [pc, #516]	@ (80018c4 <HAL_I2C_Init+0x274>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d807      	bhi.n	80016d4 <HAL_I2C_Init+0x84>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a80      	ldr	r2, [pc, #512]	@ (80018c8 <HAL_I2C_Init+0x278>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e006      	b.n	80016e2 <HAL_I2C_Init+0x92>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a7d      	ldr	r2, [pc, #500]	@ (80018cc <HAL_I2C_Init+0x27c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0e7      	b.n	80018ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a78      	ldr	r2, [pc, #480]	@ (80018d0 <HAL_I2C_Init+0x280>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a6a      	ldr	r2, [pc, #424]	@ (80018c4 <HAL_I2C_Init+0x274>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d802      	bhi.n	8001724 <HAL_I2C_Init+0xd4>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	e009      	b.n	8001738 <HAL_I2C_Init+0xe8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a69      	ldr	r2, [pc, #420]	@ (80018d4 <HAL_I2C_Init+0x284>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	3301      	adds	r3, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800174a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	495c      	ldr	r1, [pc, #368]	@ (80018c4 <HAL_I2C_Init+0x274>)
 8001754:	428b      	cmp	r3, r1
 8001756:	d819      	bhi.n	800178c <HAL_I2C_Init+0x13c>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e59      	subs	r1, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fbb1 f3f3 	udiv	r3, r1, r3
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800176c:	400b      	ands	r3, r1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_I2C_Init+0x138>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e59      	subs	r1, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	e051      	b.n	800182c <HAL_I2C_Init+0x1dc>
 8001788:	2304      	movs	r3, #4
 800178a:	e04f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_I2C_Init+0x168>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e012      	b.n	80017de <HAL_I2C_Init+0x18e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x196>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e022      	b.n	800182c <HAL_I2C_Init+0x1dc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <HAL_I2C_Init+0x1bc>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1e58      	subs	r0, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180a:	e00f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6809      	ldr	r1, [r1, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800185a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6911      	ldr	r1, [r2, #16]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68d2      	ldr	r2, [r2, #12]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	001e847f 	.word	0x001e847f
 80018cc:	003d08ff 	.word	0x003d08ff
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff fbce 	bl	800108c <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	f040 80e0 	bne.w	8001ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2319      	movs	r3, #25
 8001906:	2201      	movs	r2, #1
 8001908:	4970      	ldr	r1, [pc, #448]	@ (8001acc <HAL_I2C_Master_Transmit+0x1f4>)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fa92 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	e0d3      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x50>
 8001924:	2302      	movs	r3, #2
 8001926:	e0cc      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d007      	beq.n	800194e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800195c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2221      	movs	r2, #33	@ 0x21
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2210      	movs	r2, #16
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001990:	8979      	ldrh	r1, [r7, #10]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f9ca 	bl	8001d30 <I2C_MasterRequestWrite>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e08d      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019bc:	e066      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	6a39      	ldr	r1, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fb0c 	bl	8001fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06b      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d11b      	bne.n	8001a60 <HAL_I2C_Master_Transmit+0x188>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d017      	beq.n	8001a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	6a39      	ldr	r1, [r7, #32]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fafc 	bl	8002062 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e01a      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d194      	bne.n	80019be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	00100002 	.word	0x00100002
 8001ad0:	ffff0000 	.word	0xffff0000

08001ad4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff fad2 	bl	800108c <HAL_GetTick>
 8001ae8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	f040 8110 	bne.w	8001d1c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2319      	movs	r3, #25
 8001b02:	2201      	movs	r2, #1
 8001b04:	4988      	ldr	r1, [pc, #544]	@ (8001d28 <HAL_I2C_IsDeviceReady+0x254>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f994 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	e103      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2C_IsDeviceReady+0x50>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0fc      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d007      	beq.n	8001b4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2224      	movs	r2, #36	@ 0x24
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a70      	ldr	r2, [pc, #448]	@ (8001d2c <HAL_I2C_IsDeviceReady+0x258>)
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f952 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001baa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0b6      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bbe:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fa64 	bl	800108c <HAL_GetTick>
 8001bc4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bf4:	e025      	b.n	8001c42 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff fa49 	bl	800108c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <HAL_I2C_IsDeviceReady+0x138>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	22a0      	movs	r2, #160	@ 0xa0
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c4c:	d005      	beq.n	8001c5a <HAL_I2C_IsDeviceReady+0x186>
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <HAL_I2C_IsDeviceReady+0x186>
 8001c54:	7dbb      	ldrb	r3, [r7, #22]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0cd      	beq.n	8001bf6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d129      	bne.n	8001cc4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2319      	movs	r3, #25
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4922      	ldr	r1, [pc, #136]	@ (8001d28 <HAL_I2C_IsDeviceReady+0x254>)
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f8c7 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e036      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e02c      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cdc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2319      	movs	r3, #25
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4910      	ldr	r1, [pc, #64]	@ (8001d28 <HAL_I2C_IsDeviceReady+0x254>)
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f8a3 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e012      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f4ff af33 	bcc.w	8001b6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	00100002 	.word	0x00100002
 8001d2c:	ffff0000 	.word	0xffff0000

08001d30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d006      	beq.n	8001d5a <I2C_MasterRequestWrite+0x2a>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d003      	beq.n	8001d5a <I2C_MasterRequestWrite+0x2a>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d58:	d108      	bne.n	8001d6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e00b      	b.n	8001d84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	2b12      	cmp	r3, #18
 8001d72:	d107      	bne.n	8001d84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f84f 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001db0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e035      	b.n	8001e22 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dbe:	d108      	bne.n	8001dd2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dc0:	897b      	ldrh	r3, [r7, #10]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	e01b      	b.n	8001e0a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dd2:	897b      	ldrh	r3, [r7, #10]
 8001dd4:	11db      	asrs	r3, r3, #7
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f003 0306 	and.w	r3, r3, #6
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f063 030f 	orn	r3, r3, #15
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	490f      	ldr	r1, [pc, #60]	@ (8001e2c <I2C_MasterRequestWrite+0xfc>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f876 	bl	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e010      	b.n	8001e22 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <I2C_MasterRequestWrite+0x100>)
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f866 	bl	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	00010008 	.word	0x00010008
 8001e30:	00010002 	.word	0x00010002

08001e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e44:	e025      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e4c:	d021      	beq.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4e:	f7ff f91d 	bl	800108c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d116      	bne.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f043 0220 	orr.w	r2, r3, #32
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e023      	b.n	8001eda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10d      	bne.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	e00c      	b.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d0b6      	beq.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ef0:	e051      	b.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f00:	d123      	bne.n	8001f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f043 0204 	orr.w	r2, r3, #4
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e046      	b.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f50:	d021      	beq.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff f89b 	bl	800108c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d116      	bne.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e020      	b.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10c      	bne.n	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4013      	ands	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e00b      	b.n	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d18d      	bne.n	8001ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fec:	e02d      	b.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f878 	bl	80020e4 <I2C_IsAcknowledgeFailed>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e02d      	b.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002004:	d021      	beq.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002006:	f7ff f841 	bl	800108c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	429a      	cmp	r2, r3
 8002014:	d302      	bcc.n	800201c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d116      	bne.n	800204a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f043 0220 	orr.w	r2, r3, #32
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e007      	b.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002054:	2b80      	cmp	r3, #128	@ 0x80
 8002056:	d1ca      	bne.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800206e:	e02d      	b.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f837 	bl	80020e4 <I2C_IsAcknowledgeFailed>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e02d      	b.n	80020dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002086:	d021      	beq.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7ff f800 	bl	800108c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	429a      	cmp	r2, r3
 8002096:	d302      	bcc.n	800209e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e007      	b.n	80020dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d1ca      	bne.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d11b      	bne.n	8002134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f043 0204 	orr.w	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e25e      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d075      	beq.n	800224e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002162:	4b88      	ldr	r3, [pc, #544]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d00c      	beq.n	8002188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216e:	4b85      	ldr	r3, [pc, #532]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4b82      	ldr	r3, [pc, #520]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4b7e      	ldr	r3, [pc, #504]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d05b      	beq.n	800224c <HAL_RCC_OscConfig+0x108>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d157      	bne.n	800224c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e239      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x74>
 80021aa:	4b76      	ldr	r3, [pc, #472]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a75      	ldr	r2, [pc, #468]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x98>
 80021c2:	4b70      	ldr	r3, [pc, #448]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6f      	ldr	r2, [pc, #444]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6c      	ldr	r2, [pc, #432]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xb0>
 80021dc:	4b69      	ldr	r3, [pc, #420]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a68      	ldr	r2, [pc, #416]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b66      	ldr	r3, [pc, #408]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a65      	ldr	r2, [pc, #404]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff46 	bl	800108c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe ff42 	bl	800108c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	@ 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1fe      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b5b      	ldr	r3, [pc, #364]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xc0>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe ff32 	bl	800108c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe ff2e 	bl	800108c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	@ 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1ea      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b51      	ldr	r3, [pc, #324]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0xe8>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d063      	beq.n	8002322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225a:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226e:	2b08      	cmp	r3, #8
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x152>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1be      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4937      	ldr	r1, [pc, #220]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e03a      	b.n	8002322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <HAL_RCC_OscConfig+0x244>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fee7 	bl	800108c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fee3 	bl	800108c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e19f      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4925      	ldr	r1, [pc, #148]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_OscConfig+0x244>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fec6 	bl	800108c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe fec2 	bl	800108c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e17e      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d036      	beq.n	800239c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002336:	4b15      	ldr	r3, [pc, #84]	@ (800238c <HAL_RCC_OscConfig+0x248>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe fea6 	bl	800108c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fea2 	bl	800108c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e15e      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_OscConfig+0x240>)
 8002358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x200>
 8002362:	e01b      	b.n	800239c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002364:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_RCC_OscConfig+0x248>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe fe8f 	bl	800108c <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	e00e      	b.n	8002390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002372:	f7fe fe8b 	bl	800108c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d907      	bls.n	8002390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e147      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
 8002384:	40023800 	.word	0x40023800
 8002388:	42470000 	.word	0x42470000
 800238c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b88      	ldr	r3, [pc, #544]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ea      	bne.n	8002372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8097 	beq.w	80024d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b81      	ldr	r3, [pc, #516]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b7d      	ldr	r3, [pc, #500]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a7c      	ldr	r2, [pc, #496]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b7a      	ldr	r3, [pc, #488]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b77      	ldr	r3, [pc, #476]	@ (80025b8 <HAL_RCC_OscConfig+0x474>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b74      	ldr	r3, [pc, #464]	@ (80025b8 <HAL_RCC_OscConfig+0x474>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a73      	ldr	r2, [pc, #460]	@ (80025b8 <HAL_RCC_OscConfig+0x474>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe4b 	bl	800108c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7fe fe47 	bl	800108c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e103      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_OscConfig+0x474>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x2ea>
 8002420:	4b64      	ldr	r3, [pc, #400]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	4a63      	ldr	r2, [pc, #396]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	@ 0x70
 800242c:	e01c      	b.n	8002468 <HAL_RCC_OscConfig+0x324>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b05      	cmp	r3, #5
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x30c>
 8002436:	4b5f      	ldr	r3, [pc, #380]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	4a5e      	ldr	r2, [pc, #376]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	@ 0x70
 8002442:	4b5c      	ldr	r3, [pc, #368]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a5b      	ldr	r2, [pc, #364]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0x324>
 8002450:	4b58      	ldr	r3, [pc, #352]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002454:	4a57      	ldr	r2, [pc, #348]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	@ 0x70
 800245c:	4b55      	ldr	r3, [pc, #340]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a54      	ldr	r2, [pc, #336]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d015      	beq.n	800249c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe fe0c 	bl	800108c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7fe fe08 	bl	800108c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0c2      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248e:	4b49      	ldr	r3, [pc, #292]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ee      	beq.n	8002478 <HAL_RCC_OscConfig+0x334>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7fe fdf6 	bl	800108c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe fdf2 	bl	800108c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0ac      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ee      	bne.n	80024a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d105      	bne.n	80024d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024cc:	4b39      	ldr	r3, [pc, #228]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	4a38      	ldr	r2, [pc, #224]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8098 	beq.w	8002612 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e2:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d05c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d141      	bne.n	800257a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <HAL_RCC_OscConfig+0x478>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fdc6 	bl	800108c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fdc2 	bl	800108c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e07e      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	019b      	lsls	r3, r3, #6
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	491b      	ldr	r1, [pc, #108]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x478>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fd9b 	bl	800108c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fd97 	bl	800108c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e053      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x416>
 8002578:	e04b      	b.n	8002612 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_RCC_OscConfig+0x478>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fd84 	bl	800108c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fd80 	bl	800108c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e03c      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_RCC_OscConfig+0x470>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x444>
 80025a6:	e034      	b.n	8002612 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e02f      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c0:	4b16      	ldr	r3, [pc, #88]	@ (800261c <HAL_RCC_OscConfig+0x4d8>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d11c      	bne.n	800260e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d115      	bne.n	800260e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0cc      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b68      	ldr	r3, [pc, #416]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d90c      	bls.n	800265c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d044      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b3f      	ldr	r3, [pc, #252]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e067      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4934      	ldr	r1, [pc, #208]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe fcbc 	bl	800108c <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fcb8 	bl	800108c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e04f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d20c      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fb68 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08006d40 	.word	0x08006d40
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b094      	sub	sp, #80	@ 0x50
 80027f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80027f8:	2300      	movs	r3, #0
 80027fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027fc:	2300      	movs	r3, #0
 80027fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002804:	4b79      	ldr	r3, [pc, #484]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d00d      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x40>
 8002810:	2b08      	cmp	r3, #8
 8002812:	f200 80e1 	bhi.w	80029d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x34>
 800281a:	2b04      	cmp	r3, #4
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x3a>
 800281e:	e0db      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b73      	ldr	r3, [pc, #460]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002822:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002824:	e0db      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b73      	ldr	r3, [pc, #460]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002828:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800282a:	e0d8      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b6f      	ldr	r3, [pc, #444]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002834:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002836:	4b6d      	ldr	r3, [pc, #436]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b6a      	ldr	r3, [pc, #424]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	2200      	movs	r2, #0
 800284a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800284c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002854:	633b      	str	r3, [r7, #48]	@ 0x30
 8002856:	2300      	movs	r3, #0
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
 800285a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800285e:	4622      	mov	r2, r4
 8002860:	462b      	mov	r3, r5
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	0159      	lsls	r1, r3, #5
 800286c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002870:	0150      	lsls	r0, r2, #5
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4621      	mov	r1, r4
 8002878:	1a51      	subs	r1, r2, r1
 800287a:	6139      	str	r1, [r7, #16]
 800287c:	4629      	mov	r1, r5
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002890:	4659      	mov	r1, fp
 8002892:	018b      	lsls	r3, r1, #6
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289a:	4651      	mov	r1, sl
 800289c:	018a      	lsls	r2, r1, #6
 800289e:	4651      	mov	r1, sl
 80028a0:	ebb2 0801 	subs.w	r8, r2, r1
 80028a4:	4659      	mov	r1, fp
 80028a6:	eb63 0901 	sbc.w	r9, r3, r1
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028be:	4690      	mov	r8, r2
 80028c0:	4699      	mov	r9, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	eb18 0303 	adds.w	r3, r8, r3
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	462b      	mov	r3, r5
 80028cc:	eb49 0303 	adc.w	r3, r9, r3
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028de:	4629      	mov	r1, r5
 80028e0:	024b      	lsls	r3, r1, #9
 80028e2:	4621      	mov	r1, r4
 80028e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e8:	4621      	mov	r1, r4
 80028ea:	024a      	lsls	r2, r1, #9
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028fc:	f7fd fcb2 	bl	8000264 <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4613      	mov	r3, r2
 8002906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002908:	e058      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290a:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	099b      	lsrs	r3, r3, #6
 8002910:	2200      	movs	r2, #0
 8002912:	4618      	mov	r0, r3
 8002914:	4611      	mov	r1, r2
 8002916:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002920:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	0159      	lsls	r1, r3, #5
 8002932:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002936:	0150      	lsls	r0, r2, #5
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4641      	mov	r1, r8
 800293e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002942:	4649      	mov	r1, r9
 8002944:	eb63 0b01 	sbc.w	fp, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002954:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002958:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800295c:	ebb2 040a 	subs.w	r4, r2, sl
 8002960:	eb63 050b 	sbc.w	r5, r3, fp
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	00eb      	lsls	r3, r5, #3
 800296e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002972:	00e2      	lsls	r2, r4, #3
 8002974:	4614      	mov	r4, r2
 8002976:	461d      	mov	r5, r3
 8002978:	4643      	mov	r3, r8
 800297a:	18e3      	adds	r3, r4, r3
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	464b      	mov	r3, r9
 8002980:	eb45 0303 	adc.w	r3, r5, r3
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002992:	4629      	mov	r1, r5
 8002994:	028b      	lsls	r3, r1, #10
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800299c:	4621      	mov	r1, r4
 800299e:	028a      	lsls	r2, r1, #10
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	61fa      	str	r2, [r7, #28]
 80029ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b0:	f7fd fc58 	bl	8000264 <__aeabi_uldivmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4613      	mov	r3, r2
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	3301      	adds	r3, #1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80029cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029d6:	e002      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3750      	adds	r7, #80	@ 0x50
 80029e4:	46bd      	mov	sp, r7
 80029e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200

080029f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08006d50 	.word	0x08006d50

08002a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	220f      	movs	r2, #15
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a54:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a7a:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <HAL_RCC_GetClockConfig+0x60>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 020f 	and.w	r2, r3, #15
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40023c00 	.word	0x40023c00

08002a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e01d      	b.n	8002aea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f815 	bl	8002af2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 f968 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d007      	beq.n	8002b40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d122      	bne.n	8002baa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d11b      	bne.n	8002baa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0202 	mvn.w	r2, #2
 8002b7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8ee 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002b96:	e005      	b.n	8002ba4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8e0 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8f1 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d122      	bne.n	8002bfe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d11b      	bne.n	8002bfe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0204 	mvn.w	r2, #4
 8002bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f8c4 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002bea:	e005      	b.n	8002bf8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f8b6 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8c7 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d122      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d11b      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0208 	mvn.w	r2, #8
 8002c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2204      	movs	r2, #4
 8002c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f89a 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f88c 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f89d 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d122      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d11b      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0210 	mvn.w	r2, #16
 8002c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f870 	bl	8002d72 <HAL_TIM_IC_CaptureCallback>
 8002c92:	e005      	b.n	8002ca0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f862 	bl	8002d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f873 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0201 	mvn.w	r2, #1
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7fe f85b 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cdc:	2b80      	cmp	r3, #128	@ 0x80
 8002cde:	d10e      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d107      	bne.n	8002cfe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f903 	bl	8002f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d08:	2b40      	cmp	r3, #64	@ 0x40
 8002d0a:	d10e      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b40      	cmp	r3, #64	@ 0x40
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f838 	bl	8002d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d10e      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d107      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0220 	mvn.w	r2, #32
 8002d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8cd 	bl	8002ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a40      	ldr	r2, [pc, #256]	@ (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dce:	d00f      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ec8 <TIM_Base_SetConfig+0x118>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3c      	ldr	r2, [pc, #240]	@ (8002ecc <TIM_Base_SetConfig+0x11c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed0 <TIM_Base_SetConfig+0x120>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3a      	ldr	r2, [pc, #232]	@ (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e10:	d027      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec8 <TIM_Base_SetConfig+0x118>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d023      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ecc <TIM_Base_SetConfig+0x11c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed0 <TIM_Base_SetConfig+0x120>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01b      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a29      	ldr	r2, [pc, #164]	@ (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d017      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a28      	ldr	r2, [pc, #160]	@ (8002ed8 <TIM_Base_SetConfig+0x128>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a27      	ldr	r2, [pc, #156]	@ (8002edc <TIM_Base_SetConfig+0x12c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00f      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <TIM_Base_SetConfig+0x130>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a25      	ldr	r2, [pc, #148]	@ (8002ee4 <TIM_Base_SetConfig+0x134>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a24      	ldr	r2, [pc, #144]	@ (8002ee8 <TIM_Base_SetConfig+0x138>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <TIM_Base_SetConfig+0x13c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0xf8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	40001800 	.word	0x40001800
 8002ee8:	40001c00 	.word	0x40001c00
 8002eec:	40002000 	.word	0x40002000

08002ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f103 0208 	add.w	r2, r3, #8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f30:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f103 0208 	add.w	r2, r3, #8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 0208 	add.w	r2, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	601a      	str	r2, [r3, #0]
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6852      	ldr	r2, [r2, #4]
 8002fda:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d103      	bne.n	8002fee <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800300e:	b580      	push	{r7, lr}
 8003010:	b08c      	sub	sp, #48	@ 0x30
 8003012:	af04      	add	r7, sp, #16
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ffdc 	bl	8003fe0 <pvPortMalloc>
 8003028:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003030:	2058      	movs	r0, #88	@ 0x58
 8003032:	f000 ffd5 	bl	8003fe0 <pvPortMalloc>
 8003036:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
 8003044:	e005      	b.n	8003052 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f001 f8ac 	bl	80041a4 <vPortFree>
 800304c:	e001      	b.n	8003052 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	2300      	movs	r3, #0
 800305c:	9303      	str	r3, [sp, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f80e 	bl	8003090 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003074:	69f8      	ldr	r0, [r7, #28]
 8003076:	f000 f8a3 	bl	80031c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e002      	b.n	8003086 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003084:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003086:	69bb      	ldr	r3, [r7, #24]
    }
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	21a5      	movs	r1, #165	@ 0xa5
 80030aa:	f003 fd3f 	bl	8006b2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030b8:	3b01      	subs	r3, #1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f023 0307 	bic.w	r3, r3, #7
 80030c6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <prvInitialiseNewTask+0x5a>
        __asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	617b      	str	r3, [r7, #20]
    }
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	e7fd      	b.n	80030e6 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	e012      	b.n	800311c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	4413      	add	r3, r2
 80030fc:	7819      	ldrb	r1, [r3, #0]
 80030fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	3334      	adds	r3, #52	@ 0x34
 8003106:	460a      	mov	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3301      	adds	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b09      	cmp	r3, #9
 8003120:	d9e9      	bls.n	80030f6 <prvInitialiseNewTask+0x66>
 8003122:	e000      	b.n	8003126 <prvInitialiseNewTask+0x96>
            {
                break;
 8003124:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800312e:	e003      	b.n	8003138 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	2b04      	cmp	r3, #4
 800313c:	d901      	bls.n	8003142 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800313e:	2304      	movs	r3, #4
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003146:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800314c:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	2200      	movs	r2, #0
 8003152:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	3304      	adds	r3, #4
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fefd 	bl	8002f58 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	3318      	adds	r3, #24
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fef8 	bl	8002f58 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800316c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	f1c3 0205 	rsb	r2, r3, #5
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	3350      	adds	r3, #80	@ 0x50
 8003182:	2204      	movs	r2, #4
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fcd0 	bl	8006b2c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800318c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318e:	3354      	adds	r3, #84	@ 0x54
 8003190:	2201      	movs	r2, #1
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fcc9 	bl	8006b2c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	69b8      	ldr	r0, [r7, #24]
 80031a0:	f000 fc3c 	bl	8003a1c <pxPortInitialiseStack>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031b6:	bf00      	nop
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031c0:	b5b0      	push	{r4, r5, r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031c8:	f000 fdd8 	bl	8003d7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031cc:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <prvAddNewTaskToReadyList+0xfc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a3a      	ldr	r2, [pc, #232]	@ (80032bc <prvAddNewTaskToReadyList+0xfc>)
 80031d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031d6:	4b3a      	ldr	r3, [pc, #232]	@ (80032c0 <prvAddNewTaskToReadyList+0x100>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031de:	4a38      	ldr	r2, [pc, #224]	@ (80032c0 <prvAddNewTaskToReadyList+0x100>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031e4:	4b35      	ldr	r3, [pc, #212]	@ (80032bc <prvAddNewTaskToReadyList+0xfc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d110      	bne.n	800320e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031ec:	f000 fb7c 	bl	80038e8 <prvInitialiseTaskLists>
 80031f0:	e00d      	b.n	800320e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031f2:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <prvAddNewTaskToReadyList+0x104>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031fa:	4b31      	ldr	r3, [pc, #196]	@ (80032c0 <prvAddNewTaskToReadyList+0x100>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d802      	bhi.n	800320e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003208:	4a2d      	ldr	r2, [pc, #180]	@ (80032c0 <prvAddNewTaskToReadyList+0x100>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800320e:	4b2e      	ldr	r3, [pc, #184]	@ (80032c8 <prvAddNewTaskToReadyList+0x108>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <prvAddNewTaskToReadyList+0x108>)
 8003216:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <prvAddNewTaskToReadyList+0x108>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d016      	beq.n	8003254 <prvAddNewTaskToReadyList+0x94>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fa1f 	bl	800666c <SEGGER_SYSVIEW_OnTaskCreate>
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	461d      	mov	r5, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461c      	mov	r4, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	1ae3      	subs	r3, r4, r3
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	462b      	mov	r3, r5
 8003250:	f001 f978 	bl	8004544 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 fa8c 	bl	8006774 <SEGGER_SYSVIEW_OnTaskStartReady>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <prvAddNewTaskToReadyList+0x10c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	4a18      	ldr	r2, [pc, #96]	@ (80032cc <prvAddNewTaskToReadyList+0x10c>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <prvAddNewTaskToReadyList+0x110>)
 800327c:	441a      	add	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f7ff fe74 	bl	8002f72 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800328a:	f000 fda9 	bl	8003de0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <prvAddNewTaskToReadyList+0x104>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00e      	beq.n	80032b4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <prvAddNewTaskToReadyList+0x100>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d207      	bcs.n	80032b4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <prvAddNewTaskToReadyList+0x114>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bdb0      	pop	{r4, r5, r7, pc}
 80032bc:	200001fc 	.word	0x200001fc
 80032c0:	20000124 	.word	0x20000124
 80032c4:	20000208 	.word	0x20000208
 80032c8:	20000218 	.word	0x20000218
 80032cc:	20000204 	.word	0x20000204
 80032d0:	20000128 	.word	0x20000128
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80032e0:	f000 fd4c 	bl	8003d7c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <vTaskDelete+0x18>
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <vTaskDelete+0x12c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <vTaskDelete+0x1a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fe5e 	bl	8002fba <uxListRemove>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d115      	bne.n	8003330 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003308:	493f      	ldr	r1, [pc, #252]	@ (8003408 <vTaskDelete+0x130>)
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <vTaskDelete+0x58>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	2201      	movs	r2, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43da      	mvns	r2, r3
 8003326:	4b39      	ldr	r3, [pc, #228]	@ (800340c <vTaskDelete+0x134>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4013      	ands	r3, r2
 800332c:	4a37      	ldr	r2, [pc, #220]	@ (800340c <vTaskDelete+0x134>)
 800332e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3318      	adds	r3, #24
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fe3c 	bl	8002fba <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003342:	4b33      	ldr	r3, [pc, #204]	@ (8003410 <vTaskDelete+0x138>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	4a31      	ldr	r2, [pc, #196]	@ (8003410 <vTaskDelete+0x138>)
 800334a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800334c:	4b2d      	ldr	r3, [pc, #180]	@ (8003404 <vTaskDelete+0x12c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	429a      	cmp	r2, r3
 8003354:	d118      	bne.n	8003388 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	482d      	ldr	r0, [pc, #180]	@ (8003414 <vTaskDelete+0x13c>)
 800335e:	f7ff fe08 	bl	8002f72 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003362:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <vTaskDelete+0x140>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <vTaskDelete+0x140>)
 800336a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4618      	mov	r0, r3
 8003370:	f003 fa42 	bl	80067f8 <SEGGER_SYSVIEW_ShrinkId>
 8003374:	4603      	mov	r3, r0
 8003376:	4619      	mov	r1, r3
 8003378:	2022      	movs	r0, #34	@ 0x22
 800337a:	f002 fd81 	bl	8005e80 <SEGGER_SYSVIEW_RecordU32>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f947 	bl	8004614 <SYSVIEW_DeleteTask>
 8003386:	e016      	b.n	80033b6 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003388:	4b24      	ldr	r3, [pc, #144]	@ (800341c <vTaskDelete+0x144>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	4a23      	ldr	r2, [pc, #140]	@ (800341c <vTaskDelete+0x144>)
 8003390:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fa2f 	bl	80067f8 <SEGGER_SYSVIEW_ShrinkId>
 800339a:	4603      	mov	r3, r0
 800339c:	4619      	mov	r1, r3
 800339e:	2022      	movs	r0, #34	@ 0x22
 80033a0:	f002 fd6e 	bl	8005e80 <SEGGER_SYSVIEW_RecordU32>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f934 	bl	8004614 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fb09 	bl	80039c4 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80033b2:	f000 fb17 	bl	80039e4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80033b6:	f000 fd13 	bl	8003de0 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80033ba:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <vTaskDelete+0x148>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01c      	beq.n	80033fc <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <vTaskDelete+0x12c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d117      	bne.n	80033fc <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80033cc:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <vTaskDelete+0x14c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <vTaskDelete+0x114>
        __asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	60bb      	str	r3, [r7, #8]
    }
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <vTaskDelete+0x150>)
 80033ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000124 	.word	0x20000124
 8003408:	20000128 	.word	0x20000128
 800340c:	20000204 	.word	0x20000204
 8003410:	20000218 	.word	0x20000218
 8003414:	200001d0 	.word	0x200001d0
 8003418:	200001e4 	.word	0x200001e4
 800341c:	200001fc 	.word	0x200001fc
 8003420:	20000208 	.word	0x20000208
 8003424:	20000224 	.word	0x20000224
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <vTaskStartScheduler+0x98>)
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	2282      	movs	r2, #130	@ 0x82
 800343e:	4922      	ldr	r1, [pc, #136]	@ (80034c8 <vTaskStartScheduler+0x9c>)
 8003440:	4822      	ldr	r0, [pc, #136]	@ (80034cc <vTaskStartScheduler+0xa0>)
 8003442:	f7ff fde4 	bl	800300e <xTaskCreate>
 8003446:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d124      	bne.n	8003498 <vTaskStartScheduler+0x6c>
        __asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	60bb      	str	r3, [r7, #8]
    }
 8003460:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <vTaskStartScheduler+0xa4>)
 8003464:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003468:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800346a:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <vTaskStartScheduler+0xa8>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <vTaskStartScheduler+0xac>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003476:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <vTaskStartScheduler+0xb0>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <vTaskStartScheduler+0x98>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d102      	bne.n	8003488 <vTaskStartScheduler+0x5c>
 8003482:	f003 f8d7 	bl	8006634 <SEGGER_SYSVIEW_OnIdle>
 8003486:	e004      	b.n	8003492 <vTaskStartScheduler+0x66>
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <vTaskStartScheduler+0xb0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 f92f 	bl	80066f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003492:	f000 fb4f 	bl	8003b34 <xPortStartScheduler>
 8003496:	e00f      	b.n	80034b8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800349e:	d10b      	bne.n	80034b8 <vTaskStartScheduler+0x8c>
        __asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	607b      	str	r3, [r7, #4]
    }
 80034b2:	bf00      	nop
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <vTaskStartScheduler+0xb4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000220 	.word	0x20000220
 80034c8:	08006c6c 	.word	0x08006c6c
 80034cc:	080038b9 	.word	0x080038b9
 80034d0:	2000021c 	.word	0x2000021c
 80034d4:	20000208 	.word	0x20000208
 80034d8:	20000200 	.word	0x20000200
 80034dc:	20000124 	.word	0x20000124
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <vTaskSuspendAll+0x18>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a03      	ldr	r2, [pc, #12]	@ (80034fc <vTaskSuspendAll+0x18>)
 80034f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000224 	.word	0x20000224

08003500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800350e:	4b44      	ldr	r3, [pc, #272]	@ (8003620 <xTaskResumeAll+0x120>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <xTaskResumeAll+0x2e>
        __asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	603b      	str	r3, [r7, #0]
    }
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	e7fd      	b.n	800352a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800352e:	f000 fc25 	bl	8003d7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003532:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <xTaskResumeAll+0x120>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	4a39      	ldr	r2, [pc, #228]	@ (8003620 <xTaskResumeAll+0x120>)
 800353a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353c:	4b38      	ldr	r3, [pc, #224]	@ (8003620 <xTaskResumeAll+0x120>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d165      	bne.n	8003610 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003544:	4b37      	ldr	r3, [pc, #220]	@ (8003624 <xTaskResumeAll+0x124>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d061      	beq.n	8003610 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354c:	e032      	b.n	80035b4 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <xTaskResumeAll+0x128>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3318      	adds	r3, #24
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fd2d 	bl	8002fba <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3304      	adds	r3, #4
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fd28 	bl	8002fba <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4618      	mov	r0, r3
 800356e:	f003 f901 	bl	8006774 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	2201      	movs	r2, #1
 8003578:	409a      	lsls	r2, r3
 800357a:	4b2c      	ldr	r3, [pc, #176]	@ (800362c <xTaskResumeAll+0x12c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	4a2a      	ldr	r2, [pc, #168]	@ (800362c <xTaskResumeAll+0x12c>)
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4a27      	ldr	r2, [pc, #156]	@ (8003630 <xTaskResumeAll+0x130>)
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7ff fce9 	bl	8002f72 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a4:	4b23      	ldr	r3, [pc, #140]	@ (8003634 <xTaskResumeAll+0x134>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80035ae:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <xTaskResumeAll+0x138>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003628 <xTaskResumeAll+0x128>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1c8      	bne.n	800354e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035c2:	f000 fa0f 	bl	80039e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035c6:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <xTaskResumeAll+0x13c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d010      	beq.n	80035f4 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035d2:	f000 f849 	bl	8003668 <xTaskIncrementTick>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80035dc:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <xTaskResumeAll+0x138>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f1      	bne.n	80035d2 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80035ee:	4b13      	ldr	r3, [pc, #76]	@ (800363c <xTaskResumeAll+0x13c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80035f4:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <xTaskResumeAll+0x138>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <xTaskResumeAll+0x140>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003610:	f000 fbe6 	bl	8003de0 <vPortExitCritical>

    return xAlreadyYielded;
 8003614:	68bb      	ldr	r3, [r7, #8]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000224 	.word	0x20000224
 8003624:	200001fc 	.word	0x200001fc
 8003628:	200001bc 	.word	0x200001bc
 800362c:	20000204 	.word	0x20000204
 8003630:	20000128 	.word	0x20000128
 8003634:	20000124 	.word	0x20000124
 8003638:	20000210 	.word	0x20000210
 800363c:	2000020c 	.word	0x2000020c
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800364a:	f000 fc87 	bl	8003f5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003652:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <xTaskGetTickCountFromISR+0x20>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003658:	683b      	ldr	r3, [r7, #0]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000200 	.word	0x20000200

08003668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003672:	4b51      	ldr	r3, [pc, #324]	@ (80037b8 <xTaskIncrementTick+0x150>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 8093 	bne.w	80037a2 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800367c:	4b4f      	ldr	r3, [pc, #316]	@ (80037bc <xTaskIncrementTick+0x154>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003684:	4a4d      	ldr	r2, [pc, #308]	@ (80037bc <xTaskIncrementTick+0x154>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d121      	bne.n	80036d4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003690:	4b4b      	ldr	r3, [pc, #300]	@ (80037c0 <xTaskIncrementTick+0x158>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <xTaskIncrementTick+0x4a>
        __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
    }
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xTaskIncrementTick+0x46>
 80036b2:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	4b42      	ldr	r3, [pc, #264]	@ (80037c4 <xTaskIncrementTick+0x15c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a40      	ldr	r2, [pc, #256]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4a40      	ldr	r2, [pc, #256]	@ (80037c4 <xTaskIncrementTick+0x15c>)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b40      	ldr	r3, [pc, #256]	@ (80037c8 <xTaskIncrementTick+0x160>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a3e      	ldr	r2, [pc, #248]	@ (80037c8 <xTaskIncrementTick+0x160>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	f000 f988 	bl	80039e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80036d4:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <xTaskIncrementTick+0x164>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d34c      	bcc.n	8003778 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036de:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e8:	4b38      	ldr	r3, [pc, #224]	@ (80037cc <xTaskIncrementTick+0x164>)
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036ee:	601a      	str	r2, [r3, #0]
                    break;
 80036f0:	e042      	b.n	8003778 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <xTaskIncrementTick+0x158>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	429a      	cmp	r2, r3
 8003708:	d203      	bcs.n	8003712 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800370a:	4a30      	ldr	r2, [pc, #192]	@ (80037cc <xTaskIncrementTick+0x164>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003710:	e032      	b.n	8003778 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fc4f 	bl	8002fba <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3318      	adds	r3, #24
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fc46 	bl	8002fba <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4618      	mov	r0, r3
 8003732:	f003 f81f 	bl	8006774 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	2201      	movs	r2, #1
 800373c:	409a      	lsls	r2, r3
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <xTaskIncrementTick+0x168>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <xTaskIncrementTick+0x168>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4a1f      	ldr	r2, [pc, #124]	@ (80037d4 <xTaskIncrementTick+0x16c>)
 8003756:	441a      	add	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7ff fc07 	bl	8002f72 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <xTaskIncrementTick+0x170>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	429a      	cmp	r2, r3
 8003770:	d3b5      	bcc.n	80036de <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003772:	2301      	movs	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003776:	e7b2      	b.n	80036de <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003778:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <xTaskIncrementTick+0x170>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377e:	4915      	ldr	r1, [pc, #84]	@ (80037d4 <xTaskIncrementTick+0x16c>)
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d901      	bls.n	8003794 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <xTaskIncrementTick+0x174>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e004      	b.n	80037ac <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037a2:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <xTaskIncrementTick+0x178>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a0d      	ldr	r2, [pc, #52]	@ (80037e0 <xTaskIncrementTick+0x178>)
 80037aa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80037ac:	697b      	ldr	r3, [r7, #20]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000224 	.word	0x20000224
 80037bc:	20000200 	.word	0x20000200
 80037c0:	200001b4 	.word	0x200001b4
 80037c4:	200001b8 	.word	0x200001b8
 80037c8:	20000214 	.word	0x20000214
 80037cc:	2000021c 	.word	0x2000021c
 80037d0:	20000204 	.word	0x20000204
 80037d4:	20000128 	.word	0x20000128
 80037d8:	20000124 	.word	0x20000124
 80037dc:	20000210 	.word	0x20000210
 80037e0:	2000020c 	.word	0x2000020c

080037e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ea:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <vTaskSwitchContext+0xbc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80037f2:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <vTaskSwitchContext+0xc0>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80037f8:	e04e      	b.n	8003898 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80037fa:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <vTaskSwitchContext+0xc0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003800:	4b29      	ldr	r3, [pc, #164]	@ (80038a8 <vTaskSwitchContext+0xc4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800380e:	7afb      	ldrb	r3, [r7, #11]
 8003810:	f1c3 031f 	rsb	r3, r3, #31
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	4925      	ldr	r1, [pc, #148]	@ (80038ac <vTaskSwitchContext+0xc8>)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <vTaskSwitchContext+0x5e>
        __asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	607b      	str	r3, [r7, #4]
    }
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vTaskSwitchContext+0x5a>
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4a17      	ldr	r2, [pc, #92]	@ (80038ac <vTaskSwitchContext+0xc8>)
 800384e:	4413      	add	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3308      	adds	r3, #8
 8003864:	429a      	cmp	r2, r3
 8003866:	d104      	bne.n	8003872 <vTaskSwitchContext+0x8e>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a0d      	ldr	r2, [pc, #52]	@ (80038b0 <vTaskSwitchContext+0xcc>)
 800387a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <vTaskSwitchContext+0xcc>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b0c      	ldr	r3, [pc, #48]	@ (80038b4 <vTaskSwitchContext+0xd0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d102      	bne.n	800388e <vTaskSwitchContext+0xaa>
 8003888:	f002 fed4 	bl	8006634 <SEGGER_SYSVIEW_OnIdle>
}
 800388c:	e004      	b.n	8003898 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800388e:	4b08      	ldr	r3, [pc, #32]	@ (80038b0 <vTaskSwitchContext+0xcc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 ff2c 	bl	80066f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000224 	.word	0x20000224
 80038a4:	20000210 	.word	0x20000210
 80038a8:	20000204 	.word	0x20000204
 80038ac:	20000128 	.word	0x20000128
 80038b0:	20000124 	.word	0x20000124
 80038b4:	20000220 	.word	0x20000220

080038b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038c0:	f000 f852 	bl	8003968 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <prvIdleTask+0x28>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d9f9      	bls.n	80038c0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <prvIdleTask+0x2c>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038dc:	e7f0      	b.n	80038c0 <prvIdleTask+0x8>
 80038de:	bf00      	nop
 80038e0:	20000128 	.word	0x20000128
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e00c      	b.n	800390e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <prvInitialiseTaskLists+0x60>)
 8003900:	4413      	add	r3, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fb08 	bl	8002f18 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3301      	adds	r3, #1
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d9ef      	bls.n	80038f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003914:	480d      	ldr	r0, [pc, #52]	@ (800394c <prvInitialiseTaskLists+0x64>)
 8003916:	f7ff faff 	bl	8002f18 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800391a:	480d      	ldr	r0, [pc, #52]	@ (8003950 <prvInitialiseTaskLists+0x68>)
 800391c:	f7ff fafc 	bl	8002f18 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003920:	480c      	ldr	r0, [pc, #48]	@ (8003954 <prvInitialiseTaskLists+0x6c>)
 8003922:	f7ff faf9 	bl	8002f18 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003926:	480c      	ldr	r0, [pc, #48]	@ (8003958 <prvInitialiseTaskLists+0x70>)
 8003928:	f7ff faf6 	bl	8002f18 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800392c:	480b      	ldr	r0, [pc, #44]	@ (800395c <prvInitialiseTaskLists+0x74>)
 800392e:	f7ff faf3 	bl	8002f18 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003932:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <prvInitialiseTaskLists+0x78>)
 8003934:	4a05      	ldr	r2, [pc, #20]	@ (800394c <prvInitialiseTaskLists+0x64>)
 8003936:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003938:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <prvInitialiseTaskLists+0x7c>)
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <prvInitialiseTaskLists+0x68>)
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000128 	.word	0x20000128
 800394c:	2000018c 	.word	0x2000018c
 8003950:	200001a0 	.word	0x200001a0
 8003954:	200001bc 	.word	0x200001bc
 8003958:	200001d0 	.word	0x200001d0
 800395c:	200001e8 	.word	0x200001e8
 8003960:	200001b4 	.word	0x200001b4
 8003964:	200001b8 	.word	0x200001b8

08003968 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800396e:	e019      	b.n	80039a4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003970:	f000 fa04 	bl	8003d7c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <prvCheckTasksWaitingTermination+0x50>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fb1a 	bl	8002fba <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <prvCheckTasksWaitingTermination+0x54>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3b01      	subs	r3, #1
 800398c:	4a0b      	ldr	r2, [pc, #44]	@ (80039bc <prvCheckTasksWaitingTermination+0x54>)
 800398e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3b01      	subs	r3, #1
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 8003998:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800399a:	f000 fa21 	bl	8003de0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f810 	bl	80039c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a4:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <prvCheckTasksWaitingTermination+0x58>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e1      	bne.n	8003970 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200001d0 	.word	0x200001d0
 80039bc:	200001fc 	.word	0x200001fc
 80039c0:	200001e4 	.word	0x200001e4

080039c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fbe7 	bl	80041a4 <vPortFree>
                vPortFree( pxTCB );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fbe4 	bl	80041a4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <prvResetNextTaskUnblockTime+0x30>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d104      	bne.n	80039fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <prvResetNextTaskUnblockTime+0x34>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039fa:	e005      	b.n	8003a08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039fc:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <prvResetNextTaskUnblockTime+0x30>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <prvResetNextTaskUnblockTime+0x34>)
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	200001b4 	.word	0x200001b4
 8003a18:	2000021c 	.word	0x2000021c

08003a1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3b04      	subs	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b04      	subs	r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <pxPortInitialiseStack+0x64>)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3b14      	subs	r3, #20
 8003a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f06f 0202 	mvn.w	r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3b20      	subs	r3, #32
 8003a70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	08003a85 	.word	0x08003a85

08003a84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003a8e:	4b13      	ldr	r3, [pc, #76]	@ (8003adc <prvTaskExitError+0x58>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a96:	d00b      	beq.n	8003ab0 <prvTaskExitError+0x2c>
        __asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60fb      	str	r3, [r7, #12]
    }
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <prvTaskExitError+0x28>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60bb      	str	r3, [r7, #8]
    }
 8003ac2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ac4:	bf00      	nop
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0fc      	beq.n	8003ac6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000010 	.word	0x20000010

08003ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ae0:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <pxCurrentTCBConst2>)
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	6808      	ldr	r0, [r1, #0]
 8003ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aea:	f380 8809 	msr	PSP, r0
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f380 8811 	msr	BASEPRI, r0
 8003afa:	4770      	bx	lr
 8003afc:	f3af 8000 	nop.w

08003b00 <pxCurrentTCBConst2>:
 8003b00:	20000124 	.word	0x20000124
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop

08003b08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b08:	4808      	ldr	r0, [pc, #32]	@ (8003b2c <prvPortStartFirstTask+0x24>)
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	6800      	ldr	r0, [r0, #0]
 8003b0e:	f380 8808 	msr	MSP, r0
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f380 8814 	msr	CONTROL, r0
 8003b1a:	b662      	cpsie	i
 8003b1c:	b661      	cpsie	f
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	df00      	svc	0
 8003b28:	bf00      	nop
 8003b2a:	0000      	.short	0x0000
 8003b2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop

08003b34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b3a:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <xPortStartScheduler+0x124>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a47      	ldr	r2, [pc, #284]	@ (8003c5c <xPortStartScheduler+0x128>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10b      	bne.n	8003b5c <xPortStartScheduler+0x28>
        __asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	613b      	str	r3, [r7, #16]
    }
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <xPortStartScheduler+0x124>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3f      	ldr	r2, [pc, #252]	@ (8003c60 <xPortStartScheduler+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10b      	bne.n	8003b7e <xPortStartScheduler+0x4a>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60fb      	str	r3, [r7, #12]
    }
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	e7fd      	b.n	8003b7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b7e:	4b39      	ldr	r3, [pc, #228]	@ (8003c64 <xPortStartScheduler+0x130>)
 8003b80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	22ff      	movs	r2, #255	@ 0xff
 8003b8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <xPortStartScheduler+0x134>)
 8003ba4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ba6:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bac:	e009      	b.n	8003bc2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003bae:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d0ef      	beq.n	8003bae <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bce:	4b27      	ldr	r3, [pc, #156]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00b      	beq.n	8003bf2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
    }
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	e7fd      	b.n	8003bee <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bfa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c04:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <xPortStartScheduler+0x138>)
 8003c06:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c10:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <xPortStartScheduler+0x13c>)
 8003c22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c28:	f000 f968 	bl	8003efc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <xPortStartScheduler+0x140>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c32:	f000 f987 	bl	8003f44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <xPortStartScheduler+0x144>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c78 <xPortStartScheduler+0x144>)
 8003c3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c40:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c42:	f7ff ff61 	bl	8003b08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c46:	f7ff fdcd 	bl	80037e4 <vTaskSwitchContext>
    prvTaskExitError();
 8003c4a:	f7ff ff1b 	bl	8003a84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed00 	.word	0xe000ed00
 8003c5c:	410fc271 	.word	0x410fc271
 8003c60:	410fc270 	.word	0x410fc270
 8003c64:	e000e400 	.word	0xe000e400
 8003c68:	20000228 	.word	0x20000228
 8003c6c:	2000022c 	.word	0x2000022c
 8003c70:	e000ed20 	.word	0xe000ed20
 8003c74:	20000010 	.word	0x20000010
 8003c78:	e000ef34 	.word	0xe000ef34

08003c7c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c82:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <vInitPrioGroupValue+0xe8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a38      	ldr	r2, [pc, #224]	@ (8003d68 <vInitPrioGroupValue+0xec>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10b      	bne.n	8003ca4 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	613b      	str	r3, [r7, #16]
    }
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d64 <vInitPrioGroupValue+0xe8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	@ (8003d6c <vInitPrioGroupValue+0xf0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10b      	bne.n	8003cc6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60fb      	str	r3, [r7, #12]
    }
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	e7fd      	b.n	8003cc2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d70 <vInitPrioGroupValue+0xf4>)
 8003cc8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	22ff      	movs	r2, #255	@ 0xff
 8003cd6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <vInitPrioGroupValue+0xf8>)
 8003cec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf4:	e009      	b.n	8003d0a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003cfe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d12:	2b80      	cmp	r3, #128	@ 0x80
 8003d14:	d0ef      	beq.n	8003cf6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1c3 0307 	rsb	r3, r3, #7
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d00b      	beq.n	8003d3a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60bb      	str	r3, [r7, #8]
    }
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	4a0d      	ldr	r2, [pc, #52]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d42:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <vInitPrioGroupValue+0xfc>)
 8003d4e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	410fc271 	.word	0x410fc271
 8003d6c:	410fc270 	.word	0x410fc270
 8003d70:	e000e400 	.word	0xe000e400
 8003d74:	20000228 	.word	0x20000228
 8003d78:	2000022c 	.word	0x2000022c

08003d7c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
        __asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	607b      	str	r3, [r7, #4]
    }
 8003d94:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <vPortEnterCritical+0x5c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd8 <vPortEnterCritical+0x5c>)
 8003d9e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <vPortEnterCritical+0x5c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d110      	bne.n	8003dca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <vPortEnterCritical+0x60>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <vPortEnterCritical+0x4e>
        __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	603b      	str	r3, [r7, #0]
    }
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <vPortEnterCritical+0x4a>
    }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000010 	.word	0x20000010
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003de6:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <vPortExitCritical+0x50>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <vPortExitCritical+0x26>
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
    }
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e06:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <vPortExitCritical+0x50>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <vPortExitCritical+0x50>)
 8003e0e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e10:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <vPortExitCritical+0x50>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <vPortExitCritical+0x44>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e22:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	20000010 	.word	0x20000010
	...

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f01e 0f10 	tst.w	lr, #16
 8003e50:	bf08      	it	eq
 8003e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e64:	f380 8811 	msr	BASEPRI, r0
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f7ff fcb8 	bl	80037e4 <vTaskSwitchContext>
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f380 8811 	msr	BASEPRI, r0
 8003e7c:	bc09      	pop	{r0, r3}
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e86:	f01e 0f10 	tst.w	lr, #16
 8003e8a:	bf08      	it	eq
 8003e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e90:	f380 8809 	msr	PSP, r0
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w

08003ea0 <pxCurrentTCBConst>:
 8003ea0:	20000124 	.word	0x20000124
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
        __asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	607b      	str	r3, [r7, #4]
    }
 8003ec0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003ec2:	f002 fb3d 	bl	8006540 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ec6:	f7ff fbcf 	bl	8003668 <xTaskIncrementTick>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003ed0:	f002 fb94 	bl	80065fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <SysTick_Handler+0x50>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e001      	b.n	8003ee2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003ede:	f002 fb71 	bl	80065c4 <SEGGER_SYSVIEW_RecordExitISR>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f383 8811 	msr	BASEPRI, r3
    }
 8003eec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <vPortSetupTimerInterrupt+0x34>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <vPortSetupTimerInterrupt+0x38>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <vPortSetupTimerInterrupt+0x3c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <vPortSetupTimerInterrupt+0x40>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <vPortSetupTimerInterrupt+0x44>)
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f1e:	4b04      	ldr	r3, [pc, #16]	@ (8003f30 <vPortSetupTimerInterrupt+0x34>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e010 	.word	0xe000e010
 8003f34:	e000e018 	.word	0xe000e018
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	10624dd3 	.word	0x10624dd3
 8003f40:	e000e014 	.word	0xe000e014

08003f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f54 <vPortEnableVFP+0x10>
 8003f48:	6801      	ldr	r1, [r0, #0]
 8003f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f4e:	6001      	str	r1, [r0, #0]
 8003f50:	4770      	bx	lr
 8003f52:	0000      	.short	0x0000
 8003f54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop

08003f5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003f62:	f3ef 8305 	mrs	r3, IPSR
 8003f66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d915      	bls.n	8003f9a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f6e:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <vPortValidateInterruptPriority+0x74>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f78:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <vPortValidateInterruptPriority+0x78>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	7afa      	ldrb	r2, [r7, #11]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20b      	bcs.n	8003f9a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	607b      	str	r3, [r7, #4]
    }
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <vPortValidateInterruptPriority+0x7c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <vPortValidateInterruptPriority+0x80>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90b      	bls.n	8003fc2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	603b      	str	r3, [r7, #0]
    }
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	e7fd      	b.n	8003fbe <vPortValidateInterruptPriority+0x62>
    }
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e3f0 	.word	0xe000e3f0
 8003fd4:	20000228 	.word	0x20000228
 8003fd8:	e000ed0c 	.word	0xe000ed0c
 8003fdc:	2000022c 	.word	0x2000022c

08003fe0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	@ 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003fec:	f7ff fa7a 	bl	80034e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ff0:	4b66      	ldr	r3, [pc, #408]	@ (800418c <pvPortMalloc+0x1ac>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ff8:	f000 f938 	bl	800426c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ffc:	4b64      	ldr	r3, [pc, #400]	@ (8004190 <pvPortMalloc+0x1b0>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 80a9 	bne.w	800415c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02e      	beq.n	800406e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004010:	2208      	movs	r2, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d228      	bcs.n	800406e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800401c:	2208      	movs	r2, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b00      	cmp	r3, #0
 800402c:	d022      	beq.n	8004074 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f023 0307 	bic.w	r3, r3, #7
 8004034:	3308      	adds	r3, #8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d215      	bcs.n	8004068 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	3308      	adds	r3, #8
 8004044:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <pvPortMalloc+0x94>
        __asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	617b      	str	r3, [r7, #20]
    }
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	e7fd      	b.n	8004064 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800406c:	e002      	b.n	8004074 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	e000      	b.n	8004076 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004074:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d06f      	beq.n	800415c <pvPortMalloc+0x17c>
 800407c:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <pvPortMalloc+0x1b4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d86a      	bhi.n	800415c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004086:	4b44      	ldr	r3, [pc, #272]	@ (8004198 <pvPortMalloc+0x1b8>)
 8004088:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800408a:	4b43      	ldr	r3, [pc, #268]	@ (8004198 <pvPortMalloc+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004090:	e004      	b.n	800409c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d903      	bls.n	80040ae <pvPortMalloc+0xce>
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040ae:	4b37      	ldr	r3, [pc, #220]	@ (800418c <pvPortMalloc+0x1ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d051      	beq.n	800415c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2208      	movs	r2, #8
 80040be:	4413      	add	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	2308      	movs	r3, #8
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d920      	bls.n	800411c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <pvPortMalloc+0x124>
        __asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	613b      	str	r3, [r7, #16]
    }
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004116:	69b8      	ldr	r0, [r7, #24]
 8004118:	f000 f90a 	bl	8004330 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800411c:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <pvPortMalloc+0x1b4>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	4a1b      	ldr	r2, [pc, #108]	@ (8004194 <pvPortMalloc+0x1b4>)
 8004128:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800412a:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <pvPortMalloc+0x1b4>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <pvPortMalloc+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d203      	bcs.n	800413e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004136:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <pvPortMalloc+0x1b4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a18      	ldr	r2, [pc, #96]	@ (800419c <pvPortMalloc+0x1bc>)
 800413c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <pvPortMalloc+0x1b0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	431a      	orrs	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004152:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <pvPortMalloc+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <pvPortMalloc+0x1c0>)
 800415a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800415c:	f7ff f9d0 	bl	8003500 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <pvPortMalloc+0x1a2>
        __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60fb      	str	r3, [r7, #12]
    }
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <pvPortMalloc+0x19e>
    return pvReturn;
 8004182:	69fb      	ldr	r3, [r7, #28]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3728      	adds	r7, #40	@ 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20019238 	.word	0x20019238
 8004190:	2001924c 	.word	0x2001924c
 8004194:	2001923c 	.word	0x2001923c
 8004198:	20019230 	.word	0x20019230
 800419c:	20019240 	.word	0x20019240
 80041a0:	20019244 	.word	0x20019244

080041a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d04f      	beq.n	8004256 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041b6:	2308      	movs	r3, #8
 80041b8:	425b      	negs	r3, r3
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <vPortFree+0xbc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <vPortFree+0x46>
        __asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	60fb      	str	r3, [r7, #12]
    }
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <vPortFree+0x66>
        __asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
    }
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4b14      	ldr	r3, [pc, #80]	@ (8004260 <vPortFree+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01e      	beq.n	8004256 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11a      	bne.n	8004256 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <vPortFree+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	43db      	mvns	r3, r3
 800422a:	401a      	ands	r2, r3
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004230:	f7ff f958 	bl	80034e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <vPortFree+0xc0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4413      	add	r3, r2
 800423e:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <vPortFree+0xc0>)
 8004240:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004242:	6938      	ldr	r0, [r7, #16]
 8004244:	f000 f874 	bl	8004330 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004248:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <vPortFree+0xc4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a06      	ldr	r2, [pc, #24]	@ (8004268 <vPortFree+0xc4>)
 8004250:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004252:	f7ff f955 	bl	8003500 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	2001924c 	.word	0x2001924c
 8004264:	2001923c 	.word	0x2001923c
 8004268:	20019248 	.word	0x20019248

0800426c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004272:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8004276:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004278:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <prvHeapInit+0xac>)
 800427a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3307      	adds	r3, #7
 800428a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0307 	bic.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	4a1f      	ldr	r2, [pc, #124]	@ (8004318 <prvHeapInit+0xac>)
 800429c:	4413      	add	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <prvHeapInit+0xb0>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	@ (800431c <prvHeapInit+0xb0>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	4413      	add	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042b8:	2208      	movs	r2, #8
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0307 	bic.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a15      	ldr	r2, [pc, #84]	@ (8004320 <prvHeapInit+0xb4>)
 80042cc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80042ce:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <prvHeapInit+0xb4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80042d6:	4b12      	ldr	r3, [pc, #72]	@ (8004320 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	1ad2      	subs	r2, r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004320 <prvHeapInit+0xb4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <prvHeapInit+0xb8>)
 80042fa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <prvHeapInit+0xbc>)
 8004302:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <prvHeapInit+0xc0>)
 8004306:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	20000230 	.word	0x20000230
 800431c:	20019230 	.word	0x20019230
 8004320:	20019238 	.word	0x20019238
 8004324:	20019240 	.word	0x20019240
 8004328:	2001923c 	.word	0x2001923c
 800432c:	2001924c 	.word	0x2001924c

08004330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <prvInsertBlockIntoFreeList+0xac>)
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e002      	b.n	8004344 <prvInsertBlockIntoFreeList+0x14>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d8f7      	bhi.n	800433e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d108      	bne.n	8004372 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	441a      	add	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d118      	bne.n	80043b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <prvInsertBlockIntoFreeList+0xb0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d00d      	beq.n	80043ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e008      	b.n	80043c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043ae:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <prvInsertBlockIntoFreeList+0xb0>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e003      	b.n	80043c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d002      	beq.n	80043ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20019230 	.word	0x20019230
 80043e0:	20019238 	.word	0x20019238

080043e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80043e8:	4803      	ldr	r0, [pc, #12]	@ (80043f8 <_cbSendSystemDesc+0x14>)
 80043ea:	f002 f853 	bl	8006494 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80043ee:	4803      	ldr	r0, [pc, #12]	@ (80043fc <_cbSendSystemDesc+0x18>)
 80043f0:	f002 f850 	bl	8006494 <SEGGER_SYSVIEW_SendSysDesc>
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08006c74 	.word	0x08006c74
 80043fc:	08006cb8 	.word	0x08006cb8

08004400 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <SEGGER_SYSVIEW_Conf+0x20>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <SEGGER_SYSVIEW_Conf+0x20>)
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <SEGGER_SYSVIEW_Conf+0x24>)
 800440e:	4a06      	ldr	r2, [pc, #24]	@ (8004428 <SEGGER_SYSVIEW_Conf+0x28>)
 8004410:	f001 fcc4 	bl	8005d9c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004414:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004418:	f001 fd04 	bl	8005e24 <SEGGER_SYSVIEW_SetRAMBase>
}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000000 	.word	0x20000000
 8004424:	080043e5 	.word	0x080043e5
 8004428:	08006d58 	.word	0x08006d58

0800442c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b085      	sub	sp, #20
 8004430:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	e033      	b.n	80044a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004438:	491e      	ldr	r1, [pc, #120]	@ (80044b4 <_cbSendTaskList+0x88>)
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	491a      	ldr	r1, [pc, #104]	@ (80044b4 <_cbSendTaskList+0x88>)
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3304      	adds	r3, #4
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	4c16      	ldr	r4, [pc, #88]	@ (80044b4 <_cbSendTaskList+0x88>)
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4423      	add	r3, r4
 8004468:	3308      	adds	r3, #8
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	4d11      	ldr	r5, [pc, #68]	@ (80044b4 <_cbSendTaskList+0x88>)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	442b      	add	r3, r5
 800447a:	330c      	adds	r3, #12
 800447c:	681d      	ldr	r5, [r3, #0]
 800447e:	4e0d      	ldr	r6, [pc, #52]	@ (80044b4 <_cbSendTaskList+0x88>)
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4433      	add	r3, r6
 800448c:	3310      	adds	r3, #16
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	462b      	mov	r3, r5
 8004494:	4622      	mov	r2, r4
 8004496:	f000 f979 	bl	800478c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <_cbSendTaskList+0x8c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d3c6      	bcc.n	8004438 <_cbSendTaskList+0xc>
  }
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b4:	20019250 	.word	0x20019250
 80044b8:	200192f0 	.word	0x200192f0

080044bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80044c4:	f7ff f8be 	bl	8003644 <xTaskGetTickCountFromISR>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2200      	movs	r2, #0
 80044cc:	469a      	mov	sl, r3
 80044ce:	4693      	mov	fp, r2
 80044d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80044d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	f04f 0a00 	mov.w	sl, #0
 80044e0:	f04f 0b00 	mov.w	fp, #0
 80044e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80044e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80044ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80044f0:	4652      	mov	r2, sl
 80044f2:	465b      	mov	r3, fp
 80044f4:	1a14      	subs	r4, r2, r0
 80044f6:	eb63 0501 	sbc.w	r5, r3, r1
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	00ab      	lsls	r3, r5, #2
 8004504:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004508:	00a2      	lsls	r2, r4, #2
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	eb14 0800 	adds.w	r8, r4, r0
 8004512:	eb45 0901 	adc.w	r9, r5, r1
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452a:	4690      	mov	r8, r2
 800452c:	4699      	mov	r9, r3
 800452e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004532:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004544 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004552:	2205      	movs	r2, #5
 8004554:	492b      	ldr	r1, [pc, #172]	@ (8004604 <SYSVIEW_AddTask+0xc0>)
 8004556:	68b8      	ldr	r0, [r7, #8]
 8004558:	f002 fad8 	bl	8006b0c <memcmp>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04b      	beq.n	80045fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004562:	4b29      	ldr	r3, [pc, #164]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b07      	cmp	r3, #7
 8004568:	d903      	bls.n	8004572 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800456a:	4828      	ldr	r0, [pc, #160]	@ (800460c <SYSVIEW_AddTask+0xc8>)
 800456c:	f002 fa44 	bl	80069f8 <SEGGER_SYSVIEW_Warn>
    return;
 8004570:	e044      	b.n	80045fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004572:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4926      	ldr	r1, [pc, #152]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004586:	4b20      	ldr	r3, [pc, #128]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4921      	ldr	r1, [pc, #132]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3304      	adds	r3, #4
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800459c:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	491b      	ldr	r1, [pc, #108]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3308      	adds	r3, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045b2:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4916      	ldr	r1, [pc, #88]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	330c      	adds	r3, #12
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4910      	ldr	r1, [pc, #64]	@ (8004610 <SYSVIEW_AddTask+0xcc>)
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3310      	adds	r3, #16
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80045de:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a08      	ldr	r2, [pc, #32]	@ (8004608 <SYSVIEW_AddTask+0xc4>)
 80045e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f8ca 	bl	800478c <SYSVIEW_SendTaskInfo>
 80045f8:	e000      	b.n	80045fc <SYSVIEW_AddTask+0xb8>
    return;
 80045fa:	bf00      	nop

}
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	08006cc8 	.word	0x08006cc8
 8004608:	200192f0 	.word	0x200192f0
 800460c:	08006cd0 	.word	0x08006cd0
 8004610:	20019250 	.word	0x20019250

08004614 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800461c:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80ab 	beq.w	800477c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e00d      	b.n	8004648 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800462c:	4956      	ldr	r1, [pc, #344]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d008      	beq.n	8004654 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3301      	adds	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	4b4e      	ldr	r3, [pc, #312]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	429a      	cmp	r2, r3
 8004650:	d3ec      	bcc.n	800462c <SYSVIEW_DeleteTask+0x18>
 8004652:	e000      	b.n	8004656 <SYSVIEW_DeleteTask+0x42>
      break;
 8004654:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004656:	4b4b      	ldr	r3, [pc, #300]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3b01      	subs	r3, #1
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	429a      	cmp	r2, r3
 8004660:	d111      	bne.n	8004686 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 800466e:	4413      	add	r3, r2
 8004670:	2214      	movs	r2, #20
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f002 fa59 	bl	8006b2c <memset>
    _NumTasks--;
 800467a:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	4a40      	ldr	r2, [pc, #256]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e07b      	b.n	800477e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004686:	4b3f      	ldr	r3, [pc, #252]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	429a      	cmp	r2, r3
 800468e:	d276      	bcs.n	800477e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004690:	4b3c      	ldr	r3, [pc, #240]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1e5a      	subs	r2, r3, #1
 8004696:	493c      	ldr	r1, [pc, #240]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	4838      	ldr	r0, [pc, #224]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4403      	add	r3, r0
 80046b2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80046b4:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4933      	ldr	r1, [pc, #204]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3304      	adds	r3, #4
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	482f      	ldr	r0, [pc, #188]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4403      	add	r3, r0
 80046d8:	3304      	adds	r3, #4
 80046da:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80046dc:	4b29      	ldr	r3, [pc, #164]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1e5a      	subs	r2, r3, #1
 80046e2:	4929      	ldr	r1, [pc, #164]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3308      	adds	r3, #8
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	4825      	ldr	r0, [pc, #148]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4403      	add	r3, r0
 8004700:	3308      	adds	r3, #8
 8004702:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004704:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	491f      	ldr	r1, [pc, #124]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	330c      	adds	r3, #12
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	481b      	ldr	r0, [pc, #108]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4403      	add	r3, r0
 8004728:	330c      	adds	r3, #12
 800472a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800472c:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	4915      	ldr	r1, [pc, #84]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	3310      	adds	r3, #16
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	4811      	ldr	r0, [pc, #68]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4403      	add	r3, r0
 8004750:	3310      	adds	r3, #16
 8004752:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <SYSVIEW_DeleteTask+0x174>)
 8004764:	4413      	add	r3, r2
 8004766:	2214      	movs	r2, #20
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f002 f9de 	bl	8006b2c <memset>
    _NumTasks--;
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	4a03      	ldr	r2, [pc, #12]	@ (8004784 <SYSVIEW_DeleteTask+0x170>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e000      	b.n	800477e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800477c:	bf00      	nop
  }
}
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200192f0 	.word	0x200192f0
 8004788:	20019250 	.word	0x20019250

0800478c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	@ 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800479a:	f107 0314 	add.w	r3, r7, #20
 800479e:	2214      	movs	r2, #20
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 f9c2 	bl	8006b2c <memset>
  TaskInfo.TaskID     = TaskID;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4618      	mov	r0, r3
 80047c2:	f001 fd6f 	bl	80062a4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80047c6:	bf00      	nop
 80047c8:	3728      	adds	r7, #40	@ 0x28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <__NVIC_EnableIRQ>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	db0b      	blt.n	80047fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	f003 021f 	and.w	r2, r3, #31
 80047e8:	4907      	ldr	r1, [pc, #28]	@ (8004808 <__NVIC_EnableIRQ+0x38>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2001      	movs	r0, #1
 80047f2:	fa00 f202 	lsl.w	r2, r0, r2
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000e100 	.word	0xe000e100

0800480c <__NVIC_SetPriority>:
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db0a      	blt.n	8004836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	490c      	ldr	r1, [pc, #48]	@ (8004858 <__NVIC_SetPriority+0x4c>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	440b      	add	r3, r1
 8004830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004834:	e00a      	b.n	800484c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4908      	ldr	r1, [pc, #32]	@ (800485c <__NVIC_SetPriority+0x50>)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3b04      	subs	r3, #4
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	440b      	add	r3, r1
 800484a:	761a      	strb	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004866:	f002 f923 	bl	8006ab0 <SEGGER_SYSVIEW_IsStarted>
 800486a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004872:	f001 fb9b 	bl	8005fac <SEGGER_SYSVIEW_Start>
  }
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800488a:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <_cbOnUARTRx+0x3c>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d806      	bhi.n	80048a0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <_cbOnUARTRx+0x3c>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	3301      	adds	r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b08      	ldr	r3, [pc, #32]	@ (80048bc <_cbOnUARTRx+0x3c>)
 800489c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800489e:	e009      	b.n	80048b4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80048a0:	f7ff ffde 	bl	8004860 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <_cbOnUARTRx+0x3c>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	1dfb      	adds	r3, r7, #7
 80048ac:	2201      	movs	r2, #1
 80048ae:	4619      	mov	r1, r3
 80048b0:	f000 fb9a 	bl	8004fe8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80048b4:	bf00      	nop
}
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000014 	.word	0x20000014

080048c0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80048c8:	4b14      	ldr	r3, [pc, #80]	@ (800491c <_cbOnUARTTx+0x5c>)
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d80f      	bhi.n	80048f0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80048d0:	4b12      	ldr	r3, [pc, #72]	@ (800491c <_cbOnUARTTx+0x5c>)
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <_cbOnUARTTx+0x60>)
 80048d8:	5c9a      	ldrb	r2, [r3, r2]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80048de:	4b0f      	ldr	r3, [pc, #60]	@ (800491c <_cbOnUARTTx+0x5c>)
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	3301      	adds	r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <_cbOnUARTTx+0x5c>)
 80048e8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80048ea:	2301      	movs	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
    goto Done;
 80048ee:	e00f      	b.n	8004910 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80048f0:	4b0a      	ldr	r3, [pc, #40]	@ (800491c <_cbOnUARTTx+0x5c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fa19 	bl	8004d30 <SEGGER_RTT_ReadUpBufferNoLock>
 80048fe:	4603      	mov	r3, r0
 8004900:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	da02      	bge.n	800490e <_cbOnUARTTx+0x4e>
    r = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e000      	b.n	8004910 <_cbOnUARTTx+0x50>
  }
Done:
 800490e:	bf00      	nop
  return r;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000014 	.word	0x20000014
 8004920:	08006d60 	.word	0x08006d60

08004924 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800492c:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <SEGGER_UART_init+0x1c>)
 800492e:	4905      	ldr	r1, [pc, #20]	@ (8004944 <SEGGER_UART_init+0x20>)
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f863 	bl	80049fc <HIF_UART_Init>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	08004881 	.word	0x08004881
 8004944:	080048c1 	.word	0x080048c1

08004948 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800494e:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <USART2_IRQHandler+0x80>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d011      	beq.n	8004982 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800495e:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <USART2_IRQHandler+0x84>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 030b 	and.w	r3, r3, #11
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <USART2_IRQHandler+0x88>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004978:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <USART2_IRQHandler+0x88>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	79fa      	ldrb	r2, [r7, #7]
 800497e:	4610      	mov	r0, r2
 8004980:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01a      	beq.n	80049c2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800498c:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <USART2_IRQHandler+0x8c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004994:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <USART2_IRQHandler+0x8c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1dfa      	adds	r2, r7, #7
 800499a:	4610      	mov	r0, r2
 800499c:	4798      	blx	r3
 800499e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80049a6:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <USART2_IRQHandler+0x90>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0b      	ldr	r2, [pc, #44]	@ (80049d8 <USART2_IRQHandler+0x90>)
 80049ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e006      	b.n	80049c2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <USART2_IRQHandler+0x80>)
 80049b6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80049b8:	79fa      	ldrb	r2, [r7, #7]
 80049ba:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <USART2_IRQHandler+0x84>)
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e000      	b.n	80049c2 <USART2_IRQHandler+0x7a>
      return;
 80049c0:	bf00      	nop
    }
  }
}
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40004400 	.word	0x40004400
 80049cc:	40004404 	.word	0x40004404
 80049d0:	200192f4 	.word	0x200192f4
 80049d4:	200192f8 	.word	0x200192f8
 80049d8:	4000440c 	.word	0x4000440c

080049dc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80049e0:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a04      	ldr	r2, [pc, #16]	@ (80049f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80049e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	4000440c 	.word	0x4000440c

080049fc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004a08:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <HIF_UART_Init+0xc8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac4 <HIF_UART_Init+0xc8>)
 8004a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a12:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004a14:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac8 <HIF_UART_Init+0xcc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac8 <HIF_UART_Init+0xcc>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004a20:	4b2a      	ldr	r3, [pc, #168]	@ (8004acc <HIF_UART_Init+0xd0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a2c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004a34:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004a36:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <HIF_UART_Init+0xd0>)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HIF_UART_Init+0xd4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a48:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004a50:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <HIF_UART_Init+0xd4>)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004a58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <HIF_UART_Init+0xd8>)
 8004a5a:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004a5e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004a60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <HIF_UART_Init+0xdc>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004a66:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HIF_UART_Init+0xe0>)
 8004a68:	2280      	movs	r2, #128	@ 0x80
 8004a6a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004a72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae0 <HIF_UART_Init+0xe4>)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8a:	d302      	bcc.n	8004a92 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004a8c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004a90:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <HIF_UART_Init+0xe8>)
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004aa2:	4a11      	ldr	r2, [pc, #68]	@ (8004ae8 <HIF_UART_Init+0xec>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004aa8:	4a10      	ldr	r2, [pc, #64]	@ (8004aec <HIF_UART_Init+0xf0>)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004aae:	2106      	movs	r1, #6
 8004ab0:	2026      	movs	r0, #38	@ 0x26
 8004ab2:	f7ff feab 	bl	800480c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004ab6:	2026      	movs	r0, #38	@ 0x26
 8004ab8:	f7ff fe8a 	bl	80047d0 <__NVIC_EnableIRQ>
}
 8004abc:	bf00      	nop
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023840 	.word	0x40023840
 8004ac8:	40023830 	.word	0x40023830
 8004acc:	40020020 	.word	0x40020020
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	4000440c 	.word	0x4000440c
 8004ad8:	40004410 	.word	0x40004410
 8004adc:	40004414 	.word	0x40004414
 8004ae0:	0501bd00 	.word	0x0501bd00
 8004ae4:	40004408 	.word	0x40004408
 8004ae8:	200192f4 	.word	0x200192f4
 8004aec:	200192f8 	.word	0x200192f8

08004af0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004af6:	4b24      	ldr	r3, [pc, #144]	@ (8004b88 <_DoInit+0x98>)
 8004af8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2203      	movs	r2, #3
 8004afe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2203      	movs	r2, #3
 8004b04:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a20      	ldr	r2, [pc, #128]	@ (8004b8c <_DoInit+0x9c>)
 8004b0a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a20      	ldr	r2, [pc, #128]	@ (8004b90 <_DoInit+0xa0>)
 8004b10:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b18:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <_DoInit+0x9c>)
 8004b30:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a17      	ldr	r2, [pc, #92]	@ (8004b94 <_DoInit+0xa4>)
 8004b36:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3307      	adds	r3, #7
 8004b54:	4a10      	ldr	r2, [pc, #64]	@ (8004b98 <_DoInit+0xa8>)
 8004b56:	6810      	ldr	r0, [r2, #0]
 8004b58:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b5a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a0e      	ldr	r2, [pc, #56]	@ (8004b9c <_DoInit+0xac>)
 8004b62:	6810      	ldr	r0, [r2, #0]
 8004b64:	6018      	str	r0, [r3, #0]
 8004b66:	8891      	ldrh	r1, [r2, #4]
 8004b68:	7992      	ldrb	r2, [r2, #6]
 8004b6a:	8099      	strh	r1, [r3, #4]
 8004b6c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b6e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004b78:	f3bf 8f5f 	dmb	sy
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	200192fc 	.word	0x200192fc
 8004b8c:	08006d20 	.word	0x08006d20
 8004b90:	200193a4 	.word	0x200193a4
 8004b94:	200197a4 	.word	0x200197a4
 8004b98:	08006d2c 	.word	0x08006d2c
 8004b9c:	08006d30 	.word	0x08006d30

08004ba0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	@ 0x28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004bac:	2300      	movs	r3, #0
 8004bae:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d905      	bls.n	8004bd0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	e007      	b.n	8004be0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	1acb      	subs	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bea:	4293      	cmp	r3, r2
 8004bec:	bf28      	it	cs
 8004bee:	4613      	movcs	r3, r2
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bf28      	it	cs
 8004bfa:	4613      	movcs	r3, r2
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6978      	ldr	r0, [r7, #20]
 8004c0e:	f001 ffb9 	bl	8006b84 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	4413      	add	r3, r2
 8004c18:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	4413      	add	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	4413      	add	r3, r2
 8004c30:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d101      	bne.n	8004c40 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1b2      	bne.n	8004bb6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004c50:	6a3b      	ldr	r3, [r7, #32]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3728      	adds	r7, #40	@ 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b088      	sub	sp, #32
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d911      	bls.n	8004ca2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	6938      	ldr	r0, [r7, #16]
 8004c8e:	f001 ff79 	bl	8006b84 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c92:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004ca0:	e01f      	b.n	8004ce2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	6938      	ldr	r0, [r7, #16]
 8004cb6:	f001 ff65 	bl	8006b84 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6938      	ldr	r0, [r7, #16]
 8004cd4:	f001 ff56 	bl	8006b84 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	60da      	str	r2, [r3, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004cea:	b480      	push	{r7}
 8004cec:	b087      	sub	sp, #28
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d808      	bhi.n	8004d18 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad2      	subs	r2, r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	3b01      	subs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e004      	b.n	8004d22 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d22:	697b      	ldr	r3, [r7, #20]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08c      	sub	sp, #48	@ 0x30
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e38 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004d4a:	f7ff fed1 	bl	8004af0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4a37      	ldr	r2, [pc, #220]	@ (8004e38 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d70:	2300      	movs	r3, #0
 8004d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d92b      	bls.n	8004dd4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	bf28      	it	cs
 8004d8e:	4613      	movcs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	4413      	add	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	6939      	ldr	r1, [r7, #16]
 8004da0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004da2:	f001 feef 	bl	8006b84 <memcpy>
    NumBytesRead += NumBytesRem;
 8004da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d101      	bne.n	8004dd4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bf28      	it	cs
 8004de4:	4613      	movcs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	4413      	add	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dfe:	f001 fec1 	bl	8006b84 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	4413      	add	r3, r2
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	4413      	add	r3, r2
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e2c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3730      	adds	r7, #48	@ 0x30
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	200192fc 	.word	0x200192fc

08004e3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	@ 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e48:	4b3e      	ldr	r3, [pc, #248]	@ (8004f44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e56:	f7ff fe4b 	bl	8004af0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	3360      	adds	r3, #96	@ 0x60
 8004e66:	4a37      	ldr	r2, [pc, #220]	@ (8004f44 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d92b      	bls.n	8004ee0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf28      	it	cs
 8004e9a:	4613      	movcs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	4413      	add	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	6939      	ldr	r1, [r7, #16]
 8004eac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004eae:	f001 fe69 	bl	8006b84 <memcpy>
    NumBytesRead += NumBytesRem;
 8004eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d101      	bne.n	8004ee0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bf28      	it	cs
 8004ef0:	4613      	movcs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	4413      	add	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f0a:	f001 fe3b 	bl	8006b84 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4413      	add	r3, r2
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3730      	adds	r7, #48	@ 0x30
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200192fc 	.word	0x200192fc

08004f48 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	3360      	adds	r3, #96	@ 0x60
 8004f64:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d029      	beq.n	8004fc6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d82e      	bhi.n	8004fd4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d013      	beq.n	8004fa6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004f7e:	e029      	b.n	8004fd4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004f80:	6978      	ldr	r0, [r7, #20]
 8004f82:	f7ff feb2 	bl	8004cea <_GetAvailWriteSpace>
 8004f86:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d202      	bcs.n	8004f96 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004f94:	e021      	b.n	8004fda <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f7ff fe5b 	bl	8004c5a <_WriteNoCheck>
    break;
 8004fa4:	e019      	b.n	8004fda <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fa6:	6978      	ldr	r0, [r7, #20]
 8004fa8:	f7ff fe9f 	bl	8004cea <_GetAvailWriteSpace>
 8004fac:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	bf28      	it	cs
 8004fb6:	4613      	movcs	r3, r2
 8004fb8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	f7ff fe4b 	bl	8004c5a <_WriteNoCheck>
    break;
 8004fc4:	e009      	b.n	8004fda <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	6978      	ldr	r0, [r7, #20]
 8004fcc:	f7ff fde8 	bl	8004ba0 <_WriteBlocking>
 8004fd0:	61f8      	str	r0, [r7, #28]
    break;
 8004fd2:	e002      	b.n	8004fda <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
    break;
 8004fd8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200192fc 	.word	0x200192fc

08004fe8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005002:	f7ff fd75 	bl	8004af0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005006:	f3ef 8311 	mrs	r3, BASEPRI
 800500a:	f04f 0120 	mov.w	r1, #32
 800500e:	f381 8811 	msr	BASEPRI, r1
 8005012:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff ff95 	bl	8004f48 <SEGGER_RTT_WriteDownBufferNoLock>
 800501e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005026:	697b      	ldr	r3, [r7, #20]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	200192fc 	.word	0x200192fc

08005034 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005042:	4b3d      	ldr	r3, [pc, #244]	@ (8005138 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005050:	f7ff fd4e 	bl	8004af0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005054:	f3ef 8311 	mrs	r3, BASEPRI
 8005058:	f04f 0120 	mov.w	r1, #32
 800505c:	f381 8811 	msr	BASEPRI, r1
 8005060:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005062:	4b35      	ldr	r3, [pc, #212]	@ (8005138 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005064:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	3304      	adds	r3, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	429a      	cmp	r2, r3
 8005090:	dbeb      	blt.n	800506a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005092:	e000      	b.n	8005096 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005094:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	429a      	cmp	r2, r3
 800509e:	da3f      	bge.n	8005120 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3304      	adds	r3, #4
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80050ca:	6939      	ldr	r1, [r7, #16]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	4613      	mov	r3, r2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	3320      	adds	r3, #32
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80050de:	6939      	ldr	r1, [r7, #16]
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3328      	adds	r3, #40	@ 0x28
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80050f2:	6939      	ldr	r1, [r7, #16]
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3324      	adds	r3, #36	@ 0x24
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005106:	6939      	ldr	r1, [r7, #16]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	332c      	adds	r3, #44	@ 0x2c
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800511a:	f3bf 8f5f 	dmb	sy
 800511e:	e002      	b.n	8005126 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005124:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200192fc 	.word	0x200192fc

0800513c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800514a:	4b33      	ldr	r3, [pc, #204]	@ (8005218 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005158:	f7ff fcca 	bl	8004af0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800515c:	4b2e      	ldr	r3, [pc, #184]	@ (8005218 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800515e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4293      	cmp	r3, r2
 800516a:	d24d      	bcs.n	8005208 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800516c:	f3ef 8311 	mrs	r3, BASEPRI
 8005170:	f04f 0120 	mov.w	r1, #32
 8005174:	f381 8811 	msr	BASEPRI, r1
 8005178:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d031      	beq.n	80051e4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	440b      	add	r3, r1
 800518e:	3360      	adds	r3, #96	@ 0x60
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005194:	6979      	ldr	r1, [r7, #20]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	440b      	add	r3, r1
 80051a2:	3364      	adds	r3, #100	@ 0x64
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80051a8:	6979      	ldr	r1, [r7, #20]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	4413      	add	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	440b      	add	r3, r1
 80051b6:	3368      	adds	r3, #104	@ 0x68
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80051bc:	6979      	ldr	r1, [r7, #20]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	3370      	adds	r3, #112	@ 0x70
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80051d0:	6979      	ldr	r1, [r7, #20]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	4613      	mov	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	440b      	add	r3, r1
 80051de:	336c      	adds	r3, #108	@ 0x6c
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80051e4:	6979      	ldr	r1, [r7, #20]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	440b      	add	r3, r1
 80051f2:	3374      	adds	r3, #116	@ 0x74
 80051f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051f6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e002      	b.n	800520e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800520c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800520e:	69fb      	ldr	r3, [r7, #28]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200192fc 	.word	0x200192fc

0800521c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800522c:	e002      	b.n	8005234 <_EncodeStr+0x18>
    Len++;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	3301      	adds	r3, #1
 8005232:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f6      	bne.n	800522e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d901      	bls.n	800524c <_EncodeStr+0x30>
    Len = Limit;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005250:	d806      	bhi.n	8005260 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	60fa      	str	r2, [r7, #12]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e011      	b.n	8005284 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	22ff      	movs	r2, #255	@ 0xff
 8005268:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	60fa      	str	r2, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	0a19      	lsrs	r1, r3, #8
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	60fa      	str	r2, [r7, #12]
 8005280:	b2ca      	uxtb	r2, r1
 8005282:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005288:	e00a      	b.n	80052a0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	1c53      	adds	r3, r2, #1
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1c59      	adds	r1, r3, #1
 8005294:	60f9      	str	r1, [r7, #12]
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	701a      	strb	r2, [r3, #0]
    n++;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	3301      	adds	r3, #1
 800529e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d3f0      	bcc.n	800528a <_EncodeStr+0x6e>
  }
  return pPayload;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052d6:	4b35      	ldr	r3, [pc, #212]	@ (80053ac <_HandleIncomingPacket+0xdc>)
 80052d8:	7e1b      	ldrb	r3, [r3, #24]
 80052da:	4618      	mov	r0, r3
 80052dc:	1cfb      	adds	r3, r7, #3
 80052de:	2201      	movs	r2, #1
 80052e0:	4619      	mov	r1, r3
 80052e2:	f7ff fdab 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
 80052e6:	4603      	mov	r3, r0
 80052e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dd59      	ble.n	80053a4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	2b80      	cmp	r3, #128	@ 0x80
 80052f4:	d032      	beq.n	800535c <_HandleIncomingPacket+0x8c>
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	dc42      	bgt.n	8005380 <_HandleIncomingPacket+0xb0>
 80052fa:	2b07      	cmp	r3, #7
 80052fc:	dc16      	bgt.n	800532c <_HandleIncomingPacket+0x5c>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	dd3e      	ble.n	8005380 <_HandleIncomingPacket+0xb0>
 8005302:	3b01      	subs	r3, #1
 8005304:	2b06      	cmp	r3, #6
 8005306:	d83b      	bhi.n	8005380 <_HandleIncomingPacket+0xb0>
 8005308:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <_HandleIncomingPacket+0x40>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005333 	.word	0x08005333
 8005314:	08005339 	.word	0x08005339
 8005318:	0800533f 	.word	0x0800533f
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534b 	.word	0x0800534b
 8005324:	08005351 	.word	0x08005351
 8005328:	08005357 	.word	0x08005357
 800532c:	2b7f      	cmp	r3, #127	@ 0x7f
 800532e:	d034      	beq.n	800539a <_HandleIncomingPacket+0xca>
 8005330:	e026      	b.n	8005380 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005332:	f000 fe3b 	bl	8005fac <SEGGER_SYSVIEW_Start>
      break;
 8005336:	e035      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005338:	f000 fef4 	bl	8006124 <SEGGER_SYSVIEW_Stop>
      break;
 800533c:	e032      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800533e:	f001 f8cd 	bl	80064dc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005342:	e02f      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005344:	f001 f892 	bl	800646c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005348:	e02c      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800534a:	f000 ff11 	bl	8006170 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800534e:	e029      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005350:	f001 fb00 	bl	8006954 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005354:	e026      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005356:	f001 fadf 	bl	8006918 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800535a:	e023      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800535c:	4b13      	ldr	r3, [pc, #76]	@ (80053ac <_HandleIncomingPacket+0xdc>)
 800535e:	7e1b      	ldrb	r3, [r3, #24]
 8005360:	4618      	mov	r0, r3
 8005362:	1cfb      	adds	r3, r7, #3
 8005364:	2201      	movs	r2, #1
 8005366:	4619      	mov	r1, r3
 8005368:	f7ff fd68 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
 800536c:	4603      	mov	r3, r0
 800536e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd13      	ble.n	800539e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fa4d 	bl	8006818 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800537e:	e00e      	b.n	800539e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	b25b      	sxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	da0c      	bge.n	80053a2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005388:	4b08      	ldr	r3, [pc, #32]	@ (80053ac <_HandleIncomingPacket+0xdc>)
 800538a:	7e1b      	ldrb	r3, [r3, #24]
 800538c:	4618      	mov	r0, r3
 800538e:	1cfb      	adds	r3, r7, #3
 8005390:	2201      	movs	r2, #1
 8005392:	4619      	mov	r1, r3
 8005394:	f7ff fd52 	bl	8004e3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005398:	e003      	b.n	80053a2 <_HandleIncomingPacket+0xd2>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <_HandleIncomingPacket+0xd4>
      break;
 80053a2:	bf00      	nop
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	2001a7bc 	.word	0x2001a7bc

080053b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	@ 0x30
 80053b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053b6:	2301      	movs	r3, #1
 80053b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053c4:	4b32      	ldr	r3, [pc, #200]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ca:	e00b      	b.n	80053e4 <_TrySendOverflowPacket+0x34>
 80053cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80053d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e8:	d8f0      	bhi.n	80053cc <_TrySendOverflowPacket+0x1c>
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053fa:	4b26      	ldr	r3, [pc, #152]	@ (8005494 <_TrySendOverflowPacket+0xe4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005400:	4b23      	ldr	r3, [pc, #140]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	623b      	str	r3, [r7, #32]
 8005412:	e00b      	b.n	800542c <_TrySendOverflowPacket+0x7c>
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	6279      	str	r1, [r7, #36]	@ 0x24
 800541e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	09db      	lsrs	r3, r3, #7
 800542a:	623b      	str	r3, [r7, #32]
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005430:	d8f0      	bhi.n	8005414 <_TrySendOverflowPacket+0x64>
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	627a      	str	r2, [r7, #36]	@ 0x24
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	4618      	mov	r0, r3
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	461a      	mov	r2, r3
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	4619      	mov	r1, r3
 8005454:	f7fa febc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005458:	4603      	mov	r3, r0
 800545a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800545c:	f7ff fabe 	bl	80049dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005466:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800546c:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	3b01      	subs	r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e004      	b.n	8005484 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800547a:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	3301      	adds	r3, #1
 8005480:	4a03      	ldr	r2, [pc, #12]	@ (8005490 <_TrySendOverflowPacket+0xe0>)
 8005482:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005484:	693b      	ldr	r3, [r7, #16]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3730      	adds	r7, #48	@ 0x30
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	2001a7bc 	.word	0x2001a7bc
 8005494:	e0001004 	.word	0xe0001004

08005498 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	@ 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054a4:	4b6d      	ldr	r3, [pc, #436]	@ (800565c <_SendPacket+0x1c4>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d010      	beq.n	80054ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054ac:	4b6b      	ldr	r3, [pc, #428]	@ (800565c <_SendPacket+0x1c4>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80a5 	beq.w	8005600 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054b6:	4b69      	ldr	r3, [pc, #420]	@ (800565c <_SendPacket+0x1c4>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d109      	bne.n	80054d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054be:	f7ff ff77 	bl	80053b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054c2:	4b66      	ldr	r3, [pc, #408]	@ (800565c <_SendPacket+0x1c4>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	f040 809c 	bne.w	8005604 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80054cc:	e001      	b.n	80054d2 <_SendPacket+0x3a>
    goto Send;
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <_SendPacket+0x3c>
Send:
 80054d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b1f      	cmp	r3, #31
 80054d8:	d809      	bhi.n	80054ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80054da:	4b60      	ldr	r3, [pc, #384]	@ (800565c <_SendPacket+0x1c4>)
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	fa22 f303 	lsr.w	r3, r2, r3
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 808d 	bne.w	8005608 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b17      	cmp	r3, #23
 80054f2:	d807      	bhi.n	8005504 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e03d      	b.n	8005580 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005510:	d912      	bls.n	8005538 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	09da      	lsrs	r2, r3, #7
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3b01      	subs	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	3a01      	subs	r2, #1
 800552a:	60fa      	str	r2, [r7, #12]
 800552c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e006      	b.n	8005546 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3b01      	subs	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b7f      	cmp	r3, #127	@ 0x7f
 800554a:	d912      	bls.n	8005572 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	09da      	lsrs	r2, r3, #7
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b01      	subs	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	3a01      	subs	r2, #1
 8005564:	60fa      	str	r2, [r7, #12]
 8005566:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e006      	b.n	8005580 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3b01      	subs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005580:	4b37      	ldr	r3, [pc, #220]	@ (8005660 <_SendPacket+0x1c8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005586:	4b35      	ldr	r3, [pc, #212]	@ (800565c <_SendPacket+0x1c4>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	e00b      	b.n	80055b2 <_SendPacket+0x11a>
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	b2da      	uxtb	r2, r3
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1c59      	adds	r1, r3, #1
 80055a2:	6279      	str	r1, [r7, #36]	@ 0x24
 80055a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	09db      	lsrs	r3, r3, #7
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055b6:	d8f0      	bhi.n	800559a <_SendPacket+0x102>
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80055be:	6a3a      	ldr	r2, [r7, #32]
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80055c8:	4b24      	ldr	r3, [pc, #144]	@ (800565c <_SendPacket+0x1c4>)
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	4618      	mov	r0, r3
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	f7fa fdfa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055dc:	4603      	mov	r3, r0
 80055de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80055e0:	f7ff f9fc 	bl	80049dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055ea:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <_SendPacket+0x1c4>)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	60d3      	str	r3, [r2, #12]
 80055f0:	e00b      	b.n	800560a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80055f2:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <_SendPacket+0x1c4>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	3301      	adds	r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4b18      	ldr	r3, [pc, #96]	@ (800565c <_SendPacket+0x1c4>)
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e004      	b.n	800560a <_SendPacket+0x172>
    goto SendDone;
 8005600:	bf00      	nop
 8005602:	e002      	b.n	800560a <_SendPacket+0x172>
      goto SendDone;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <_SendPacket+0x172>
      goto SendDone;
 8005608:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800560a:	4b14      	ldr	r3, [pc, #80]	@ (800565c <_SendPacket+0x1c4>)
 800560c:	7e1b      	ldrb	r3, [r3, #24]
 800560e:	4619      	mov	r1, r3
 8005610:	4a14      	ldr	r2, [pc, #80]	@ (8005664 <_SendPacket+0x1cc>)
 8005612:	460b      	mov	r3, r1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	440b      	add	r3, r1
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4413      	add	r3, r2
 800561c:	336c      	adds	r3, #108	@ 0x6c
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <_SendPacket+0x1c4>)
 8005622:	7e1b      	ldrb	r3, [r3, #24]
 8005624:	4618      	mov	r0, r3
 8005626:	490f      	ldr	r1, [pc, #60]	@ (8005664 <_SendPacket+0x1cc>)
 8005628:	4603      	mov	r3, r0
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4403      	add	r3, r0
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	3370      	adds	r3, #112	@ 0x70
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d00b      	beq.n	8005652 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800563a:	4b08      	ldr	r3, [pc, #32]	@ (800565c <_SendPacket+0x1c4>)
 800563c:	789b      	ldrb	r3, [r3, #2]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005642:	4b06      	ldr	r3, [pc, #24]	@ (800565c <_SendPacket+0x1c4>)
 8005644:	2201      	movs	r2, #1
 8005646:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005648:	f7ff fe42 	bl	80052d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <_SendPacket+0x1c4>)
 800564e:	2200      	movs	r2, #0
 8005650:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005652:	bf00      	nop
 8005654:	3728      	adds	r7, #40	@ 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	2001a7bc 	.word	0x2001a7bc
 8005660:	e0001004 	.word	0xe0001004
 8005664:	200192fc 	.word	0x200192fc

08005668 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3301      	adds	r3, #1
 800567e:	2b80      	cmp	r3, #128	@ 0x80
 8005680:	d80a      	bhi.n	8005698 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	1c59      	adds	r1, r3, #1
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6051      	str	r1, [r2, #4]
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b80      	cmp	r3, #128	@ 0x80
 800569e:	d15a      	bne.n	8005756 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	623b      	str	r3, [r7, #32]
 80056c0:	e00b      	b.n	80056da <_StoreChar+0x72>
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	1c59      	adds	r1, r3, #1
 80056ca:	6279      	str	r1, [r7, #36]	@ 0x24
 80056cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	09db      	lsrs	r3, r3, #7
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80056de:	d8f0      	bhi.n	80056c2 <_StoreChar+0x5a>
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80056e6:	6a3a      	ldr	r2, [r7, #32]
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e00b      	b.n	8005712 <_StoreChar+0xaa>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	61f9      	str	r1, [r7, #28]
 8005704:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	09db      	lsrs	r3, r3, #7
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b7f      	cmp	r3, #127	@ 0x7f
 8005716:	d8f0      	bhi.n	80056fa <_StoreChar+0x92>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	61fa      	str	r2, [r7, #28]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	221a      	movs	r2, #26
 800572e:	6939      	ldr	r1, [r7, #16]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff feb1 	bl	8005498 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fdbb 	bl	80052b6 <_PreparePacket>
 8005740:	4602      	mov	r2, r0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	611a      	str	r2, [r3, #16]
  }
}
 8005756:	bf00      	nop
 8005758:	3728      	adds	r7, #40	@ 0x28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	@ 0x28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005772:	2301      	movs	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005776:	2301      	movs	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800577a:	e007      	b.n	800578c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	623b      	str	r3, [r7, #32]
    Width++;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3301      	adds	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800578c:	6a3a      	ldr	r2, [r7, #32]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d2f3      	bcs.n	800577c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	429a      	cmp	r2, r3
 800579a:	d901      	bls.n	80057a0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80057a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d000      	beq.n	80057ac <_PrintUnsigned+0x4c>
 80057aa:	e01f      	b.n	80057ec <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01c      	beq.n	80057ec <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <_PrintUnsigned+0x68>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <_PrintUnsigned+0x68>
        c = '0';
 80057c2:	2330      	movs	r3, #48	@ 0x30
 80057c4:	76fb      	strb	r3, [r7, #27]
 80057c6:	e001      	b.n	80057cc <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80057c8:	2320      	movs	r3, #32
 80057ca:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057cc:	e007      	b.n	80057de <_PrintUnsigned+0x7e>
        FieldWidth--;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	3b01      	subs	r3, #1
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80057d4:	7efb      	ldrb	r3, [r7, #27]
 80057d6:	4619      	mov	r1, r3
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff ff45 	bl	8005668 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <_PrintUnsigned+0x8c>
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d3f0      	bcc.n	80057ce <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d903      	bls.n	80057fa <_PrintUnsigned+0x9a>
      NumDigits--;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	e009      	b.n	800580e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d200      	bcs.n	800580e <_PrintUnsigned+0xae>
        break;
 800580c:	e005      	b.n	800581a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005818:	e7e8      	b.n	80057ec <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	fb02 f303 	mul.w	r3, r2, r3
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005832:	4a15      	ldr	r2, [pc, #84]	@ (8005888 <_PrintUnsigned+0x128>)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff13 	bl	8005668 <_StoreChar>
    Digit /= Base;
 8005842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e3      	bne.n	800581a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d011      	beq.n	8005880 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00e      	beq.n	8005880 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005862:	e006      	b.n	8005872 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	3b01      	subs	r3, #1
 8005868:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800586a:	2120      	movs	r1, #32
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fefb 	bl	8005668 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <_PrintUnsigned+0x120>
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	429a      	cmp	r2, r3
 800587e:	d3f1      	bcc.n	8005864 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005880:	bf00      	nop
 8005882:	3728      	adds	r7, #40	@ 0x28
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	08006d70 	.word	0x08006d70

0800588c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	bfb8      	it	lt
 80058a0:	425b      	neglt	r3, r3
 80058a2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058a8:	e007      	b.n	80058ba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80058b2:	613b      	str	r3, [r7, #16]
    Width++;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	daf3      	bge.n	80058aa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d901      	bls.n	80058ce <_PrintInt+0x42>
    Width = NumDigits;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <_PrintInt+0x5e>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	db04      	blt.n	80058e4 <_PrintInt+0x58>
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <_PrintInt+0x5e>
    FieldWidth--;
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <_PrintInt+0x6e>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d016      	beq.n	8005928 <_PrintInt+0x9c>
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d111      	bne.n	8005928 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00e      	beq.n	8005928 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800590a:	e006      	b.n	800591a <_PrintInt+0x8e>
        FieldWidth--;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	3b01      	subs	r3, #1
 8005910:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005912:	2120      	movs	r1, #32
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff fea7 	bl	8005668 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <_PrintInt+0x9c>
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	429a      	cmp	r2, r3
 8005926:	d3f1      	bcc.n	800590c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	da07      	bge.n	800593e <_PrintInt+0xb2>
    v = -v;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	425b      	negs	r3, r3
 8005932:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005934:	212d      	movs	r1, #45	@ 0x2d
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff fe96 	bl	8005668 <_StoreChar>
 800593c:	e008      	b.n	8005950 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005948:	212b      	movs	r1, #43	@ 0x2b
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff fe8c 	bl	8005668 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d019      	beq.n	800598e <_PrintInt+0x102>
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d114      	bne.n	800598e <_PrintInt+0x102>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d111      	bne.n	800598e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005970:	e006      	b.n	8005980 <_PrintInt+0xf4>
        FieldWidth--;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3b01      	subs	r3, #1
 8005976:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005978:	2130      	movs	r1, #48	@ 0x30
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fe74 	bl	8005668 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <_PrintInt+0x102>
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	429a      	cmp	r2, r3
 800598c:	d3f1      	bcc.n	8005972 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff fedf 	bl	8005760 <_PrintUnsigned>
}
 80059a2:	bf00      	nop
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b098      	sub	sp, #96	@ 0x60
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059b8:	f3ef 8311 	mrs	r3, BASEPRI
 80059bc:	f04f 0120 	mov.w	r1, #32
 80059c0:	f381 8811 	msr	BASEPRI, r1
 80059c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059c6:	48b7      	ldr	r0, [pc, #732]	@ (8005ca4 <_VPrintTarget+0x2f8>)
 80059c8:	f7ff fc75 	bl	80052b6 <_PreparePacket>
 80059cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80059ce:	4bb5      	ldr	r3, [pc, #724]	@ (8005ca4 <_VPrintTarget+0x2f8>)
 80059d0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3301      	adds	r3, #1
 80059de:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80059f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8183 	beq.w	8005d02 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80059fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a00:	2b25      	cmp	r3, #37	@ 0x25
 8005a02:	f040 8170 	bne.w	8005ce6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005a06:	2300      	movs	r3, #0
 8005a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005a16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a1a:	3b23      	subs	r3, #35	@ 0x23
 8005a1c:	2b0d      	cmp	r3, #13
 8005a1e:	d83f      	bhi.n	8005aa0 <_VPrintTarget+0xf4>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <_VPrintTarget+0x7c>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a91 	.word	0x08005a91
 8005a2c:	08005aa1 	.word	0x08005aa1
 8005a30:	08005aa1 	.word	0x08005aa1
 8005a34:	08005aa1 	.word	0x08005aa1
 8005a38:	08005aa1 	.word	0x08005aa1
 8005a3c:	08005aa1 	.word	0x08005aa1
 8005a40:	08005aa1 	.word	0x08005aa1
 8005a44:	08005aa1 	.word	0x08005aa1
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005a71 	.word	0x08005a71
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e01a      	b.n	8005aa6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a72:	f043 0302 	orr.w	r3, r3, #2
 8005a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e012      	b.n	8005aa6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e00a      	b.n	8005aa6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a92:	f043 0308 	orr.w	r3, r3, #8
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e002      	b.n	8005aa6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aa4:	bf00      	nop
        }
      } while (v);
 8005aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1b0      	bne.n	8005a0e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005aac:	2300      	movs	r3, #0
 8005aae:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005abc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005abe:	d912      	bls.n	8005ae6 <_VPrintTarget+0x13a>
 8005ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ac4:	2b39      	cmp	r3, #57	@ 0x39
 8005ac6:	d80e      	bhi.n	8005ae6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ade:	4413      	add	r3, r2
 8005ae0:	3b30      	subs	r3, #48	@ 0x30
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005ae4:	e7e4      	b.n	8005ab0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005af2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005af8:	d11d      	bne.n	8005b36 <_VPrintTarget+0x18a>
        sFormat++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005b08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b0e:	d912      	bls.n	8005b36 <_VPrintTarget+0x18a>
 8005b10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b14:	2b39      	cmp	r3, #57	@ 0x39
 8005b16:	d80e      	bhi.n	8005b36 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b2e:	4413      	add	r3, r2
 8005b30:	3b30      	subs	r3, #48	@ 0x30
 8005b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005b34:	e7e4      	b.n	8005b00 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b42:	2b6c      	cmp	r3, #108	@ 0x6c
 8005b44:	d003      	beq.n	8005b4e <_VPrintTarget+0x1a2>
 8005b46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b4a:	2b68      	cmp	r3, #104	@ 0x68
 8005b4c:	d107      	bne.n	8005b5e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b5c:	e7ef      	b.n	8005b3e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b62:	2b25      	cmp	r3, #37	@ 0x25
 8005b64:	f000 80b3 	beq.w	8005cce <_VPrintTarget+0x322>
 8005b68:	2b25      	cmp	r3, #37	@ 0x25
 8005b6a:	f2c0 80b7 	blt.w	8005cdc <_VPrintTarget+0x330>
 8005b6e:	2b78      	cmp	r3, #120	@ 0x78
 8005b70:	f300 80b4 	bgt.w	8005cdc <_VPrintTarget+0x330>
 8005b74:	2b58      	cmp	r3, #88	@ 0x58
 8005b76:	f2c0 80b1 	blt.w	8005cdc <_VPrintTarget+0x330>
 8005b7a:	3b58      	subs	r3, #88	@ 0x58
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f200 80ad 	bhi.w	8005cdc <_VPrintTarget+0x330>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <_VPrintTarget+0x1dc>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005c7f 	.word	0x08005c7f
 8005b8c:	08005cdd 	.word	0x08005cdd
 8005b90:	08005cdd 	.word	0x08005cdd
 8005b94:	08005cdd 	.word	0x08005cdd
 8005b98:	08005cdd 	.word	0x08005cdd
 8005b9c:	08005cdd 	.word	0x08005cdd
 8005ba0:	08005cdd 	.word	0x08005cdd
 8005ba4:	08005cdd 	.word	0x08005cdd
 8005ba8:	08005cdd 	.word	0x08005cdd
 8005bac:	08005cdd 	.word	0x08005cdd
 8005bb0:	08005cdd 	.word	0x08005cdd
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c33 	.word	0x08005c33
 8005bbc:	08005cdd 	.word	0x08005cdd
 8005bc0:	08005cdd 	.word	0x08005cdd
 8005bc4:	08005cdd 	.word	0x08005cdd
 8005bc8:	08005cdd 	.word	0x08005cdd
 8005bcc:	08005cdd 	.word	0x08005cdd
 8005bd0:	08005cdd 	.word	0x08005cdd
 8005bd4:	08005cdd 	.word	0x08005cdd
 8005bd8:	08005cdd 	.word	0x08005cdd
 8005bdc:	08005cdd 	.word	0x08005cdd
 8005be0:	08005cdd 	.word	0x08005cdd
 8005be4:	08005cdd 	.word	0x08005cdd
 8005be8:	08005ca9 	.word	0x08005ca9
 8005bec:	08005cdd 	.word	0x08005cdd
 8005bf0:	08005cdd 	.word	0x08005cdd
 8005bf4:	08005cdd 	.word	0x08005cdd
 8005bf8:	08005cdd 	.word	0x08005cdd
 8005bfc:	08005c59 	.word	0x08005c59
 8005c00:	08005cdd 	.word	0x08005cdd
 8005c04:	08005cdd 	.word	0x08005cdd
 8005c08:	08005c7f 	.word	0x08005c7f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1d19      	adds	r1, r3, #4
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6011      	str	r1, [r2, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005c20:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005c24:	f107 0314 	add.w	r3, r7, #20
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fd1c 	bl	8005668 <_StoreChar>
        break;
 8005c30:	e055      	b.n	8005cde <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	1d19      	adds	r1, r3, #4
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6011      	str	r1, [r2, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c40:	f107 0014 	add.w	r0, r7, #20
 8005c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c4e:	220a      	movs	r2, #10
 8005c50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c52:	f7ff fe1b 	bl	800588c <_PrintInt>
        break;
 8005c56:	e042      	b.n	8005cde <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	1d19      	adds	r1, r3, #4
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6011      	str	r1, [r2, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c68:	f107 0014 	add.w	r0, r7, #20
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c76:	220a      	movs	r2, #10
 8005c78:	f7ff fd72 	bl	8005760 <_PrintUnsigned>
        break;
 8005c7c:	e02f      	b.n	8005cde <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1d19      	adds	r1, r3, #4
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6011      	str	r1, [r2, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005c8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c8e:	f107 0014 	add.w	r0, r7, #20
 8005c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c9c:	2210      	movs	r2, #16
 8005c9e:	f7ff fd5f 	bl	8005760 <_PrintUnsigned>
        break;
 8005ca2:	e01c      	b.n	8005cde <_VPrintTarget+0x332>
 8005ca4:	2001a7ec 	.word	0x2001a7ec
      case 'p':
        v = va_arg(*pParamList, int);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	1d19      	adds	r1, r3, #4
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005cb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cb8:	f107 0014 	add.w	r0, r7, #20
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	f7ff fd4a 	bl	8005760 <_PrintUnsigned>
        break;
 8005ccc:	e007      	b.n	8005cde <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005cce:	f107 0314 	add.w	r3, r7, #20
 8005cd2:	2125      	movs	r1, #37	@ 0x25
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fcc7 	bl	8005668 <_StoreChar>
        break;
 8005cda:	e000      	b.n	8005cde <_VPrintTarget+0x332>
      default:
        break;
 8005cdc:	bf00      	nop
      }
      sFormat++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e007      	b.n	8005cf6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ce6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fcb9 	bl	8005668 <_StoreChar>
    }
  } while (*sFormat);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f47f ae72 	bne.w	80059e4 <_VPrintTarget+0x38>
 8005d00:	e000      	b.n	8005d04 <_VPrintTarget+0x358>
      break;
 8005d02:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d041      	beq.n	8005d8e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d1a:	e00b      	b.n	8005d34 <_VPrintTarget+0x388>
 8005d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	6439      	str	r1, [r7, #64]	@ 0x40
 8005d26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d38:	d8f0      	bhi.n	8005d1c <_VPrintTarget+0x370>
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d48:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d4e:	2300      	movs	r3, #0
 8005d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d52:	e00b      	b.n	8005d6c <_VPrintTarget+0x3c0>
 8005d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <_VPrintTarget+0x3a8>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d80:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	221a      	movs	r2, #26
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fb85 	bl	8005498 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005d94:	bf00      	nop
 8005d96:	3758      	adds	r7, #88	@ 0x58
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005daa:	2300      	movs	r3, #0
 8005dac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005db0:	4917      	ldr	r1, [pc, #92]	@ (8005e10 <SEGGER_SYSVIEW_Init+0x74>)
 8005db2:	4818      	ldr	r0, [pc, #96]	@ (8005e14 <SEGGER_SYSVIEW_Init+0x78>)
 8005db4:	f7ff f93e 	bl	8005034 <SEGGER_RTT_AllocUpBuffer>
 8005db8:	4603      	mov	r3, r0
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	4b16      	ldr	r3, [pc, #88]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dbe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005dc0:	4b15      	ldr	r3, [pc, #84]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dc2:	785a      	ldrb	r2, [r3, #1]
 8005dc4:	4b14      	ldr	r3, [pc, #80]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dc6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005dc8:	4b13      	ldr	r3, [pc, #76]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dca:	7e1b      	ldrb	r3, [r3, #24]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	2300      	movs	r3, #0
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	4a11      	ldr	r2, [pc, #68]	@ (8005e1c <SEGGER_SYSVIEW_Init+0x80>)
 8005dd6:	490f      	ldr	r1, [pc, #60]	@ (8005e14 <SEGGER_SYSVIEW_Init+0x78>)
 8005dd8:	f7ff f9b0 	bl	800513c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005de2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e20 <SEGGER_SYSVIEW_Init+0x84>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005de8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005dea:	4a0b      	ldr	r2, [pc, #44]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005df0:	4a09      	ldr	r2, [pc, #36]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005df6:	4a08      	ldr	r2, [pc, #32]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005dfc:	4a06      	ldr	r2, [pc, #24]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e02:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200197b4 	.word	0x200197b4
 8005e14:	08006d38 	.word	0x08006d38
 8005e18:	2001a7bc 	.word	0x2001a7bc
 8005e1c:	2001a7b4 	.word	0x2001a7b4
 8005e20:	e0001004 	.word	0xe0001004

08005e24 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e2c:	4a04      	ldr	r2, [pc, #16]	@ (8005e40 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6113      	str	r3, [r2, #16]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	2001a7bc 	.word	0x2001a7bc

08005e44 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e50:	f04f 0120 	mov.w	r1, #32
 8005e54:	f381 8811 	msr	BASEPRI, r1
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	4808      	ldr	r0, [pc, #32]	@ (8005e7c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005e5c:	f7ff fa2b 	bl	80052b6 <_PreparePacket>
 8005e60:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68b8      	ldr	r0, [r7, #8]
 8005e68:	f7ff fb16 	bl	8005498 <_SendPacket>
  RECORD_END();
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f383 8811 	msr	BASEPRI, r3
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2001a7ec 	.word	0x2001a7ec

08005e80 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e8e:	f04f 0120 	mov.w	r1, #32
 8005e92:	f381 8811 	msr	BASEPRI, r1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	4816      	ldr	r0, [pc, #88]	@ (8005ef4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005e9a:	f7ff fa0c 	bl	80052b6 <_PreparePacket>
 8005e9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e00b      	b.n	8005ec6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	61f9      	str	r1, [r7, #28]
 8005eb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	09db      	lsrs	r3, r3, #7
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eca:	d8f0      	bhi.n	8005eae <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	61fa      	str	r2, [r7, #28]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	6938      	ldr	r0, [r7, #16]
 8005ee2:	f7ff fad9 	bl	8005498 <_SendPacket>
  RECORD_END();
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f383 8811 	msr	BASEPRI, r3
}
 8005eec:	bf00      	nop
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	2001a7ec 	.word	0x2001a7ec

08005ef8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08c      	sub	sp, #48	@ 0x30
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f04:	f3ef 8311 	mrs	r3, BASEPRI
 8005f08:	f04f 0120 	mov.w	r1, #32
 8005f0c:	f381 8811 	msr	BASEPRI, r1
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	4825      	ldr	r0, [pc, #148]	@ (8005fa8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f14:	f7ff f9cf 	bl	80052b6 <_PreparePacket>
 8005f18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f26:	e00b      	b.n	8005f40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2e:	1c59      	adds	r1, r3, #1
 8005f30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	09db      	lsrs	r3, r3, #7
 8005f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f44:	d8f0      	bhi.n	8005f28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	623b      	str	r3, [r7, #32]
 8005f5e:	e00b      	b.n	8005f78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	1c59      	adds	r1, r3, #1
 8005f68:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	09db      	lsrs	r3, r3, #7
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f7c:	d8f0      	bhi.n	8005f60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f84:	6a3a      	ldr	r2, [r7, #32]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6979      	ldr	r1, [r7, #20]
 8005f92:	69b8      	ldr	r0, [r7, #24]
 8005f94:	f7ff fa80 	bl	8005498 <_SendPacket>
  RECORD_END();
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f383 8811 	msr	BASEPRI, r3
}
 8005f9e:	bf00      	nop
 8005fa0:	3730      	adds	r7, #48	@ 0x30
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	2001a7ec 	.word	0x2001a7ec

08005fac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	@ 0x30
 8005fb0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005fb2:	4b59      	ldr	r3, [pc, #356]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fbc:	f04f 0120 	mov.w	r1, #32
 8005fc0:	f381 8811 	msr	BASEPRI, r1
 8005fc4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005fc6:	4b54      	ldr	r3, [pc, #336]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	220a      	movs	r2, #10
 8005fcc:	4953      	ldr	r1, [pc, #332]	@ (800611c <SEGGER_SYSVIEW_Start+0x170>)
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fa f8fe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005fda:	f7fe fcff 	bl	80049dc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fde:	200a      	movs	r0, #10
 8005fe0:	f7ff ff30 	bl	8005e44 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe8:	f04f 0120 	mov.w	r1, #32
 8005fec:	f381 8811 	msr	BASEPRI, r1
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	484b      	ldr	r0, [pc, #300]	@ (8006120 <SEGGER_SYSVIEW_Start+0x174>)
 8005ff4:	f7ff f95f 	bl	80052b6 <_PreparePacket>
 8005ff8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006002:	4b45      	ldr	r3, [pc, #276]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006008:	e00b      	b.n	8006022 <SEGGER_SYSVIEW_Start+0x76>
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	b2da      	uxtb	r2, r3
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	1c59      	adds	r1, r3, #1
 8006012:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006014:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	09db      	lsrs	r3, r3, #7
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	2b7f      	cmp	r3, #127	@ 0x7f
 8006026:	d8f0      	bhi.n	800600a <SEGGER_SYSVIEW_Start+0x5e>
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800602e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
 800603c:	4b36      	ldr	r3, [pc, #216]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	e00b      	b.n	800605c <SEGGER_SYSVIEW_Start+0xb0>
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	6279      	str	r1, [r7, #36]	@ 0x24
 800604e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	09db      	lsrs	r3, r3, #7
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006060:	d8f0      	bhi.n	8006044 <SEGGER_SYSVIEW_Start+0x98>
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	627a      	str	r2, [r7, #36]	@ 0x24
 8006068:	6a3a      	ldr	r2, [r7, #32]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	4b28      	ldr	r3, [pc, #160]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	e00b      	b.n	8006096 <SEGGER_SYSVIEW_Start+0xea>
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	1c59      	adds	r1, r3, #1
 8006086:	61f9      	str	r1, [r7, #28]
 8006088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	09db      	lsrs	r3, r3, #7
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b7f      	cmp	r3, #127	@ 0x7f
 800609a:	d8f0      	bhi.n	800607e <SEGGER_SYSVIEW_Start+0xd2>
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	61fa      	str	r2, [r7, #28]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	e00b      	b.n	80060ce <SEGGER_SYSVIEW_Start+0x122>
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	1c59      	adds	r1, r3, #1
 80060be:	6179      	str	r1, [r7, #20]
 80060c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	09db      	lsrs	r3, r3, #7
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80060d2:	d8f0      	bhi.n	80060b6 <SEGGER_SYSVIEW_Start+0x10a>
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	617a      	str	r2, [r7, #20]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060e4:	2218      	movs	r2, #24
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff f9d5 	bl	8005498 <_SendPacket>
      RECORD_END();
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060f4:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <SEGGER_SYSVIEW_Start+0x16c>)
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006102:	f000 f9eb 	bl	80064dc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006106:	f000 f9b1 	bl	800646c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800610a:	f000 fc23 	bl	8006954 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800610e:	bf00      	nop
 8006110:	3730      	adds	r7, #48	@ 0x30
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	2001a7bc 	.word	0x2001a7bc
 800611c:	08006d64 	.word	0x08006d64
 8006120:	2001a7ec 	.word	0x2001a7ec

08006124 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800612a:	f3ef 8311 	mrs	r3, BASEPRI
 800612e:	f04f 0120 	mov.w	r1, #32
 8006132:	f381 8811 	msr	BASEPRI, r1
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	480b      	ldr	r0, [pc, #44]	@ (8006168 <SEGGER_SYSVIEW_Stop+0x44>)
 800613a:	f7ff f8bc 	bl	80052b6 <_PreparePacket>
 800613e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006140:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <SEGGER_SYSVIEW_Stop+0x48>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006148:	220b      	movs	r2, #11
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6838      	ldr	r0, [r7, #0]
 800614e:	f7ff f9a3 	bl	8005498 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006152:	4b06      	ldr	r3, [pc, #24]	@ (800616c <SEGGER_SYSVIEW_Stop+0x48>)
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f383 8811 	msr	BASEPRI, r3
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2001a7ec 	.word	0x2001a7ec
 800616c:	2001a7bc 	.word	0x2001a7bc

08006170 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b08c      	sub	sp, #48	@ 0x30
 8006174:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006176:	f3ef 8311 	mrs	r3, BASEPRI
 800617a:	f04f 0120 	mov.w	r1, #32
 800617e:	f381 8811 	msr	BASEPRI, r1
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	4845      	ldr	r0, [pc, #276]	@ (800629c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006186:	f7ff f896 	bl	80052b6 <_PreparePacket>
 800618a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006194:	4b42      	ldr	r3, [pc, #264]	@ (80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800619a:	e00b      	b.n	80061b4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a2:	1c59      	adds	r1, r3, #1
 80061a4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b0:	09db      	lsrs	r3, r3, #7
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b8:	d8f0      	bhi.n	800619c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ce:	4b34      	ldr	r3, [pc, #208]	@ (80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	e00b      	b.n	80061ee <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	6279      	str	r1, [r7, #36]	@ 0x24
 80061e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	09db      	lsrs	r3, r3, #7
 80061ec:	623b      	str	r3, [r7, #32]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061f2:	d8f0      	bhi.n	80061d6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80061fa:	6a3a      	ldr	r2, [r7, #32]
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	4b25      	ldr	r3, [pc, #148]	@ (80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e00b      	b.n	8006228 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	61f9      	str	r1, [r7, #28]
 800621a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b7f      	cmp	r3, #127	@ 0x7f
 800622c:	d8f0      	bhi.n	8006210 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	61fa      	str	r2, [r7, #28]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	e00b      	b.n	8006260 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	6179      	str	r1, [r7, #20]
 8006252:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b7f      	cmp	r3, #127	@ 0x7f
 8006264:	d8f0      	bhi.n	8006248 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	617a      	str	r2, [r7, #20]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006276:	2218      	movs	r2, #24
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	68b8      	ldr	r0, [r7, #8]
 800627c:	f7ff f90c 	bl	8005498 <_SendPacket>
  RECORD_END();
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800628e:	4b04      	ldr	r3, [pc, #16]	@ (80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	4798      	blx	r3
  }
}
 8006294:	bf00      	nop
 8006296:	3730      	adds	r7, #48	@ 0x30
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2001a7ec 	.word	0x2001a7ec
 80062a0:	2001a7bc 	.word	0x2001a7bc

080062a4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b092      	sub	sp, #72	@ 0x48
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062ac:	f3ef 8311 	mrs	r3, BASEPRI
 80062b0:	f04f 0120 	mov.w	r1, #32
 80062b4:	f381 8811 	msr	BASEPRI, r1
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	486a      	ldr	r0, [pc, #424]	@ (8006464 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062bc:	f7fe fffb 	bl	80052b6 <_PreparePacket>
 80062c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b66      	ldr	r3, [pc, #408]	@ (8006468 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d6:	e00b      	b.n	80062f0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062de:	1c59      	adds	r1, r3, #1
 80062e0:	6479      	str	r1, [r7, #68]	@ 0x44
 80062e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ec:	09db      	lsrs	r3, r3, #7
 80062ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80062f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f4:	d8f0      	bhi.n	80062d8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80062f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80062fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006304:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006310:	e00b      	b.n	800632a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800631c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006326:	09db      	lsrs	r3, r3, #7
 8006328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	2b7f      	cmp	r3, #127	@ 0x7f
 800632e:	d8f0      	bhi.n	8006312 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006336:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	4619      	mov	r1, r3
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7fe ff67 	bl	800521c <_EncodeStr>
 800634e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006350:	2209      	movs	r2, #9
 8006352:	68f9      	ldr	r1, [r7, #12]
 8006354:	6938      	ldr	r0, [r7, #16]
 8006356:	f7ff f89f 	bl	8005498 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b40      	ldr	r3, [pc, #256]	@ (8006468 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
 800636e:	e00b      	b.n	8006388 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	b2da      	uxtb	r2, r3
 8006374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006376:	1c59      	adds	r1, r3, #1
 8006378:	6379      	str	r1, [r7, #52]	@ 0x34
 800637a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	09db      	lsrs	r3, r3, #7
 8006386:	633b      	str	r3, [r7, #48]	@ 0x30
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2b7f      	cmp	r3, #127	@ 0x7f
 800638c:	d8f0      	bhi.n	8006370 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	637a      	str	r2, [r7, #52]	@ 0x34
 8006394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a8:	e00b      	b.n	80063c2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b0:	1c59      	adds	r1, r3, #1
 80063b2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	09db      	lsrs	r3, r3, #7
 80063c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c6:	d8f0      	bhi.n	80063aa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	e00b      	b.n	80063fc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	1c59      	adds	r1, r3, #1
 80063ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80063ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	09db      	lsrs	r3, r3, #7
 80063fa:	623b      	str	r3, [r7, #32]
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006400:	d8f0      	bhi.n	80063e4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	627a      	str	r2, [r7, #36]	@ 0x24
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	61fb      	str	r3, [r7, #28]
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e00b      	b.n	8006434 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	b2da      	uxtb	r2, r3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	61f9      	str	r1, [r7, #28]
 8006426:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	09db      	lsrs	r3, r3, #7
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b7f      	cmp	r3, #127	@ 0x7f
 8006438:	d8f0      	bhi.n	800641c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	61fa      	str	r2, [r7, #28]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800644a:	2215      	movs	r2, #21
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	6938      	ldr	r0, [r7, #16]
 8006450:	f7ff f822 	bl	8005498 <_SendPacket>
  RECORD_END();
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f383 8811 	msr	BASEPRI, r3
}
 800645a:	bf00      	nop
 800645c:	3748      	adds	r7, #72	@ 0x48
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	2001a7ec 	.word	0x2001a7ec
 8006468:	2001a7bc 	.word	0x2001a7bc

0800646c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006470:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006482:	4b03      	ldr	r3, [pc, #12]	@ (8006490 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	4798      	blx	r3
  }
}
 800648a:	bf00      	nop
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	2001a7bc 	.word	0x2001a7bc

08006494 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800649c:	f3ef 8311 	mrs	r3, BASEPRI
 80064a0:	f04f 0120 	mov.w	r1, #32
 80064a4:	f381 8811 	msr	BASEPRI, r1
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	480b      	ldr	r0, [pc, #44]	@ (80064d8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80064ac:	f7fe ff03 	bl	80052b6 <_PreparePacket>
 80064b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064b2:	2280      	movs	r2, #128	@ 0x80
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7fe feb0 	bl	800521c <_EncodeStr>
 80064bc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80064be:	220e      	movs	r2, #14
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	6938      	ldr	r0, [r7, #16]
 80064c4:	f7fe ffe8 	bl	8005498 <_SendPacket>
  RECORD_END();
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f383 8811 	msr	BASEPRI, r3
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	2001a7ec 	.word	0x2001a7ec

080064dc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064e2:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01a      	beq.n	8006520 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064ea:	4b13      	ldr	r3, [pc, #76]	@ (8006538 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d015      	beq.n	8006520 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80064f4:	4b10      	ldr	r3, [pc, #64]	@ (8006538 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4798      	blx	r3
 80064fc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006500:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	000a      	movs	r2, r1
 8006510:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006512:	4613      	mov	r3, r2
 8006514:	461a      	mov	r2, r3
 8006516:	4621      	mov	r1, r4
 8006518:	200d      	movs	r0, #13
 800651a:	f7ff fced 	bl	8005ef8 <SEGGER_SYSVIEW_RecordU32x2>
 800651e:	e006      	b.n	800652e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006520:	4b06      	ldr	r3, [pc, #24]	@ (800653c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4619      	mov	r1, r3
 8006526:	200c      	movs	r0, #12
 8006528:	f7ff fcaa 	bl	8005e80 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	bd90      	pop	{r4, r7, pc}
 8006536:	bf00      	nop
 8006538:	2001a7bc 	.word	0x2001a7bc
 800653c:	e0001004 	.word	0xe0001004

08006540 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006546:	f3ef 8311 	mrs	r3, BASEPRI
 800654a:	f04f 0120 	mov.w	r1, #32
 800654e:	f381 8811 	msr	BASEPRI, r1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	4819      	ldr	r0, [pc, #100]	@ (80065bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006556:	f7fe feae 	bl	80052b6 <_PreparePacket>
 800655a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006560:	4b17      	ldr	r3, [pc, #92]	@ (80065c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006568:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e00b      	b.n	800658c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	6179      	str	r1, [r7, #20]
 800657e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	09db      	lsrs	r3, r3, #7
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006590:	d8f0      	bhi.n	8006574 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	617a      	str	r2, [r7, #20]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80065a2:	2202      	movs	r2, #2
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	68b8      	ldr	r0, [r7, #8]
 80065a8:	f7fe ff76 	bl	8005498 <_SendPacket>
  RECORD_END();
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f383 8811 	msr	BASEPRI, r3
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	2001a7ec 	.word	0x2001a7ec
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065ca:	f3ef 8311 	mrs	r3, BASEPRI
 80065ce:	f04f 0120 	mov.w	r1, #32
 80065d2:	f381 8811 	msr	BASEPRI, r1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	4807      	ldr	r0, [pc, #28]	@ (80065f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065da:	f7fe fe6c 	bl	80052b6 <_PreparePacket>
 80065de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065e0:	2203      	movs	r2, #3
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6838      	ldr	r0, [r7, #0]
 80065e6:	f7fe ff57 	bl	8005498 <_SendPacket>
  RECORD_END();
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f383 8811 	msr	BASEPRI, r3
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	2001a7ec 	.word	0x2001a7ec

080065fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006602:	f3ef 8311 	mrs	r3, BASEPRI
 8006606:	f04f 0120 	mov.w	r1, #32
 800660a:	f381 8811 	msr	BASEPRI, r1
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	4807      	ldr	r0, [pc, #28]	@ (8006630 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006612:	f7fe fe50 	bl	80052b6 <_PreparePacket>
 8006616:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006618:	2212      	movs	r2, #18
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	f7fe ff3b 	bl	8005498 <_SendPacket>
  RECORD_END();
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f383 8811 	msr	BASEPRI, r3
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	2001a7ec 	.word	0x2001a7ec

08006634 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800663a:	f3ef 8311 	mrs	r3, BASEPRI
 800663e:	f04f 0120 	mov.w	r1, #32
 8006642:	f381 8811 	msr	BASEPRI, r1
 8006646:	607b      	str	r3, [r7, #4]
 8006648:	4807      	ldr	r0, [pc, #28]	@ (8006668 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800664a:	f7fe fe34 	bl	80052b6 <_PreparePacket>
 800664e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006650:	2211      	movs	r2, #17
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6838      	ldr	r0, [r7, #0]
 8006656:	f7fe ff1f 	bl	8005498 <_SendPacket>
  RECORD_END();
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f383 8811 	msr	BASEPRI, r3
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	2001a7ec 	.word	0x2001a7ec

0800666c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006674:	f3ef 8311 	mrs	r3, BASEPRI
 8006678:	f04f 0120 	mov.w	r1, #32
 800667c:	f381 8811 	msr	BASEPRI, r1
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	4819      	ldr	r0, [pc, #100]	@ (80066e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006684:	f7fe fe17 	bl	80052b6 <_PreparePacket>
 8006688:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800668e:	4b17      	ldr	r3, [pc, #92]	@ (80066ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e00b      	b.n	80066ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	61f9      	str	r1, [r7, #28]
 80066ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066be:	d8f0      	bhi.n	80066a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80066d0:	2208      	movs	r2, #8
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6938      	ldr	r0, [r7, #16]
 80066d6:	f7fe fedf 	bl	8005498 <_SendPacket>
  RECORD_END();
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f383 8811 	msr	BASEPRI, r3
}
 80066e0:	bf00      	nop
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	2001a7ec 	.word	0x2001a7ec
 80066ec:	2001a7bc 	.word	0x2001a7bc

080066f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066f8:	f3ef 8311 	mrs	r3, BASEPRI
 80066fc:	f04f 0120 	mov.w	r1, #32
 8006700:	f381 8811 	msr	BASEPRI, r1
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	4819      	ldr	r0, [pc, #100]	@ (800676c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006708:	f7fe fdd5 	bl	80052b6 <_PreparePacket>
 800670c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006712:	4b17      	ldr	r3, [pc, #92]	@ (8006770 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	e00b      	b.n	800673e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	61f9      	str	r1, [r7, #28]
 8006730:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	09db      	lsrs	r3, r3, #7
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b7f      	cmp	r3, #127	@ 0x7f
 8006742:	d8f0      	bhi.n	8006726 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	61fa      	str	r2, [r7, #28]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006754:	2204      	movs	r2, #4
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6938      	ldr	r0, [r7, #16]
 800675a:	f7fe fe9d 	bl	8005498 <_SendPacket>
  RECORD_END();
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f383 8811 	msr	BASEPRI, r3
}
 8006764:	bf00      	nop
 8006766:	3720      	adds	r7, #32
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	2001a7ec 	.word	0x2001a7ec
 8006770:	2001a7bc 	.word	0x2001a7bc

08006774 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800677c:	f3ef 8311 	mrs	r3, BASEPRI
 8006780:	f04f 0120 	mov.w	r1, #32
 8006784:	f381 8811 	msr	BASEPRI, r1
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	4819      	ldr	r0, [pc, #100]	@ (80067f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800678c:	f7fe fd93 	bl	80052b6 <_PreparePacket>
 8006790:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006796:	4b17      	ldr	r3, [pc, #92]	@ (80067f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e00b      	b.n	80067c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	1c59      	adds	r1, r3, #1
 80067b2:	61f9      	str	r1, [r7, #28]
 80067b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	09db      	lsrs	r3, r3, #7
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067c6:	d8f0      	bhi.n	80067aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	61fa      	str	r2, [r7, #28]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067d8:	2206      	movs	r2, #6
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	6938      	ldr	r0, [r7, #16]
 80067de:	f7fe fe5b 	bl	8005498 <_SendPacket>
  RECORD_END();
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f383 8811 	msr	BASEPRI, r3
}
 80067e8:	bf00      	nop
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	2001a7ec 	.word	0x2001a7ec
 80067f4:	2001a7bc 	.word	0x2001a7bc

080067f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006800:	4b04      	ldr	r3, [pc, #16]	@ (8006814 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	1ad3      	subs	r3, r2, r3
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	2001a7bc 	.word	0x2001a7bc

08006818 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	@ 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006822:	4b3b      	ldr	r3, [pc, #236]	@ (8006910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d06d      	beq.n	8006906 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800682a:	4b39      	ldr	r3, [pc, #228]	@ (8006910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006830:	2300      	movs	r3, #0
 8006832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006834:	e008      	b.n	8006848 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	3301      	adds	r3, #1
 8006846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800684c:	429a      	cmp	r2, r3
 800684e:	d3f2      	bcc.n	8006836 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006850:	e000      	b.n	8006854 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006852:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d055      	beq.n	8006906 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800685a:	f3ef 8311 	mrs	r3, BASEPRI
 800685e:	f04f 0120 	mov.w	r1, #32
 8006862:	f381 8811 	msr	BASEPRI, r1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	482a      	ldr	r0, [pc, #168]	@ (8006914 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800686a:	f7fe fd24 	bl	80052b6 <_PreparePacket>
 800686e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	623b      	str	r3, [r7, #32]
 800687c:	e00b      	b.n	8006896 <SEGGER_SYSVIEW_SendModule+0x7e>
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	1c59      	adds	r1, r3, #1
 8006886:	6279      	str	r1, [r7, #36]	@ 0x24
 8006888:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	09db      	lsrs	r3, r3, #7
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2b7f      	cmp	r3, #127	@ 0x7f
 800689a:	d8f0      	bhi.n	800687e <SEGGER_SYSVIEW_SendModule+0x66>
 800689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80068a2:	6a3a      	ldr	r2, [r7, #32]
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	e00b      	b.n	80068d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	61f9      	str	r1, [r7, #28]
 80068c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	09db      	lsrs	r3, r3, #7
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80068d4:	d8f0      	bhi.n	80068b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	61fa      	str	r2, [r7, #28]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2280      	movs	r2, #128	@ 0x80
 80068ec:	4619      	mov	r1, r3
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7fe fc94 	bl	800521c <_EncodeStr>
 80068f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80068f6:	2216      	movs	r2, #22
 80068f8:	68f9      	ldr	r1, [r7, #12]
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f7fe fdcc 	bl	8005498 <_SendPacket>
      RECORD_END();
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006906:	bf00      	nop
 8006908:	3730      	adds	r7, #48	@ 0x30
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	2001a7e4 	.word	0x2001a7e4
 8006914:	2001a7ec 	.word	0x2001a7ec

08006918 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800691e:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00f      	beq.n	8006946 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006926:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f2      	bne.n	800692c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	2001a7e4 	.word	0x2001a7e4

08006954 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	4817      	ldr	r0, [pc, #92]	@ (80069c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800696a:	f7fe fca4 	bl	80052b6 <_PreparePacket>
 800696e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e00b      	b.n	8006998 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	1c59      	adds	r1, r3, #1
 8006988:	6179      	str	r1, [r7, #20]
 800698a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	09db      	lsrs	r3, r3, #7
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b7f      	cmp	r3, #127	@ 0x7f
 800699c:	d8f0      	bhi.n	8006980 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	617a      	str	r2, [r7, #20]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80069ae:	221b      	movs	r2, #27
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	68b8      	ldr	r0, [r7, #8]
 80069b4:	f7fe fd70 	bl	8005498 <_SendPacket>
  RECORD_END();
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	2001a7ec 	.word	0x2001a7ec
 80069cc:	2001a7e8 	.word	0x2001a7e8

080069d0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80069d0:	b40f      	push	{r0, r1, r2, r3}
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80069d8:	f107 0314 	add.w	r3, r7, #20
 80069dc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	461a      	mov	r2, r3
 80069e2:	2100      	movs	r1, #0
 80069e4:	6938      	ldr	r0, [r7, #16]
 80069e6:	f7fe ffe1 	bl	80059ac <_VPrintTarget>
  va_end(ParamList);
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr

080069f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	@ 0x28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	f04f 0120 	mov.w	r1, #32
 8006a08:	f381 8811 	msr	BASEPRI, r1
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	4827      	ldr	r0, [pc, #156]	@ (8006aac <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a10:	f7fe fc51 	bl	80052b6 <_PreparePacket>
 8006a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a16:	2280      	movs	r2, #128	@ 0x80
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f7fe fbfe 	bl	800521c <_EncodeStr>
 8006a20:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a26:	2301      	movs	r3, #1
 8006a28:	623b      	str	r3, [r7, #32]
 8006a2a:	e00b      	b.n	8006a44 <SEGGER_SYSVIEW_Warn+0x4c>
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	09db      	lsrs	r3, r3, #7
 8006a42:	623b      	str	r3, [r7, #32]
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a48:	d8f0      	bhi.n	8006a2c <SEGGER_SYSVIEW_Warn+0x34>
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e00b      	b.n	8006a7c <SEGGER_SYSVIEW_Warn+0x84>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	61f9      	str	r1, [r7, #28]
 8006a6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	09db      	lsrs	r3, r3, #7
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a80:	d8f0      	bhi.n	8006a64 <SEGGER_SYSVIEW_Warn+0x6c>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	61fa      	str	r2, [r7, #28]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006a92:	221a      	movs	r2, #26
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	6938      	ldr	r0, [r7, #16]
 8006a98:	f7fe fcfe 	bl	8005498 <_SendPacket>
  RECORD_END();
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f383 8811 	msr	BASEPRI, r3
}
 8006aa2:	bf00      	nop
 8006aa4:	3728      	adds	r7, #40	@ 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	2001a7ec 	.word	0x2001a7ec

08006ab0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ab4:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ab6:	7e1b      	ldrb	r3, [r3, #24]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4a13      	ldr	r2, [pc, #76]	@ (8006b08 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006abc:	460b      	mov	r3, r1
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	440b      	add	r3, r1
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	336c      	adds	r3, #108	@ 0x6c
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b0e      	ldr	r3, [pc, #56]	@ (8006b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006acc:	7e1b      	ldrb	r3, [r3, #24]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	490d      	ldr	r1, [pc, #52]	@ (8006b08 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4403      	add	r3, r0
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	440b      	add	r3, r1
 8006adc:	3370      	adds	r3, #112	@ 0x70
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d00b      	beq.n	8006afc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006ae4:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ae6:	789b      	ldrb	r3, [r3, #2]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006aec:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006af2:	f7fe fbed 	bl	80052d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006af6:	4b03      	ldr	r3, [pc, #12]	@ (8006b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006afc:	4b01      	ldr	r3, [pc, #4]	@ (8006b04 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	2001a7bc 	.word	0x2001a7bc
 8006b08:	200192fc 	.word	0x200192fc

08006b0c <memcmp>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	3901      	subs	r1, #1
 8006b10:	4402      	add	r2, r0
 8006b12:	4290      	cmp	r0, r2
 8006b14:	d101      	bne.n	8006b1a <memcmp+0xe>
 8006b16:	2000      	movs	r0, #0
 8006b18:	e005      	b.n	8006b26 <memcmp+0x1a>
 8006b1a:	7803      	ldrb	r3, [r0, #0]
 8006b1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d001      	beq.n	8006b28 <memcmp+0x1c>
 8006b24:	1b18      	subs	r0, r3, r4
 8006b26:	bd10      	pop	{r4, pc}
 8006b28:	3001      	adds	r0, #1
 8006b2a:	e7f2      	b.n	8006b12 <memcmp+0x6>

08006b2c <memset>:
 8006b2c:	4402      	add	r2, r0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d100      	bne.n	8006b36 <memset+0xa>
 8006b34:	4770      	bx	lr
 8006b36:	f803 1b01 	strb.w	r1, [r3], #1
 8006b3a:	e7f9      	b.n	8006b30 <memset+0x4>

08006b3c <__libc_init_array>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006b74 <__libc_init_array+0x38>)
 8006b40:	4c0d      	ldr	r4, [pc, #52]	@ (8006b78 <__libc_init_array+0x3c>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	2600      	movs	r6, #0
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	d109      	bne.n	8006b60 <__libc_init_array+0x24>
 8006b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006b7c <__libc_init_array+0x40>)
 8006b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006b80 <__libc_init_array+0x44>)
 8006b50:	f000 f826 	bl	8006ba0 <_init>
 8006b54:	1b64      	subs	r4, r4, r5
 8006b56:	10a4      	asrs	r4, r4, #2
 8006b58:	2600      	movs	r6, #0
 8006b5a:	42a6      	cmp	r6, r4
 8006b5c:	d105      	bne.n	8006b6a <__libc_init_array+0x2e>
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b64:	4798      	blx	r3
 8006b66:	3601      	adds	r6, #1
 8006b68:	e7ee      	b.n	8006b48 <__libc_init_array+0xc>
 8006b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6e:	4798      	blx	r3
 8006b70:	3601      	adds	r6, #1
 8006b72:	e7f2      	b.n	8006b5a <__libc_init_array+0x1e>
 8006b74:	08006d88 	.word	0x08006d88
 8006b78:	08006d88 	.word	0x08006d88
 8006b7c:	08006d88 	.word	0x08006d88
 8006b80:	08006d8c 	.word	0x08006d8c

08006b84 <memcpy>:
 8006b84:	440a      	add	r2, r1
 8006b86:	4291      	cmp	r1, r2
 8006b88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b8c:	d100      	bne.n	8006b90 <memcpy+0xc>
 8006b8e:	4770      	bx	lr
 8006b90:	b510      	push	{r4, lr}
 8006b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	d1f9      	bne.n	8006b92 <memcpy+0xe>
 8006b9e:	bd10      	pop	{r4, pc}

08006ba0 <_init>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr

08006bac <_fini>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr
