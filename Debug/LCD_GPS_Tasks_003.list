
LCD_GPS_Tasks_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800aa38  0800aa38  0000ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae0c  0800ae0c  0000c01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae0c  0800ae0c  0000be0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae14  0800ae14  0000c01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae14  0800ae14  0000be14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae18  0800ae18  0000be18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800ae1c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aaf8  20000020  0800ae38  0000c020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001ab18  0800ae38  0000cb18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001917e  00000000  00000000  0000c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e20  00000000  00000000  000251ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00028ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f4  00000000  00000000  0002a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025376  00000000  00000000  0002bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7ed  00000000  00000000  00050efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc91f  00000000  00000000  0006d6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068fc  00000000  00000000  0014a04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  00150948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa20 	.word	0x0800aa20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	0800aa20 	.word	0x0800aa20

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019544 	.word	0x20019544

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_drsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000278:	e002      	b.n	8000280 <__adddf3>
 800027a:	bf00      	nop

0800027c <__aeabi_dsub>:
 800027c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000280 <__adddf3>:
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000286:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028a:	ea94 0f05 	teq	r4, r5
 800028e:	bf08      	it	eq
 8000290:	ea90 0f02 	teqeq	r0, r2
 8000294:	bf1f      	itttt	ne
 8000296:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a6:	f000 80e2 	beq.w	800046e <__adddf3+0x1ee>
 80002aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b2:	bfb8      	it	lt
 80002b4:	426d      	neglt	r5, r5
 80002b6:	dd0c      	ble.n	80002d2 <__adddf3+0x52>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	ea82 0000 	eor.w	r0, r2, r0
 80002c6:	ea83 0101 	eor.w	r1, r3, r1
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	2d36      	cmp	r5, #54	@ 0x36
 80002d4:	bf88      	it	hi
 80002d6:	bd30      	pophi	{r4, r5, pc}
 80002d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x70>
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x84>
 80002fe:	4252      	negs	r2, r2
 8000300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000304:	ea94 0f05 	teq	r4, r5
 8000308:	f000 80a7 	beq.w	800045a <__adddf3+0x1da>
 800030c:	f1a4 0401 	sub.w	r4, r4, #1
 8000310:	f1d5 0e20 	rsbs	lr, r5, #32
 8000314:	db0d      	blt.n	8000332 <__adddf3+0xb2>
 8000316:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031a:	fa22 f205 	lsr.w	r2, r2, r5
 800031e:	1880      	adds	r0, r0, r2
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	fa03 f20e 	lsl.w	r2, r3, lr
 8000328:	1880      	adds	r0, r0, r2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	4159      	adcs	r1, r3
 8000330:	e00e      	b.n	8000350 <__adddf3+0xd0>
 8000332:	f1a5 0520 	sub.w	r5, r5, #32
 8000336:	f10e 0e20 	add.w	lr, lr, #32
 800033a:	2a01      	cmp	r2, #1
 800033c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000340:	bf28      	it	cs
 8000342:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	18c0      	adds	r0, r0, r3
 800034c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000350:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000354:	d507      	bpl.n	8000366 <__adddf3+0xe6>
 8000356:	f04f 0e00 	mov.w	lr, #0
 800035a:	f1dc 0c00 	rsbs	ip, ip, #0
 800035e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000362:	eb6e 0101 	sbc.w	r1, lr, r1
 8000366:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036a:	d31b      	bcc.n	80003a4 <__adddf3+0x124>
 800036c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000370:	d30c      	bcc.n	800038c <__adddf3+0x10c>
 8000372:	0849      	lsrs	r1, r1, #1
 8000374:	ea5f 0030 	movs.w	r0, r0, rrx
 8000378:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800037c:	f104 0401 	add.w	r4, r4, #1
 8000380:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000384:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000388:	f080 809a 	bcs.w	80004c0 <__adddf3+0x240>
 800038c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000390:	bf08      	it	eq
 8000392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000396:	f150 0000 	adcs.w	r0, r0, #0
 800039a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039e:	ea41 0105 	orr.w	r1, r1, r5
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a8:	4140      	adcs	r0, r0
 80003aa:	eb41 0101 	adc.w	r1, r1, r1
 80003ae:	3c01      	subs	r4, #1
 80003b0:	bf28      	it	cs
 80003b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b6:	d2e9      	bcs.n	800038c <__adddf3+0x10c>
 80003b8:	f091 0f00 	teq	r1, #0
 80003bc:	bf04      	itt	eq
 80003be:	4601      	moveq	r1, r0
 80003c0:	2000      	moveq	r0, #0
 80003c2:	fab1 f381 	clz	r3, r1
 80003c6:	bf08      	it	eq
 80003c8:	3320      	addeq	r3, #32
 80003ca:	f1a3 030b 	sub.w	r3, r3, #11
 80003ce:	f1b3 0220 	subs.w	r2, r3, #32
 80003d2:	da0c      	bge.n	80003ee <__adddf3+0x16e>
 80003d4:	320c      	adds	r2, #12
 80003d6:	dd08      	ble.n	80003ea <__adddf3+0x16a>
 80003d8:	f102 0c14 	add.w	ip, r2, #20
 80003dc:	f1c2 020c 	rsb	r2, r2, #12
 80003e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e4:	fa21 f102 	lsr.w	r1, r1, r2
 80003e8:	e00c      	b.n	8000404 <__adddf3+0x184>
 80003ea:	f102 0214 	add.w	r2, r2, #20
 80003ee:	bfd8      	it	le
 80003f0:	f1c2 0c20 	rsble	ip, r2, #32
 80003f4:	fa01 f102 	lsl.w	r1, r1, r2
 80003f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003fc:	bfdc      	itt	le
 80003fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000402:	4090      	lslle	r0, r2
 8000404:	1ae4      	subs	r4, r4, r3
 8000406:	bfa2      	ittt	ge
 8000408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800040c:	4329      	orrge	r1, r5
 800040e:	bd30      	popge	{r4, r5, pc}
 8000410:	ea6f 0404 	mvn.w	r4, r4
 8000414:	3c1f      	subs	r4, #31
 8000416:	da1c      	bge.n	8000452 <__adddf3+0x1d2>
 8000418:	340c      	adds	r4, #12
 800041a:	dc0e      	bgt.n	800043a <__adddf3+0x1ba>
 800041c:	f104 0414 	add.w	r4, r4, #20
 8000420:	f1c4 0220 	rsb	r2, r4, #32
 8000424:	fa20 f004 	lsr.w	r0, r0, r4
 8000428:	fa01 f302 	lsl.w	r3, r1, r2
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	fa21 f304 	lsr.w	r3, r1, r4
 8000434:	ea45 0103 	orr.w	r1, r5, r3
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f1c4 040c 	rsb	r4, r4, #12
 800043e:	f1c4 0220 	rsb	r2, r4, #32
 8000442:	fa20 f002 	lsr.w	r0, r0, r2
 8000446:	fa01 f304 	lsl.w	r3, r1, r4
 800044a:	ea40 0003 	orr.w	r0, r0, r3
 800044e:	4629      	mov	r1, r5
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	fa21 f004 	lsr.w	r0, r1, r4
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f094 0f00 	teq	r4, #0
 800045e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000462:	bf06      	itte	eq
 8000464:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000468:	3401      	addeq	r4, #1
 800046a:	3d01      	subne	r5, #1
 800046c:	e74e      	b.n	800030c <__adddf3+0x8c>
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf18      	it	ne
 8000474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000478:	d029      	beq.n	80004ce <__adddf3+0x24e>
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	d005      	beq.n	8000492 <__adddf3+0x212>
 8000486:	ea54 0c00 	orrs.w	ip, r4, r0
 800048a:	bf04      	itt	eq
 800048c:	4619      	moveq	r1, r3
 800048e:	4610      	moveq	r0, r2
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea91 0f03 	teq	r1, r3
 8000496:	bf1e      	ittt	ne
 8000498:	2100      	movne	r1, #0
 800049a:	2000      	movne	r0, #0
 800049c:	bd30      	popne	{r4, r5, pc}
 800049e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a2:	d105      	bne.n	80004b0 <__adddf3+0x230>
 80004a4:	0040      	lsls	r0, r0, #1
 80004a6:	4149      	adcs	r1, r1
 80004a8:	bf28      	it	cs
 80004aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b4:	bf3c      	itt	cc
 80004b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ba:	bd30      	popcc	{r4, r5, pc}
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c8:	f04f 0000 	mov.w	r0, #0
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf1a      	itte	ne
 80004d4:	4619      	movne	r1, r3
 80004d6:	4610      	movne	r0, r2
 80004d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004dc:	bf1c      	itt	ne
 80004de:	460b      	movne	r3, r1
 80004e0:	4602      	movne	r2, r0
 80004e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e6:	bf06      	itte	eq
 80004e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ec:	ea91 0f03 	teqeq	r1, r3
 80004f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	bf00      	nop

080004f8 <__aeabi_ui2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050c:	f04f 0500 	mov.w	r5, #0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e750      	b.n	80003b8 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_i2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000530:	bf48      	it	mi
 8000532:	4240      	negmi	r0, r0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e73e      	b.n	80003b8 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_f2d>:
 800053c:	0042      	lsls	r2, r0, #1
 800053e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000542:	ea4f 0131 	mov.w	r1, r1, rrx
 8000546:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054a:	bf1f      	itttt	ne
 800054c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000550:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000554:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000558:	4770      	bxne	lr
 800055a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055e:	bf08      	it	eq
 8000560:	4770      	bxeq	lr
 8000562:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000566:	bf04      	itt	eq
 8000568:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800057c:	e71c      	b.n	80003b8 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aed8 	beq.w	8000366 <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6bd      	b.n	8000366 <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2iz>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a18:	d215      	bcs.n	8000a46 <__aeabi_d2iz+0x36>
 8000a1a:	d511      	bpl.n	8000a40 <__aeabi_d2iz+0x30>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d912      	bls.n	8000a4c <__aeabi_d2iz+0x3c>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	bf18      	it	ne
 8000a3c:	4240      	negne	r0, r0
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_d2iz+0x48>
 8000a4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a50:	bf08      	it	eq
 8000a52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b14:	f000 b96a 	b.w	8000dec <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	460c      	mov	r4, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14e      	bne.n	8000bda <__udivmoddi4+0xaa>
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	458c      	cmp	ip, r1
 8000b40:	4686      	mov	lr, r0
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	d962      	bls.n	8000c0e <__udivmoddi4+0xde>
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0320 	rsb	r3, r2, #32
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	4319      	orrs	r1, r3
 8000b5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fa1f f68c 	uxth.w	r6, ip
 8000b66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x64>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b86:	f080 8112 	bcs.w	8000dae <__udivmoddi4+0x27e>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 810f 	bls.w	8000dae <__udivmoddi4+0x27e>
 8000b90:	3c02      	subs	r4, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	fa1f f38e 	uxth.w	r3, lr
 8000b9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f606 	mul.w	r6, r0, r6
 8000baa:	429e      	cmp	r6, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x94>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bb6:	f080 80fc 	bcs.w	8000db2 <__udivmoddi4+0x282>
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	f240 80f9 	bls.w	8000db2 <__udivmoddi4+0x282>
 8000bc0:	4463      	add	r3, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	1b9b      	subs	r3, r3, r6
 8000bc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa6>
 8000bce:	40d3      	lsrs	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xba>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb4>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x150>
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xcc>
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	f0c0 80f0 	bcc.w	8000ddc <__udivmoddi4+0x2ac>
 8000bfc:	1a86      	subs	r6, r0, r2
 8000bfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d0e6      	beq.n	8000bd6 <__udivmoddi4+0xa6>
 8000c08:	e9c5 6300 	strd	r6, r3, [r5]
 8000c0c:	e7e3      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 8090 	bne.w	8000d34 <__udivmoddi4+0x204>
 8000c14:	eba1 040c 	sub.w	r4, r1, ip
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	2101      	movs	r1, #1
 8000c22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb07 f006 	mul.w	r0, r7, r6
 8000c36:	4298      	cmp	r0, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x11c>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x11a>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	f200 80cd 	bhi.w	8000de4 <__udivmoddi4+0x2b4>
 8000c4a:	4626      	mov	r6, r4
 8000c4c:	1a1c      	subs	r4, r3, r0
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c56:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb00 f707 	mul.w	r7, r0, r7
 8000c62:	429f      	cmp	r7, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x148>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x146>
 8000c70:	429f      	cmp	r7, r3
 8000c72:	f200 80b0 	bhi.w	8000dd6 <__udivmoddi4+0x2a6>
 8000c76:	4620      	mov	r0, r4
 8000c78:	1bdb      	subs	r3, r3, r7
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x9c>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c90:	fa04 f301 	lsl.w	r3, r4, r1
 8000c94:	ea43 030c 	orr.w	r3, r3, ip
 8000c98:	40f4      	lsrs	r4, r6
 8000c9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9e:	0c38      	lsrs	r0, r7, #16
 8000ca0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca8:	fa1f fc87 	uxth.w	ip, r7
 8000cac:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb8:	45a1      	cmp	r9, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d90a      	bls.n	8000cd6 <__udivmoddi4+0x1a6>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cc6:	f080 8084 	bcs.w	8000dd2 <__udivmoddi4+0x2a2>
 8000cca:	45a1      	cmp	r9, r4
 8000ccc:	f240 8081 	bls.w	8000dd2 <__udivmoddi4+0x2a2>
 8000cd0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	eba4 0409 	sub.w	r4, r4, r9
 8000cda:	fa1f f983 	uxth.w	r9, r3
 8000cde:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x1d2>
 8000cf2:	193c      	adds	r4, r7, r4
 8000cf4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cf8:	d267      	bcs.n	8000dca <__udivmoddi4+0x29a>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0x29a>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d06:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0a:	eba4 040c 	sub.w	r4, r4, ip
 8000d0e:	429c      	cmp	r4, r3
 8000d10:	46ce      	mov	lr, r9
 8000d12:	469c      	mov	ip, r3
 8000d14:	d351      	bcc.n	8000dba <__udivmoddi4+0x28a>
 8000d16:	d04e      	beq.n	8000db6 <__udivmoddi4+0x286>
 8000d18:	b155      	cbz	r5, 8000d30 <__udivmoddi4+0x200>
 8000d1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431e      	orrs	r6, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e750      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000d34:	f1c2 0320 	rsb	r3, r2, #32
 8000d38:	fa20 f103 	lsr.w	r1, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa24 f303 	lsr.w	r3, r4, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	430c      	orrs	r4, r1
 8000d48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d50:	fa1f f78c 	uxth.w	r7, ip
 8000d54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d58:	fb08 3110 	mls	r1, r8, r0, r3
 8000d5c:	0c23      	lsrs	r3, r4, #16
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f107 	mul.w	r1, r0, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x24c>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d72:	d22c      	bcs.n	8000dce <__udivmoddi4+0x29e>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d92a      	bls.n	8000dce <__udivmoddi4+0x29e>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d84:	fb08 3311 	mls	r3, r8, r1, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb01 f307 	mul.w	r3, r1, r7
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x276>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d9c:	d213      	bcs.n	8000dc6 <__udivmoddi4+0x296>
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	d911      	bls.n	8000dc6 <__udivmoddi4+0x296>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	1ae4      	subs	r4, r4, r3
 8000da8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dac:	e739      	b.n	8000c22 <__udivmoddi4+0xf2>
 8000dae:	4604      	mov	r4, r0
 8000db0:	e6f0      	b.n	8000b94 <__udivmoddi4+0x64>
 8000db2:	4608      	mov	r0, r1
 8000db4:	e706      	b.n	8000bc4 <__udivmoddi4+0x94>
 8000db6:	45c8      	cmp	r8, r9
 8000db8:	d2ae      	bcs.n	8000d18 <__udivmoddi4+0x1e8>
 8000dba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc2:	3801      	subs	r0, #1
 8000dc4:	e7a8      	b.n	8000d18 <__udivmoddi4+0x1e8>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e7ed      	b.n	8000da6 <__udivmoddi4+0x276>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	e799      	b.n	8000d02 <__udivmoddi4+0x1d2>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e7d4      	b.n	8000d7c <__udivmoddi4+0x24c>
 8000dd2:	46d6      	mov	lr, sl
 8000dd4:	e77f      	b.n	8000cd6 <__udivmoddi4+0x1a6>
 8000dd6:	4463      	add	r3, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e74d      	b.n	8000c78 <__udivmoddi4+0x148>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	4623      	mov	r3, r4
 8000de0:	4608      	mov	r0, r1
 8000de2:	e70f      	b.n	8000c04 <__udivmoddi4+0xd4>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	e730      	b.n	8000c4c <__udivmoddi4+0x11c>
 8000dea:	bf00      	nop

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <I2C_Config>:
*/


/*Configure I2C Peripheral */
static void I2C_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	//Enable I2C peripheral clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <I2C_Config+0x68>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <I2C_Config+0x68>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <I2C_Config+0x68>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
	
	myI2Chandle.Instance = I2C1;
 8000e12:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <I2C_Config+0x6c>)
 8000e14:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <I2C_Config+0x70>)
 8000e16:	601a      	str	r2, [r3, #0]
	myI2Chandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <I2C_Config+0x6c>)
 8000e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1e:	611a      	str	r2, [r3, #16]
	myI2Chandle.Init.ClockSpeed = 100000;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <I2C_Config+0x6c>)
 8000e22:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <I2C_Config+0x74>)
 8000e24:	605a      	str	r2, [r3, #4]
	myI2Chandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <I2C_Config+0x6c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
	myI2Chandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <I2C_Config+0x6c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
	myI2Chandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <I2C_Config+0x6c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
	myI2Chandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <I2C_Config+0x6c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
	myI2Chandle.Init.OwnAddress1 = 0;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <I2C_Config+0x6c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
	myI2Chandle.Init.OwnAddress2 = 0;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <I2C_Config+0x6c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
	HAL_I2C_Init(&myI2Chandle);
 8000e4a:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <I2C_Config+0x6c>)
 8000e4c:	f002 f9be 	bl	80031cc <HAL_I2C_Init>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	2000003c 	.word	0x2000003c
 8000e60:	40005400 	.word	0x40005400
 8000e64:	000186a0 	.word	0x000186a0

08000e68 <LCD_Send_Cmd>:
 * @brief Send Command to LCD
 * @param cmd : LCD commands 
 * @retval None
 */
void LCD_Send_Cmd(uint8_t cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (cmd & 0xF0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((cmd << 4) & 0xF0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	737b      	strb	r3, [r7, #13]
	
	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN;
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT;
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	2201      	movs	r2, #1
 8000eac:	214e      	movs	r1, #78	@ 0x4e
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000eb0:	f002 fbce 	bl	8003650 <HAL_I2C_IsDeviceReady>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d108      	bne.n	8000ecc <LCD_Send_Cmd+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100); 
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	2364      	movs	r3, #100	@ 0x64
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	214e      	movs	r1, #78	@ 0x4e
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000ec8:	f002 fac4 	bl	8003454 <HAL_I2C_Master_Transmit>
	
	/*Provide a delay */
	HAL_Delay(5);
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f001 fe85 	bl	8002bdc <HAL_Delay>

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	214e      	movs	r1, #78	@ 0x4e
 8000ed8:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000eda:	f002 fbb9 	bl	8003650 <HAL_I2C_IsDeviceReady>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <LCD_Send_Cmd+0x8e>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);	
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2302      	movs	r3, #2
 8000eee:	214e      	movs	r1, #78	@ 0x4e
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000ef2:	f002 faaf 	bl	8003454 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f001 fe70 	bl	8002bdc <HAL_Delay>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000003c 	.word	0x2000003c

08000f08 <LCD_Send_Data>:
 * @brief Send Data to LCD
 * @param data: Data to be sent to LCD
 * @retval None
 */
void LCD_Send_Data(uint8_t data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (data & 0xF0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((data << 4) & 0xF0);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN|PIN_RS;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT|PIN_RS;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	737b      	strb	r3, [r7, #13]
	
	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN|PIN_RS;
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT|PIN_RS;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000f48:	230a      	movs	r3, #10
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	214e      	movs	r1, #78	@ 0x4e
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f50:	f002 fb7e 	bl	8003650 <HAL_I2C_IsDeviceReady>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d108      	bne.n	8000f6c <LCD_Send_Data+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100); 
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	2364      	movs	r3, #100	@ 0x64
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	214e      	movs	r1, #78	@ 0x4e
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f68:	f002 fa74 	bl	8003454 <HAL_I2C_Master_Transmit>
	
	/*Provide a delay */
	//HAL_Delay(1);

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	2201      	movs	r2, #1
 8000f70:	214e      	movs	r1, #78	@ 0x4e
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f74:	f002 fb6c 	bl	8003650 <HAL_I2C_IsDeviceReady>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d108      	bne.n	8000f90 <LCD_Send_Data+0x88>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);	
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2302      	movs	r3, #2
 8000f88:	214e      	movs	r1, #78	@ 0x4e
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f8c:	f002 fa62 	bl	8003454 <HAL_I2C_Master_Transmit>
    
    /*Provide a delay */
    HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 fe23 	bl	8002bdc <HAL_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000003c 	.word	0x2000003c

08000fa4 <LCD_Init>:
/**
 * @brief  Initializes LCD
 * @retval None
 */
void LCD_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	/* Configure GPIOs */
	//GPIO_Config();

	/*Configure I2C */
	I2C_Config();
 8000fa8:	f7ff ff22 	bl	8000df0 <I2C_Config>

	/* Wait for 15ms */
	HAL_Delay(50);
 8000fac:	2032      	movs	r0, #50	@ 0x32
 8000fae:	f001 fe15 	bl	8002bdc <HAL_Delay>
	
	/*Function Set - As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET1);
 8000fb2:	2033      	movs	r0, #51	@ 0x33
 8000fb4:	f7ff ff58 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Function Set -As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET2);
 8000fb8:	2032      	movs	r0, #50	@ 0x32
 8000fba:	f7ff ff55 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Set 4bit mode and 2 lines */
	LCD_Send_Cmd(LCD_4BIT_2LINE_MODE);
 8000fbe:	2028      	movs	r0, #40	@ 0x28
 8000fc0:	f7ff ff52 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Display on, cursor off*/
	LCD_Send_Cmd(0x0C);
 8000fc4:	200c      	movs	r0, #12
 8000fc6:	f7ff ff4f 	bl	8000e68 <LCD_Send_Cmd>
	
	/* SET Row1 and Col1 (1st Line) */
	LCD_Send_Cmd(0x80);
 8000fca:	2080      	movs	r0, #128	@ 0x80
 8000fcc:	f7ff ff4c 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Clear Display*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff ff49 	bl	8000e68 <LCD_Send_Cmd>
	
	/* Wait for 5ms to ensure commands are processed */
	HAL_Delay(5);
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f001 fe00 	bl	8002bdc <HAL_Delay>

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LCD_Display_Long_Message>:
 * @brief Display long messages of any size on LCD
 * @param str: pointer to strings
 * @retval None
 */
void LCD_Display_Long_Message(char *string)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	int i =0, count =1, j=0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
	/*Clear display and Set position to Line1 start*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff ff37 	bl	8000e68 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_SET_ROW1_COL1);
 8000ffa:	2080      	movs	r0, #128	@ 0x80
 8000ffc:	f7ff ff34 	bl	8000e68 <LCD_Send_Cmd>
	
	while(string[i] != '\0')
 8001000:	e033      	b.n	800106a <LCD_Display_Long_Message+0x8a>
	{
		LCD_Send_Data(string[i]);
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff7c 	bl	8000f08 <LCD_Send_Data>
		
		/*If we reach 1st Line end, then goto 2nd line start*/
		if(j>=15 && (count%2 == 1))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b0e      	cmp	r3, #14
 8001014:	dd0d      	ble.n	8001032 <LCD_Display_Long_Message+0x52>
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	bfb8      	it	lt
 8001020:	425b      	neglt	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d105      	bne.n	8001032 <LCD_Display_Long_Message+0x52>
		{
			count++;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	3301      	adds	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
			LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 800102c:	20c0      	movs	r0, #192	@ 0xc0
 800102e:	f7ff ff1b 	bl	8000e68 <LCD_Send_Cmd>
		}
		
		/*If we reach second line end, clear display start from line1 again*/
		if(j>=31 && (count%2 == 0))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b1e      	cmp	r3, #30
 8001036:	dd0f      	ble.n	8001058 <LCD_Display_Long_Message+0x78>
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10a      	bne.n	8001058 <LCD_Display_Long_Message+0x78>
		{
			count++;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3301      	adds	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
			j=0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
			LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ff0b 	bl	8000e68 <LCD_Send_Cmd>
			LCD_Send_Cmd(LCD_SET_ROW1_COL1);
 8001052:	2080      	movs	r0, #128	@ 0x80
 8001054:	f7ff ff08 	bl	8000e68 <LCD_Send_Cmd>
		}
		
		HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	@ 0x64
 800105a:	f001 fdbf 	bl	8002bdc <HAL_Delay>
		i++;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
		j++;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
	while(string[i] != '\0')
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1c5      	bne.n	8001002 <LCD_Display_Long_Message+0x22>
	}
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <gps_data_extrac>:


const char* gps_rx_data_test;

void gps_data_extrac(struct gps_data_output *gps_data, char* gps_rx_data)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	/* Initialize GPS data handler*/
	lwgps_init(&hgps);
 800108a:	4835      	ldr	r0, [pc, #212]	@ (8001160 <gps_data_extrac+0xe0>)
 800108c:	f000 fec5 	bl	8001e1a <lwgps_init>

    /* Process all input data */
#if TESTMODE_SWITCH

    // Select GPS data example
	gps_rx_data_test = gps_rx_data_example_3;
 8001090:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <gps_data_extrac+0xe4>)
 8001092:	4a35      	ldr	r2, [pc, #212]	@ (8001168 <gps_data_extrac+0xe8>)
 8001094:	601a      	str	r2, [r3, #0]

	/* Use example data when TESTMODE is enabled */
    lwgps_process(&hgps, gps_rx_data_test, strlen(gps_rx_data_test));
 8001096:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <gps_data_extrac+0xe4>)
 8001098:	681c      	ldr	r4, [r3, #0]
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <gps_data_extrac+0xe4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f8e0 	bl	8000264 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	482d      	ldr	r0, [pc, #180]	@ (8001160 <gps_data_extrac+0xe0>)
 80010ac:	f000 fec3 	bl	8001e36 <lwgps_process>
    lwgps_process(&hgps, gps_rx_data, strlen(gps_rx_data));

#endif

    /* Pass the data to gps_data */
    gps_data->valid_status = hgps.is_valid;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001160 <gps_data_extrac+0xe0>)
 80010b2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]

    float_to_string(hgps.longitude, gps_data->longitude);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <gps_data_extrac+0xe0>)
 80010be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fccb 	bl	8000a60 <__aeabi_d2f>
 80010ca:	4602      	mov	r2, r0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3314      	adds	r3, #20
 80010d0:	4618      	mov	r0, r3
 80010d2:	ee00 2a10 	vmov	s0, r2
 80010d6:	f000 f84f 	bl	8001178 <float_to_string>
    float_to_string(hgps.latitude, gps_data->latitude);
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <gps_data_extrac+0xe0>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fcbc 	bl	8000a60 <__aeabi_d2f>
 80010e8:	4602      	mov	r2, r0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	ee00 2a10 	vmov	s0, r2
 80010f4:	f000 f840 	bl	8001178 <float_to_string>
    float_to_string(hgps.altitude, gps_data->altitude);
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <gps_data_extrac+0xe0>)
 80010fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fcad 	bl	8000a60 <__aeabi_d2f>
 8001106:	4602      	mov	r2, r0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3324      	adds	r3, #36	@ 0x24
 800110c:	4618      	mov	r0, r3
 800110e:	ee00 2a10 	vmov	s0, r2
 8001112:	f000 f831 	bl	8001178 <float_to_string>

    truncate_to_6_decimal_places(gps_data->longitude);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3314      	adds	r3, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f8cc 	bl	80012b8 <truncate_to_6_decimal_places>
    truncate_to_6_decimal_places(gps_data->latitude);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3304      	adds	r3, #4
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f8c7 	bl	80012b8 <truncate_to_6_decimal_places>
    truncate_to_6_decimal_places(gps_data->altitude);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3324      	adds	r3, #36	@ 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f8c2 	bl	80012b8 <truncate_to_6_decimal_places>

    format_message("Lon", gps_data->longitude);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3314      	adds	r3, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	@ (800116c <gps_data_extrac+0xec>)
 800113c:	f000 f8d2 	bl	80012e4 <format_message>
    format_message("Lat", gps_data->latitude);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3304      	adds	r3, #4
 8001144:	4619      	mov	r1, r3
 8001146:	480a      	ldr	r0, [pc, #40]	@ (8001170 <gps_data_extrac+0xf0>)
 8001148:	f000 f8cc 	bl	80012e4 <format_message>
    format_message("Alt", gps_data->altitude);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3324      	adds	r3, #36	@ 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4808      	ldr	r0, [pc, #32]	@ (8001174 <gps_data_extrac+0xf4>)
 8001154:	f000 f8c6 	bl	80012e4 <format_message>

}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	20000090 	.word	0x20000090
 8001164:	20000150 	.word	0x20000150
 8001168:	0800ac2c 	.word	0x0800ac2c
 800116c:	0800aa38 	.word	0x0800aa38
 8001170:	0800aa3c 	.word	0x0800aa3c
 8001174:	0800aa40 	.word	0x0800aa40

08001178 <float_to_string>:
 * \brief           GPS data float -> string
 *
 * \note
 */
void float_to_string(float value, char* str)
{
 8001178:	b480      	push	{r7}
 800117a:	b08b      	sub	sp, #44	@ 0x2c
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001182:	6038      	str	r0, [r7, #0]
    // Handle negative numbers
    if (value < 0) {
 8001184:	edd7 7a01 	vldr	s15, [r7, #4]
 8001188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	d50a      	bpl.n	80011a8 <float_to_string+0x30>
        *str++ = '-';
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	603a      	str	r2, [r7, #0]
 8001198:	222d      	movs	r2, #45	@ 0x2d
 800119a:	701a      	strb	r2, [r3, #0]
        value = -value; // Get the absolute value
 800119c:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a0:	eef1 7a67 	vneg.f32	s15, s15
 80011a4:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Get the integer part
    int int_part = (int)value;
 80011a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b0:	ee17 3a90 	vmov	r3, s15
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
    value -= int_part; // Get the fractional part
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80011c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c8:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert the integer part to a string
    char* int_str = str;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	617b      	str	r3, [r7, #20]
    do {
        *str++ = (int_part % 10) + '0';
 80011d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <float_to_string+0x13c>)
 80011d4:	fb83 1302 	smull	r1, r3, r3, r2
 80011d8:	1099      	asrs	r1, r3, #2
 80011da:	17d3      	asrs	r3, r2, #31
 80011dc:	1ac9      	subs	r1, r1, r3
 80011de:	460b      	mov	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	1ad1      	subs	r1, r2, r3
 80011e8:	b2ca      	uxtb	r2, r1
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	1c59      	adds	r1, r3, #1
 80011ee:	6039      	str	r1, [r7, #0]
 80011f0:	3230      	adds	r2, #48	@ 0x30
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]
        int_part /= 10;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <float_to_string+0x13c>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1092      	asrs	r2, r2, #2
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (int_part > 0);
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	2b00      	cmp	r3, #0
 800120a:	dce1      	bgt.n	80011d0 <float_to_string+0x58>

    // Reverse the integer part string
    char* start = int_str;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	623b      	str	r3, [r7, #32]
    char* end = str - 1;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
    while (start < end) {
 8001216:	e00f      	b.n	8001238 <float_to_string+0xc0>
        char temp = *start;
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	73fb      	strb	r3, [r7, #15]
        *start = *end;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	701a      	strb	r2, [r3, #0]
        *end = temp;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	701a      	strb	r2, [r3, #0]
        start++;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3301      	adds	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
        end--;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b01      	subs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
    while (start < end) {
 8001238:	6a3a      	ldr	r2, [r7, #32]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3eb      	bcc.n	8001218 <float_to_string+0xa0>
    }

    // Handle the fractional part: keep 6 decimal places
    *str++ = '.'; // Decimal point
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	603a      	str	r2, [r7, #0]
 8001246:	222e      	movs	r2, #46	@ 0x2e
 8001248:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e024      	b.n	800129a <float_to_string+0x122>
        value *= 10; // Get each digit of the fractional part
 8001250:	edd7 7a01 	vldr	s15, [r7, #4]
 8001254:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125c:	edc7 7a01 	vstr	s15, [r7, #4]
        int digit = (int)value; // Get the integer part
 8001260:	edd7 7a01 	vldr	s15, [r7, #4]
 8001264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	613b      	str	r3, [r7, #16]
        *str++ = digit + '0'; // Convert to character and store
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	1c59      	adds	r1, r3, #1
 8001276:	6039      	str	r1, [r7, #0]
 8001278:	3230      	adds	r2, #48	@ 0x30
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
        value -= digit; // Remove the integer part, keep the new fractional part
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	ed97 7a01 	vldr	s14, [r7, #4]
 800128c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001290:	edc7 7a01 	vstr	s15, [r7, #4]
    for (int i = 0; i < 6; i++) {
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	3301      	adds	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b05      	cmp	r3, #5
 800129e:	ddd7      	ble.n	8001250 <float_to_string+0xd8>
    }

    // End the string
    *str = '\0';
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	372c      	adds	r7, #44	@ 0x2c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	66666667 	.word	0x66666667

080012b8 <truncate_to_6_decimal_places>:
 * \brief           Keep 6 decimal places
 *
 * \note
 */
void truncate_to_6_decimal_places(char* str)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    // Find the position of the decimal point
    char* dot_pos = strchr(str, '.');
 80012c0:	212e      	movs	r1, #46	@ 0x2e
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f009 fb3a 	bl	800a93c <strchr>
 80012c8:	60f8      	str	r0, [r7, #12]
    if (dot_pos) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <truncate_to_6_decimal_places+0x24>
        // Keep only 6 decimal places
    	// Start deleting from the 7th character after the decimal point
        char* decimal_pos = dot_pos + 7;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3307      	adds	r3, #7
 80012d4:	60bb      	str	r3, [r7, #8]
        *decimal_pos = '\0';  // Set the string terminator
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    }
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <format_message>:
 * \brief           Format GPS data
 *
 * \note
 */
void format_message(char* gps_field, char* data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0a0      	sub	sp, #128	@ 0x80
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    // Determine the lengths of gps_field and data
    int data_len = strlen(data);
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f7fe ffb8 	bl	8000264 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	673b      	str	r3, [r7, #112]	@ 0x70
    int gps_field_len = strlen(gps_field);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7fe ffb3 	bl	8000264 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Calculate how many spaces are needed between gps_field and data
    int space_count = 15 - (data_len + gps_field_len);
 8001302:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001306:	4413      	add	r3, r2
 8001308:	f1c3 030f 	rsb	r3, r3, #15
 800130c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Ensure space_count is not negative
    if (space_count < 0) {
 800130e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001310:	2b00      	cmp	r3, #0
 8001312:	da01      	bge.n	8001318 <format_message+0x34>
        space_count = 0; // If the combined length of gps_field and data exceeds 15, no spaces in between
 8001314:	2300      	movs	r3, #0
 8001316:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }

    // Create a buffer to hold the final formatted message
    char buffer[100]; // Assuming the buffer size is sufficient
    int index = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Copy gps_field to the buffer
    while (*gps_field) {
 800131c:	e00a      	b.n	8001334 <format_message+0x50>
        buffer[index++] = *gps_field++;
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	1c53      	adds	r3, r2, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001326:	1c59      	adds	r1, r3, #1
 8001328:	67b9      	str	r1, [r7, #120]	@ 0x78
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	3380      	adds	r3, #128	@ 0x80
 800132e:	443b      	add	r3, r7
 8001330:	f803 2c78 	strb.w	r2, [r3, #-120]
    while (*gps_field) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <format_message+0x3a>
    }

    // Add spaces between gps_field and data
    for (int i = 0; i < space_count; i++) {
 800133c:	2300      	movs	r3, #0
 800133e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001340:	e00a      	b.n	8001358 <format_message+0x74>
        buffer[index++] = ' ';
 8001342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001348:	3380      	adds	r3, #128	@ 0x80
 800134a:	443b      	add	r3, r7
 800134c:	2220      	movs	r2, #32
 800134e:	f803 2c78 	strb.w	r2, [r3, #-120]
    for (int i = 0; i < space_count; i++) {
 8001352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001354:	3301      	adds	r3, #1
 8001356:	677b      	str	r3, [r7, #116]	@ 0x74
 8001358:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800135a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf0      	blt.n	8001342 <format_message+0x5e>
    }

    // Copy the original data into the rest of the buffer
    while (*data) {
 8001360:	e00a      	b.n	8001378 <format_message+0x94>
        buffer[index++] = *data++;
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	1c53      	adds	r3, r2, #1
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	3380      	adds	r3, #128	@ 0x80
 8001372:	443b      	add	r3, r7
 8001374:	f803 2c78 	strb.w	r2, [r3, #-120]
    while (*data) {
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <format_message+0x7e>
    }

    // Null-terminate the final string
    buffer[index] = '\0';
 8001380:	f107 0208 	add.w	r2, r7, #8
 8001384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001386:	4413      	add	r3, r2
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]

    // Copy the formatted message back to the original data array
    strcpy(data - data_len, buffer);
 800138c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800138e:	425b      	negs	r3, r3
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f009 fb38 	bl	800aa10 <strcpy>

}
 80013a0:	bf00      	nop
 80013a2:	3780      	adds	r7, #128	@ 0x80
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <prv_parse_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3379      	adds	r3, #121	@ 0x79
 80013c4:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 80013c6:	e002      	b.n	80013ce <prv_parse_number+0x26>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <prv_parse_number+0x34>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d0f5      	beq.n	80013c8 <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80013e2:	d104      	bne.n	80013ee <prv_parse_number+0x46>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <prv_parse_number+0x48>
 80013ee:	2300      	movs	r3, #0
 80013f0:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 80013f2:	e00d      	b.n	8001410 <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	461a      	mov	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3b30      	subs	r3, #48	@ 0x30
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <prv_parse_number+0x7e>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b2f      	cmp	r3, #47	@ 0x2f
 800141c:	d903      	bls.n	8001426 <prv_parse_number+0x7e>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b39      	cmp	r3, #57	@ 0x39
 8001424:	d9e6      	bls.n	80013f4 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <prv_parse_number+0x8a>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	425b      	negs	r3, r3
 8001430:	e000      	b.n	8001434 <prv_parse_number+0x8c>
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <prv_parse_float_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1, sign = (lwgps_float_t)1;
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b4f      	ldr	r3, [pc, #316]	@ (8001598 <prv_parse_float_number+0x158>)
 800145c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b4c      	ldr	r3, [pc, #304]	@ (8001598 <prv_parse_float_number+0x158>)
 8001466:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (text == NULL) {
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <prv_parse_float_number+0x3e>
        text = ghandle->p.term_str;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3379      	adds	r3, #121	@ 0x79
 8001474:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8001476:	e002      	b.n	800147e <prv_parse_float_number+0x3e>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <prv_parse_float_number+0x4c>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b20      	cmp	r3, #32
 800148a:	d0f5      	beq.n	8001478 <prv_parse_float_number+0x38>

    if (*text == '-') { /* Check sign */
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b2d      	cmp	r3, #45	@ 0x2d
 8001492:	d126      	bne.n	80014e2 <prv_parse_float_number+0xa2>
        sign = -1;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b40      	ldr	r3, [pc, #256]	@ (800159c <prv_parse_float_number+0x15c>)
 800149a:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ++text;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 80014a4:	e01d      	b.n	80014e2 <prv_parse_float_number+0xa2>
        value = value * (lwgps_float_t)10 + CTN(*text);
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <prv_parse_float_number+0x160>)
 80014ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014b0:	f7ff f89c 	bl	80005ec <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4614      	mov	r4, r2
 80014ba:	461d      	mov	r5, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	3b30      	subs	r3, #48	@ 0x30
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f828 	bl	8000518 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7fe fed6 	bl	8000280 <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80014e8:	d903      	bls.n	80014f2 <prv_parse_float_number+0xb2>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b39      	cmp	r3, #57	@ 0x39
 80014f0:	d9d9      	bls.n	80014a6 <prv_parse_float_number+0x66>
    }
    if (*text == '.') { /* Skip the dot character */
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80014f8:	d12c      	bne.n	8001554 <prv_parse_float_number+0x114>
        ++text;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 8001500:	e028      	b.n	8001554 <prv_parse_float_number+0x114>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <prv_parse_float_number+0x160>)
 8001508:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800150c:	f7ff f86e 	bl	80005ec <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3b30      	subs	r3, #48	@ 0x30
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe fffa 	bl	8000518 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7fe fea8 	bl	8000280 <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <prv_parse_float_number+0x160>)
 800153e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001542:	f7ff f853 	bl	80005ec <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b2f      	cmp	r3, #47	@ 0x2f
 800155a:	d903      	bls.n	8001564 <prv_parse_float_number+0x124>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b39      	cmp	r3, #57	@ 0x39
 8001562:	d9ce      	bls.n	8001502 <prv_parse_float_number+0xc2>
    }
    return sign * value / power;
 8001564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001568:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800156c:	f7ff f83e 	bl	80005ec <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800157c:	f7ff f960 	bl	8000840 <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	ec43 2b17 	vmov	d7, r2, r3
}
 8001588:	eeb0 0a47 	vmov.f32	s0, s14
 800158c:	eef0 0a67 	vmov.f32	s1, s15
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	bf00      	nop
 8001598:	3ff00000 	.word	0x3ff00000
 800159c:	bff00000 	.word	0xbff00000
 80015a0:	40240000 	.word	0x40240000

080015a4 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 80015ac:	2100      	movs	r1, #0
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff46 	bl	8001440 <prv_parse_float_number>
 80015b4:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 80015b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015bc:	f7ff fa28 	bl	8000a10 <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <prv_parse_lat_long+0x94>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1152      	asrs	r2, r2, #5
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffa2 	bl	8000518 <__aeabi_i2d>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <prv_parse_lat_long+0x98>)
 80015e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015e6:	f7ff f801 	bl	80005ec <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015f2:	f7fe fe43 	bl	800027c <__aeabi_dsub>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60));                 /* Calculate latitude/longitude */
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <prv_parse_lat_long+0x9c>)
 8001604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001608:	f7ff f91a 	bl	8000840 <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001614:	f7fe fe34 	bl	8000280 <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 8001620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001624:	ec43 2b17 	vmov	d7, r2, r3
}
 8001628:	eeb0 0a47 	vmov.f32	s0, s14
 800162c:	eef0 0a67 	vmov.f32	s1, s15
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	51eb851f 	.word	0x51eb851f
 800163c:	40590000 	.word	0x40590000
 8001640:	404e0000 	.word	0x404e0000

08001644 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 8001644:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 8001654:	2900      	cmp	r1, #0
 8001656:	d169      	bne.n	800172c <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3379      	adds	r3, #121	@ 0x79
 800165c:	2206      	movs	r2, #6
 800165e:	49bd      	ldr	r1, [pc, #756]	@ (8001954 <prv_parse_term+0x310>)
 8001660:	4618      	mov	r0, r3
 8001662:	f009 f978 	bl	800a956 <strncmp>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d009      	beq.n	8001680 <prv_parse_term+0x3c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3379      	adds	r3, #121	@ 0x79
 8001670:	2206      	movs	r2, #6
 8001672:	49b9      	ldr	r1, [pc, #740]	@ (8001958 <prv_parse_term+0x314>)
 8001674:	4618      	mov	r0, r3
 8001676:	f009 f96e 	bl	800a956 <strncmp>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d104      	bne.n	800168a <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001688:	e04e      	b.n	8001728 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3379      	adds	r3, #121	@ 0x79
 800168e:	2206      	movs	r2, #6
 8001690:	49b2      	ldr	r1, [pc, #712]	@ (800195c <prv_parse_term+0x318>)
 8001692:	4618      	mov	r0, r3
 8001694:	f009 f95f 	bl	800a956 <strncmp>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <prv_parse_term+0x6e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3379      	adds	r3, #121	@ 0x79
 80016a2:	2206      	movs	r2, #6
 80016a4:	49ae      	ldr	r1, [pc, #696]	@ (8001960 <prv_parse_term+0x31c>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f009 f955 	bl	800a956 <strncmp>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80016ba:	e035      	b.n	8001728 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3379      	adds	r3, #121	@ 0x79
 80016c0:	2206      	movs	r2, #6
 80016c2:	49a8      	ldr	r1, [pc, #672]	@ (8001964 <prv_parse_term+0x320>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f009 f946 	bl	800a956 <strncmp>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d009      	beq.n	80016e4 <prv_parse_term+0xa0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3379      	adds	r3, #121	@ 0x79
 80016d4:	2206      	movs	r2, #6
 80016d6:	49a4      	ldr	r1, [pc, #656]	@ (8001968 <prv_parse_term+0x324>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f009 f93c 	bl	800a956 <strncmp>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d104      	bne.n	80016ee <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80016ec:	e01c      	b.n	8001728 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3379      	adds	r3, #121	@ 0x79
 80016f2:	2206      	movs	r2, #6
 80016f4:	499d      	ldr	r1, [pc, #628]	@ (800196c <prv_parse_term+0x328>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f009 f92d 	bl	800a956 <strncmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <prv_parse_term+0xd2>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3379      	adds	r3, #121	@ 0x79
 8001706:	2206      	movs	r2, #6
 8001708:	4999      	ldr	r1, [pc, #612]	@ (8001970 <prv_parse_term+0x32c>)
 800170a:	4618      	mov	r0, r3
 800170c:	f009 f923 	bl	800a956 <strncmp>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d104      	bne.n	8001720 <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2204      	movs	r2, #4
 800171a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800171e:	e003      	b.n	8001728 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        }
        return 1;
 8001728:	2301      	movs	r3, #1
 800172a:	e241      	b.n	8001bb0 <prv_parse_term+0x56c>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 8001732:	2900      	cmp	r1, #0
 8001734:	f000 823b 	beq.w	8001bae <prv_parse_term+0x56a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800173e:	2901      	cmp	r1, #1
 8001740:	f040 80d9 	bne.w	80018f6 <prv_parse_term+0x2b2>
        switch (ghandle->p.term_num) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800174a:	3b01      	subs	r3, #1
 800174c:	2b0c      	cmp	r3, #12
 800174e:	f200 8223 	bhi.w	8001b98 <prv_parse_term+0x554>
 8001752:	a201      	add	r2, pc, #4	@ (adr r2, 8001758 <prv_parse_term+0x114>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	0800178d 	.word	0x0800178d
 800175c:	08001807 	.word	0x08001807
 8001760:	0800181d 	.word	0x0800181d
 8001764:	08001847 	.word	0x08001847
 8001768:	0800185d 	.word	0x0800185d
 800176c:	08001887 	.word	0x08001887
 8001770:	0800189b 	.word	0x0800189b
 8001774:	08001b99 	.word	0x08001b99
 8001778:	080018af 	.word	0x080018af
 800177c:	08001b99 	.word	0x08001b99
 8001780:	080018c7 	.word	0x080018c7
 8001784:	08001b99 	.word	0x08001b99
 8001788:	080018df 	.word	0x080018df
            case 1: /* Process UTC time */
                ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001792:	3b30      	subs	r3, #48	@ 0x30
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80017a6:	4413      	add	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3b30      	subs	r3, #48	@ 0x30
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
                ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80017ba:	3b30      	subs	r3, #48	@ 0x30
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80017ce:	4413      	add	r3, r2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3b30      	subs	r3, #48	@ 0x30
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
                ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80017e2:	3b30      	subs	r3, #48	@ 0x30
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80017f6:	4413      	add	r3, r2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	3b30      	subs	r3, #48	@ 0x30
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                break;
 8001804:	e1d3      	b.n	8001bae <prv_parse_term+0x56a>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fecc 	bl	80015a4 <prv_parse_lat_long>
 800180c:	eeb0 7a40 	vmov.f32	s14, s0
 8001810:	eef0 7a60 	vmov.f32	s15, s1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 800181a:	e1c8      	b.n	8001bae <prv_parse_term+0x56a>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001822:	2b53      	cmp	r3, #83	@ 0x53
 8001824:	d005      	beq.n	8001832 <prv_parse_term+0x1ee>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800182c:	2b73      	cmp	r3, #115	@ 0x73
 800182e:	f040 81b5 	bne.w	8001b9c <prv_parse_term+0x558>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001838:	4690      	mov	r8, r2
 800183a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	e9c3 8924 	strd	r8, r9, [r3, #144]	@ 0x90
                }
                break;
 8001844:	e1aa      	b.n	8001b9c <prv_parse_term+0x558>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff feac 	bl	80015a4 <prv_parse_lat_long>
 800184c:	eeb0 7a40 	vmov.f32	s14, s0
 8001850:	eef0 7a60 	vmov.f32	s15, s1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 800185a:	e1a8      	b.n	8001bae <prv_parse_term+0x56a>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001862:	2b57      	cmp	r3, #87	@ 0x57
 8001864:	d005      	beq.n	8001872 <prv_parse_term+0x22e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800186c:	2b77      	cmp	r3, #119	@ 0x77
 800186e:	f040 8197 	bne.w	8001ba0 <prv_parse_term+0x55c>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001878:	4614      	mov	r4, r2
 800187a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	e9c3 4526 	strd	r4, r5, [r3, #152]	@ 0x98
                }
                break;
 8001884:	e18c      	b.n	8001ba0 <prv_parse_term+0x55c>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fd8d 	bl	80013a8 <prv_parse_number>
 800188e:	4603      	mov	r3, r0
 8001890:	b2da      	uxtb	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
 8001898:	e189      	b.n	8001bae <prv_parse_term+0x56a>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 800189a:	2100      	movs	r1, #0
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fd83 	bl	80013a8 <prv_parse_number>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
                break;
 80018ac:	e17f      	b.n	8001bae <prv_parse_term+0x56a>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fdc5 	bl	8001440 <prv_parse_float_number>
 80018b6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ba:	eef0 7a60 	vmov.f32	s15, s1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 80018c4:	e173      	b.n	8001bae <prv_parse_term+0x56a>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 80018c6:	2100      	movs	r1, #0
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fdb9 	bl	8001440 <prv_parse_float_number>
 80018ce:	eeb0 7a40 	vmov.f32	s14, s0
 80018d2:	eef0 7a60 	vmov.f32	s15, s1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 80018dc:	e167      	b.n	8001bae <prv_parse_term+0x56a>
            case 13: /* Age of differential GPS correction data */
                ghandle->p.data.gga.dgps_age = prv_parse_float_number(ghandle, NULL);
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fdad 	bl	8001440 <prv_parse_float_number>
 80018e6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ea:	eef0 7a60 	vmov.f32	s15, s1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	ed83 7b2e 	vstr	d7, [r3, #184]	@ 0xb8
                break;
 80018f4:	e15b      	b.n	8001bae <prv_parse_term+0x56a>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80018fc:	2902      	cmp	r1, #2
 80018fe:	f040 8083 	bne.w	8001a08 <prv_parse_term+0x3c4>
        switch (ghandle->p.term_num) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001908:	3b02      	subs	r3, #2
 800190a:	2b0f      	cmp	r3, #15
 800190c:	d860      	bhi.n	80019d0 <prv_parse_term+0x38c>
 800190e:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <prv_parse_term+0x2d0>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001975 	.word	0x08001975
 8001918:	080019d1 	.word	0x080019d1
 800191c:	080019d1 	.word	0x080019d1
 8001920:	080019d1 	.word	0x080019d1
 8001924:	080019d1 	.word	0x080019d1
 8001928:	080019d1 	.word	0x080019d1
 800192c:	080019d1 	.word	0x080019d1
 8001930:	080019d1 	.word	0x080019d1
 8001934:	080019d1 	.word	0x080019d1
 8001938:	080019d1 	.word	0x080019d1
 800193c:	080019d1 	.word	0x080019d1
 8001940:	080019d1 	.word	0x080019d1
 8001944:	080019d1 	.word	0x080019d1
 8001948:	08001989 	.word	0x08001989
 800194c:	080019a1 	.word	0x080019a1
 8001950:	080019b9 	.word	0x080019b9
 8001954:	0800aa44 	.word	0x0800aa44
 8001958:	0800aa4c 	.word	0x0800aa4c
 800195c:	0800aa54 	.word	0x0800aa54
 8001960:	0800aa5c 	.word	0x0800aa5c
 8001964:	0800aa64 	.word	0x0800aa64
 8001968:	0800aa6c 	.word	0x0800aa6c
 800196c:	0800aa74 	.word	0x0800aa74
 8001970:	0800aa7c 	.word	0x0800aa7c
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001974:	2100      	movs	r1, #0
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fd16 	bl	80013a8 <prv_parse_number>
 800197c:	4603      	mov	r3, r0
 800197e:	b2da      	uxtb	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8001986:	e112      	b.n	8001bae <prv_parse_term+0x56a>
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 8001988:	2100      	movs	r1, #0
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fd58 	bl	8001440 <prv_parse_float_number>
 8001990:	eeb0 7a40 	vmov.f32	s14, s0
 8001994:	eef0 7a60 	vmov.f32	s15, s1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 800199e:	e106      	b.n	8001bae <prv_parse_term+0x56a>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 80019a0:	2100      	movs	r1, #0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fd4c 	bl	8001440 <prv_parse_float_number>
 80019a8:	eeb0 7a40 	vmov.f32	s14, s0
 80019ac:	eef0 7a60 	vmov.f32	s15, s1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
 80019b6:	e0fa      	b.n	8001bae <prv_parse_term+0x56a>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 80019b8:	2100      	movs	r1, #0
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fd40 	bl	8001440 <prv_parse_float_number>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 80019ce:	e0ee      	b.n	8001bae <prv_parse_term+0x56a>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	f240 80e4 	bls.w	8001ba4 <prv_parse_term+0x560>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019e2:	2b0e      	cmp	r3, #14
 80019e4:	f200 80de 	bhi.w	8001ba4 <prv_parse_term+0x560>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 80019e8:	2100      	movs	r1, #0
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fcdc 	bl	80013a8 <prv_parse_number>
 80019f0:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019f8:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 80019fa:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	460a      	mov	r2, r1
 8001a02:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                }
                break;
 8001a06:	e0cd      	b.n	8001ba4 <prv_parse_term+0x560>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 8001a0e:	2903      	cmp	r1, #3
 8001a10:	d11b      	bne.n	8001a4a <prv_parse_term+0x406>
        switch (ghandle->p.term_num) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d002      	beq.n	8001a22 <prv_parse_term+0x3de>
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d00a      	beq.n	8001a36 <prv_parse_term+0x3f2>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001a20:	e0c5      	b.n	8001bae <prv_parse_term+0x56a>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 8001a22:	2100      	movs	r1, #0
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fcbf 	bl	80013a8 <prv_parse_number>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                break;
 8001a34:	e0bb      	b.n	8001bae <prv_parse_term+0x56a>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fcb5 	bl	80013a8 <prv_parse_number>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                break;
 8001a48:	e0b1      	b.n	8001bae <prv_parse_term+0x56a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 8001a50:	2904      	cmp	r1, #4
 8001a52:	f040 80ac 	bne.w	8001bae <prv_parse_term+0x56a>
        switch (ghandle->p.term_num) {
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 8001a5c:	3902      	subs	r1, #2
 8001a5e:	2909      	cmp	r1, #9
 8001a60:	f200 80a2 	bhi.w	8001ba8 <prv_parse_term+0x564>
 8001a64:	a001      	add	r0, pc, #4	@ (adr r0, 8001a6c <prv_parse_term+0x428>)
 8001a66:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a95 	.word	0x08001a95
 8001a70:	08001ba9 	.word	0x08001ba9
 8001a74:	08001ba9 	.word	0x08001ba9
 8001a78:	08001ba9 	.word	0x08001ba9
 8001a7c:	08001ba9 	.word	0x08001ba9
 8001a80:	08001aaf 	.word	0x08001aaf
 8001a84:	08001ac7 	.word	0x08001ac7
 8001a88:	08001adf 	.word	0x08001adf
 8001a8c:	08001b59 	.word	0x08001b59
 8001a90:	08001b71 	.word	0x08001b71
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001a9a:	2b41      	cmp	r3, #65	@ 0x41
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 8001aac:	e07f      	b.n	8001bae <prv_parse_term+0x56a>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fcc5 	bl	8001440 <prv_parse_float_number>
 8001ab6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aba:	eef0 7a60 	vmov.f32	s15, s1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001ac4:	e073      	b.n	8001bae <prv_parse_term+0x56a>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fcb9 	bl	8001440 <prv_parse_float_number>
 8001ace:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad2:	eef0 7a60 	vmov.f32	s15, s1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001adc:	e067      	b.n	8001bae <prv_parse_term+0x56a>
            case 9: /* Process date */
                ghandle->p.data.rmc.date = (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001ae4:	3b30      	subs	r3, #48	@ 0x30
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001af8:	4413      	add	r3, r2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3b30      	subs	r3, #48	@ 0x30
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                ghandle->p.data.rmc.month = (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001b0c:	3b30      	subs	r3, #48	@ 0x30
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001b20:	4413      	add	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	3b30      	subs	r3, #48	@ 0x30
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
                ghandle->p.data.rmc.year = (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8001b34:	3b30      	subs	r3, #48	@ 0x30
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001b48:	4413      	add	r3, r2
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3b30      	subs	r3, #48	@ 0x30
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
                break;
 8001b56:	e02a      	b.n	8001bae <prv_parse_term+0x56a>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fc70 	bl	8001440 <prv_parse_float_number>
 8001b60:	eeb0 7a40 	vmov.f32	s14, s0
 8001b64:	eef0 7a60 	vmov.f32	s15, s1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 8001b6e:	e01e      	b.n	8001bae <prv_parse_term+0x56a>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 8001b76:	2957      	cmp	r1, #87	@ 0x57
 8001b78:	d004      	beq.n	8001b84 <prv_parse_term+0x540>
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 8001b80:	2977      	cmp	r1, #119	@ 0x77
 8001b82:	d113      	bne.n	8001bac <prv_parse_term+0x568>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	e9d1 012a 	ldrd	r0, r1, [r1, #168]	@ 0xa8
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
                }
                break;
 8001b96:	e009      	b.n	8001bac <prv_parse_term+0x568>
            default: break;
 8001b98:	bf00      	nop
 8001b9a:	e008      	b.n	8001bae <prv_parse_term+0x56a>
                break;
 8001b9c:	bf00      	nop
 8001b9e:	e006      	b.n	8001bae <prv_parse_term+0x56a>
                break;
 8001ba0:	bf00      	nop
 8001ba2:	e004      	b.n	8001bae <prv_parse_term+0x56a>
                break;
 8001ba4:	bf00      	nop
 8001ba6:	e002      	b.n	8001bae <prv_parse_term+0x56a>
            default: break;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <prv_parse_term+0x56a>
                break;
 8001bac:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bba:	bf00      	nop

08001bbc <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001bca:	2b2f      	cmp	r3, #47	@ 0x2f
 8001bcc:	d90a      	bls.n	8001be4 <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001bd4:	2b39      	cmp	r3, #57	@ 0x39
 8001bd6:	d805      	bhi.n	8001be4 <prv_check_crc+0x28>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	e024      	b.n	8001c2e <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001bea:	2b60      	cmp	r3, #96	@ 0x60
 8001bec:	d90c      	bls.n	8001c08 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001bf4:	2b7a      	cmp	r3, #122	@ 0x7a
 8001bf6:	d807      	bhi.n	8001c08 <prv_check_crc+0x4c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001bfe:	3b57      	subs	r3, #87	@ 0x57
 8001c00:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	e012      	b.n	8001c2e <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001c0e:	2b40      	cmp	r3, #64	@ 0x40
 8001c10:	d90c      	bls.n	8001c2c <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001c18:	2b5a      	cmp	r3, #90	@ 0x5a
 8001c1a:	d807      	bhi.n	8001c2c <prv_check_crc+0x70>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001c22:	3b37      	subs	r3, #55	@ 0x37
 8001c24:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	e000      	b.n	8001c2e <prv_check_crc+0x72>
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c34:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c36:	d90b      	bls.n	8001c50 <prv_check_crc+0x94>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c3e:	2b39      	cmp	r3, #57	@ 0x39
 8001c40:	d806      	bhi.n	8001c50 <prv_check_crc+0x94>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e026      	b.n	8001c9e <prv_check_crc+0xe2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c56:	2b60      	cmp	r3, #96	@ 0x60
 8001c58:	d90d      	bls.n	8001c76 <prv_check_crc+0xba>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c60:	2b7a      	cmp	r3, #122	@ 0x7a
 8001c62:	d808      	bhi.n	8001c76 <prv_check_crc+0xba>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c6a:	3b57      	subs	r3, #87	@ 0x57
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e013      	b.n	8001c9e <prv_check_crc+0xe2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c7c:	2b40      	cmp	r3, #64	@ 0x40
 8001c7e:	d90d      	bls.n	8001c9c <prv_check_crc+0xe0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c86:	2b5a      	cmp	r3, #90	@ 0x5a
 8001c88:	d808      	bhi.n	8001c9c <prv_check_crc+0xe0>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c90:	3b37      	subs	r3, #55	@ 0x37
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e000      	b.n	8001c9e <prv_check_crc+0xe2>
 8001c9c:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d13c      	bne.n	8001d4c <prv_copy_from_tmp_memory+0x8c>
        ghandle->latitude = ghandle->p.data.gga.latitude;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	e9c1 2300 	strd	r2, r3, [r1]
        ghandle->longitude = ghandle->p.data.gga.longitude;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        ghandle->altitude = ghandle->p.data.gga.altitude;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]
        ghandle->fix = ghandle->p.data.gga.fix;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        ghandle->minutes = ghandle->p.data.gga.minutes;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 20b3 	ldrb.w	r2, [r3, #179]	@ 0xb3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        ghandle->seconds = ghandle->p.data.gga.seconds;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        ghandle->dgps_age = ghandle->p.data.gga.dgps_age;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 8001d4a:	e061      	b.n	8001e10 <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d121      	bne.n	8001d9a <prv_copy_from_tmp_memory+0xda>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f103 0049 	add.w	r0, r3, #73	@ 0x49
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	33a9      	adds	r3, #169	@ 0xa9
 8001d90:	220c      	movs	r2, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	f008 fe2e 	bl	800a9f4 <memcpy>
 8001d98:	e03a      	b.n	8001e10 <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d106      	bne.n	8001db2 <prv_copy_from_tmp_memory+0xf2>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 8001db0:	e02e      	b.n	8001e10 <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d129      	bne.n	8001e10 <prv_copy_from_tmp_memory+0x150>
        ghandle->course = ghandle->p.data.rmc.course;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        ghandle->speed = ghandle->p.data.rmc.speed;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        ghandle->variation = ghandle->p.data.rmc.variation;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
        ghandle->date = ghandle->p.data.rmc.date;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        ghandle->month = ghandle->p.data.rmc.month;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        ghandle->year = ghandle->p.data.rmc.year;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 8001e22:	22c0      	movs	r2, #192	@ 0xc0
 8001e24:	2100      	movs	r1, #0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f008 fdb7 	bl	800a99a <memset>
    return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001e46:	e0ad      	b.n	8001fa4 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b24      	cmp	r3, #36	@ 0x24
 8001e4e:	d128      	bne.n	8001ea2 <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3378      	adds	r3, #120	@ 0x78
 8001e54:	2248      	movs	r2, #72	@ 0x48
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f008 fd9e 	bl	800a99a <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e64:	2b0b      	cmp	r3, #11
 8001e66:	f200 8097 	bhi.w	8001f98 <lwgps_process+0x162>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e70:	4619      	mov	r1, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	440b      	add	r3, r1
 8001e7a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e84:	3301      	adds	r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e94:	461a      	mov	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001ea0:	e07a      	b.n	8001f98 <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ea8:	d11d      	bne.n	8001ee6 <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff fbca 	bl	8001644 <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4053      	eors	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001ee4:	e058      	b.n	8001f98 <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8001eec:	d117      	bne.n	8001f1e <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7ff fba8 	bl	8001644 <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001f1c:	e03c      	b.n	8001f98 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b0d      	cmp	r3, #13
 8001f24:	d109      	bne.n	8001f3a <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff fe48 	bl	8001bbc <prv_check_crc>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d032      	beq.n	8001f98 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fec4 	bl	8001cc0 <prv_copy_from_tmp_memory>
 8001f38:	e02e      	b.n	8001f98 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	4053      	eors	r3, r2
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f5e:	2b0b      	cmp	r3, #11
 8001f60:	d81a      	bhi.n	8001f98 <lwgps_process+0x162>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f68:	4619      	mov	r1, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	440b      	add	r3, r1
 8001f72:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f af4e 	bne.w	8001e48 <lwgps_process+0x12>
        }
    }
    return 1;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b090      	sub	sp, #64	@ 0x40
 8001fbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fbe:	f000 fdcb 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc2:	f000 f8eb 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc6:	f000 f9ab 	bl	8002320 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fca:	f000 f951 	bl	8002270 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001fce:	f000 f97d 	bl	80022cc <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8001fd2:	4863      	ldr	r0, [pc, #396]	@ (8002160 <main+0x1a8>)
 8001fd4:	f006 fa56 	bl	8008484 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8001fd8:	4b62      	ldr	r3, [pc, #392]	@ (8002164 <main+0x1ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a61      	ldr	r2, [pc, #388]	@ (8002164 <main+0x1ac>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8001fe4:	f005 ffbc 	bl	8007f60 <SEGGER_SYSVIEW_Conf>

  /* Initialize LCD */
  LCD_Init();
 8001fe8:	f7fe ffdc 	bl	8000fa4 <LCD_Init>

  /* Creating a binary semaphore */
  vSemaphoreCreateBinary(xBinarySemaphore);
 8001fec:	2203      	movs	r2, #3
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f003 fe29 	bl	8005c48 <xQueueGenericCreate>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8002168 <main+0x1b0>)
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8002168 <main+0x1b0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <main+0x5a>
 8002004:	4b58      	ldr	r3, [pc, #352]	@ (8002168 <main+0x1b0>)
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	2300      	movs	r3, #0
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	f003 fea7 	bl	8005d60 <xQueueGenericSend>

  /* Tasks Creation */
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8002012:	f107 0318 	add.w	r3, r7, #24
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	22c8      	movs	r2, #200	@ 0xc8
 8002020:	4952      	ldr	r1, [pc, #328]	@ (800216c <main+0x1b4>)
 8002022:	4853      	ldr	r0, [pc, #332]	@ (8002170 <main+0x1b8>)
 8002024:	f004 f9d4 	bl	80063d0 <xTaskCreate>
 8002028:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 800202a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202c:	2b01      	cmp	r3, #1
 800202e:	d00b      	beq.n	8002048 <main+0x90>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <main+0x8c>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2302      	movs	r3, #2
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	22c8      	movs	r2, #200	@ 0xc8
 8002056:	4947      	ldr	r1, [pc, #284]	@ (8002174 <main+0x1bc>)
 8002058:	4847      	ldr	r0, [pc, #284]	@ (8002178 <main+0x1c0>)
 800205a:	f004 f9b9 	bl	80063d0 <xTaskCreate>
 800205e:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8002060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00b      	beq.n	800207e <main+0xc6>
        __asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <main+0xc2>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2302      	movs	r3, #2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2300      	movs	r3, #0
 800208a:	22c8      	movs	r2, #200	@ 0xc8
 800208c:	493b      	ldr	r1, [pc, #236]	@ (800217c <main+0x1c4>)
 800208e:	483c      	ldr	r0, [pc, #240]	@ (8002180 <main+0x1c8>)
 8002090:	f004 f99e 	bl	80063d0 <xTaskCreate>
 8002094:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8002096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002098:	2b01      	cmp	r3, #1
 800209a:	d00b      	beq.n	80020b4 <main+0xfc>
        __asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <main+0xf8>

  status = xTaskCreate(lcd_task_handler, "LCD_task", 256, NULL, 2, &task4_handle);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c4:	492f      	ldr	r1, [pc, #188]	@ (8002184 <main+0x1cc>)
 80020c6:	4830      	ldr	r0, [pc, #192]	@ (8002188 <main+0x1d0>)
 80020c8:	f004 f982 	bl	80063d0 <xTaskCreate>
 80020cc:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 80020ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d00b      	beq.n	80020ec <main+0x134>
        __asm volatile
 80020d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020d8:	f383 8811 	msr	BASEPRI, r3
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	f3bf 8f4f 	dsb	sy
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <main+0x130>

  status = xTaskCreate(gps_data_receive_handler, "GPS_receive", 200, NULL, 2, &task5_handle);
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	2302      	movs	r3, #2
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2300      	movs	r3, #0
 80020f8:	22c8      	movs	r2, #200	@ 0xc8
 80020fa:	4924      	ldr	r1, [pc, #144]	@ (800218c <main+0x1d4>)
 80020fc:	4824      	ldr	r0, [pc, #144]	@ (8002190 <main+0x1d8>)
 80020fe:	f004 f967 	bl	80063d0 <xTaskCreate>
 8002102:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8002104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002106:	2b01      	cmp	r3, #1
 8002108:	d00b      	beq.n	8002122 <main+0x16a>
        __asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	623b      	str	r3, [r7, #32]
    }
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	e7fd      	b.n	800211e <main+0x166>

  status = xTaskCreate(gps_data_process_handler, "GPS_data_process", 200, NULL, 2, &task6_handle);
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	22c8      	movs	r2, #200	@ 0xc8
 800212e:	4919      	ldr	r1, [pc, #100]	@ (8002194 <main+0x1dc>)
 8002130:	4819      	ldr	r0, [pc, #100]	@ (8002198 <main+0x1e0>)
 8002132:	f004 f94d 	bl	80063d0 <xTaskCreate>
 8002136:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8002138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213a:	2b01      	cmp	r3, #1
 800213c:	d00b      	beq.n	8002156 <main+0x19e>
        __asm volatile
 800213e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	61fb      	str	r3, [r7, #28]
    }
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	e7fd      	b.n	8002152 <main+0x19a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8002156:	f004 fbcd 	bl	80068f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800215a:	bf00      	nop
 800215c:	e7fd      	b.n	800215a <main+0x1a2>
 800215e:	bf00      	nop
 8002160:	0007a120 	.word	0x0007a120
 8002164:	e0001000 	.word	0xe0001000
 8002168:	20000324 	.word	0x20000324
 800216c:	0800aa84 	.word	0x0800aa84
 8002170:	080025bd 	.word	0x080025bd
 8002174:	0800aa94 	.word	0x0800aa94
 8002178:	08002649 	.word	0x08002649
 800217c:	0800aaa4 	.word	0x0800aaa4
 8002180:	0800260d 	.word	0x0800260d
 8002184:	0800aab4 	.word	0x0800aab4
 8002188:	08002699 	.word	0x08002699
 800218c:	0800aac0 	.word	0x0800aac0
 8002190:	080026f9 	.word	0x080026f9
 8002194:	0800aacc 	.word	0x0800aacc
 8002198:	08002759 	.word	0x08002759

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	@ 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	2230      	movs	r2, #48	@ 0x30
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 fbf5 	bl	800a99a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <SystemClock_Config+0xcc>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a27      	ldr	r2, [pc, #156]	@ (8002268 <SystemClock_Config+0xcc>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d0:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <SystemClock_Config+0xcc>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	4b22      	ldr	r3, [pc, #136]	@ (800226c <SystemClock_Config+0xd0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a21      	ldr	r2, [pc, #132]	@ (800226c <SystemClock_Config+0xd0>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <SystemClock_Config+0xd0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021fc:	2301      	movs	r3, #1
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002200:	2310      	movs	r3, #16
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002204:	2302      	movs	r3, #2
 8002206:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800220c:	2308      	movs	r3, #8
 800220e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002210:	23a8      	movs	r3, #168	@ 0xa8
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002214:	2302      	movs	r3, #2
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002218:	2307      	movs	r3, #7
 800221a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fd4d 	bl	8003cc0 <HAL_RCC_OscConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800222c:	f000 fb00 	bl	8002830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002230:	230f      	movs	r3, #15
 8002232:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002234:	2302      	movs	r3, #2
 8002236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800223c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002246:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	2105      	movs	r1, #5
 800224e:	4618      	mov	r0, r3
 8002250:	f001 ffa4 	bl	800419c <HAL_RCC_ClockConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800225a:	f000 fae9 	bl	8002830 <Error_Handler>
  }
}
 800225e:	bf00      	nop
 8002260:	3750      	adds	r7, #80	@ 0x50
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000

08002270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <MX_I2C1_Init+0x50>)
 8002276:	4a13      	ldr	r2, [pc, #76]	@ (80022c4 <MX_I2C1_Init+0x54>)
 8002278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_I2C1_Init+0x50>)
 800227c:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <MX_I2C1_Init+0x58>)
 800227e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <MX_I2C1_Init+0x50>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_I2C1_Init+0x50>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_I2C1_Init+0x50>)
 800228e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <MX_I2C1_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_I2C1_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <MX_I2C1_Init+0x50>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_I2C1_Init+0x50>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <MX_I2C1_Init+0x50>)
 80022ae:	f000 ff8d 	bl	80031cc <HAL_I2C_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022b8:	f000 faba 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000154 	.word	0x20000154
 80022c4:	40005400 	.word	0x40005400
 80022c8:	000186a0 	.word	0x000186a0

080022cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <MX_USART3_UART_Init+0x50>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	@ (8002318 <MX_USART3_UART_Init+0x4c>)
 8002304:	f002 fbda 	bl	8004abc <HAL_UART_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800230e:	f000 fa8f 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200001a8 	.word	0x200001a8
 800231c:	40004800 	.word	0x40004800

08002320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	4b98      	ldr	r3, [pc, #608]	@ (800259c <MX_GPIO_Init+0x27c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a97      	ldr	r2, [pc, #604]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b95      	ldr	r3, [pc, #596]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b91      	ldr	r3, [pc, #580]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a90      	ldr	r2, [pc, #576]	@ (800259c <MX_GPIO_Init+0x27c>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b8e      	ldr	r3, [pc, #568]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b8a      	ldr	r3, [pc, #552]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a89      	ldr	r2, [pc, #548]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b87      	ldr	r3, [pc, #540]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b83      	ldr	r3, [pc, #524]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a82      	ldr	r2, [pc, #520]	@ (800259c <MX_GPIO_Init+0x27c>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b80      	ldr	r3, [pc, #512]	@ (800259c <MX_GPIO_Init+0x27c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b7c      	ldr	r3, [pc, #496]	@ (800259c <MX_GPIO_Init+0x27c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a7b      	ldr	r2, [pc, #492]	@ (800259c <MX_GPIO_Init+0x27c>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b79      	ldr	r3, [pc, #484]	@ (800259c <MX_GPIO_Init+0x27c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b75      	ldr	r3, [pc, #468]	@ (800259c <MX_GPIO_Init+0x27c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a74      	ldr	r2, [pc, #464]	@ (800259c <MX_GPIO_Init+0x27c>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b72      	ldr	r3, [pc, #456]	@ (800259c <MX_GPIO_Init+0x27c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	2108      	movs	r1, #8
 80023e2:	486f      	ldr	r0, [pc, #444]	@ (80025a0 <MX_GPIO_Init+0x280>)
 80023e4:	f000 febe 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2101      	movs	r1, #1
 80023ec:	486d      	ldr	r0, [pc, #436]	@ (80025a4 <MX_GPIO_Init+0x284>)
 80023ee:	f000 feb9 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023f2:	2200      	movs	r2, #0
 80023f4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80023f8:	486b      	ldr	r0, [pc, #428]	@ (80025a8 <MX_GPIO_Init+0x288>)
 80023fa:	f000 feb3 	bl	8003164 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80023fe:	2308      	movs	r3, #8
 8002400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	4619      	mov	r1, r3
 8002414:	4862      	ldr	r0, [pc, #392]	@ (80025a0 <MX_GPIO_Init+0x280>)
 8002416:	f000 fd09 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800241a:	2301      	movs	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	485c      	ldr	r0, [pc, #368]	@ (80025a4 <MX_GPIO_Init+0x284>)
 8002432:	f000 fcfb 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002436:	2308      	movs	r3, #8
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002446:	2305      	movs	r3, #5
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	4854      	ldr	r0, [pc, #336]	@ (80025a4 <MX_GPIO_Init+0x284>)
 8002452:	f000 fceb 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002456:	2301      	movs	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800245a:	4b54      	ldr	r3, [pc, #336]	@ (80025ac <MX_GPIO_Init+0x28c>)
 800245c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	4851      	ldr	r0, [pc, #324]	@ (80025b0 <MX_GPIO_Init+0x290>)
 800246a:	f000 fcdf 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800246e:	2310      	movs	r3, #16
 8002470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800247e:	2306      	movs	r3, #6
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4849      	ldr	r0, [pc, #292]	@ (80025b0 <MX_GPIO_Init+0x290>)
 800248a:	f000 fccf 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800248e:	23e0      	movs	r3, #224	@ 0xe0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800249e:	2305      	movs	r3, #5
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4841      	ldr	r0, [pc, #260]	@ (80025b0 <MX_GPIO_Init+0x290>)
 80024aa:	f000 fcbf 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80024ae:	2304      	movs	r3, #4
 80024b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	483c      	ldr	r0, [pc, #240]	@ (80025b4 <MX_GPIO_Init+0x294>)
 80024c2:	f000 fcb3 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80024c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024d8:	2305      	movs	r3, #5
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	4619      	mov	r1, r3
 80024e2:	4834      	ldr	r0, [pc, #208]	@ (80025b4 <MX_GPIO_Init+0x294>)
 80024e4:	f000 fca2 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80024e8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80024ec:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	4619      	mov	r1, r3
 8002500:	4829      	ldr	r0, [pc, #164]	@ (80025a8 <MX_GPIO_Init+0x288>)
 8002502:	f000 fc93 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002506:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002518:	2306      	movs	r3, #6
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	4820      	ldr	r0, [pc, #128]	@ (80025a4 <MX_GPIO_Init+0x284>)
 8002524:	f000 fc82 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	481c      	ldr	r0, [pc, #112]	@ (80025b0 <MX_GPIO_Init+0x290>)
 800253e:	f000 fc75 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002542:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002554:	230a      	movs	r3, #10
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4814      	ldr	r0, [pc, #80]	@ (80025b0 <MX_GPIO_Init+0x290>)
 8002560:	f000 fc64 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002564:	2320      	movs	r3, #32
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <MX_GPIO_Init+0x288>)
 8002578:	f000 fc58 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800257c:	2302      	movs	r3, #2
 800257e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002580:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <MX_GPIO_Init+0x298>)
 8002582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_GPIO_Init+0x280>)
 8002590:	f000 fc4c 	bl	8002e2c <HAL_GPIO_Init>

}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	@ 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	10110000 	.word	0x10110000
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40020400 	.word	0x40020400
 80025b8:	10120000 	.word	0x10120000

080025bc <led_green_handler>:

/* USER CODE BEGIN 4 */

// Green LED
static void led_green_handler(void* parameters)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80025c4:	f004 faa2 	bl	8006b0c <xTaskGetTickCount>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		if (gps_data.valid_status == 1) {
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <led_green_handler+0x44>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <led_green_handler+0x2a>
		    SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80025d4:	480b      	ldr	r0, [pc, #44]	@ (8002604 <led_green_handler+0x48>)
 80025d6:	f008 f913 	bl	800a800 <SEGGER_SYSVIEW_PrintfTarget>
		    HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80025da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025de:	480a      	ldr	r0, [pc, #40]	@ (8002608 <led_green_handler+0x4c>)
 80025e0:	f000 fdd9 	bl	8003196 <HAL_GPIO_TogglePin>
 80025e4:	e005      	b.n	80025f2 <led_green_handler+0x36>
		} else {
		    HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_RESET); // Green LED off
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025ec:	4806      	ldr	r0, [pc, #24]	@ (8002608 <led_green_handler+0x4c>)
 80025ee:	f000 fdb9 	bl	8003164 <HAL_GPIO_WritePin>
		}

        vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(200)); // 400ms
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	21c8      	movs	r1, #200	@ 0xc8
 80025f8:	4618      	mov	r0, r3
 80025fa:	f004 f8f7 	bl	80067ec <xTaskDelayUntil>
		if (gps_data.valid_status == 1) {
 80025fe:	e7e5      	b.n	80025cc <led_green_handler+0x10>
 8002600:	200002f0 	.word	0x200002f0
 8002604:	0800aae0 	.word	0x0800aae0
 8002608:	40020c00 	.word	0x40020c00

0800260c <led_orange_handler>:
	}
}

// Orange LED
static void led_orange_handler(void* parameters)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8002614:	f004 fa7a 	bl	8006b0c <xTaskGetTickCount>
 8002618:	4603      	mov	r3, r0
 800261a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800261c:	4808      	ldr	r0, [pc, #32]	@ (8002640 <led_orange_handler+0x34>)
 800261e:	f008 f8ef 	bl	800a800 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8002622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002626:	4807      	ldr	r0, [pc, #28]	@ (8002644 <led_orange_handler+0x38>)
 8002628:	f000 fdb5 	bl	8003196 <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(600)); // 400ms
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8002634:	4618      	mov	r0, r3
 8002636:	f004 f8d9 	bl	80067ec <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800263a:	bf00      	nop
 800263c:	e7ee      	b.n	800261c <led_orange_handler+0x10>
 800263e:	bf00      	nop
 8002640:	0800aaf4 	.word	0x0800aaf4
 8002644:	40020c00 	.word	0x40020c00

08002648 <led_red_handler>:
	}
}

// Red LED
static void led_red_handler(void* parameters)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8002650:	f004 fa5c 	bl	8006b0c <xTaskGetTickCount>
 8002654:	4603      	mov	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		if (gps_data.valid_status != 1) {
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <led_red_handler+0x44>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d008      	beq.n	8002672 <led_red_handler+0x2a>
		    SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8002660:	480b      	ldr	r0, [pc, #44]	@ (8002690 <led_red_handler+0x48>)
 8002662:	f008 f8cd 	bl	800a800 <SEGGER_SYSVIEW_PrintfTarget>
		    HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8002666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800266a:	480a      	ldr	r0, [pc, #40]	@ (8002694 <led_red_handler+0x4c>)
 800266c:	f000 fd93 	bl	8003196 <HAL_GPIO_TogglePin>
 8002670:	e005      	b.n	800267e <led_red_handler+0x36>
		} else {
		    HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_RESET); // Red LED off
 8002672:	2200      	movs	r2, #0
 8002674:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002678:	4806      	ldr	r0, [pc, #24]	@ (8002694 <led_red_handler+0x4c>)
 800267a:	f000 fd73 	bl	8003164 <HAL_GPIO_WritePin>
		}

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(200)); // 400ms
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	21c8      	movs	r1, #200	@ 0xc8
 8002684:	4618      	mov	r0, r3
 8002686:	f004 f8b1 	bl	80067ec <xTaskDelayUntil>
		if (gps_data.valid_status != 1) {
 800268a:	e7e5      	b.n	8002658 <led_red_handler+0x10>
 800268c:	200002f0 	.word	0x200002f0
 8002690:	0800ab08 	.word	0x0800ab08
 8002694:	40020c00 	.word	0x40020c00

08002698 <lcd_task_handler>:


#define TEST_MSG 1
// LCD screen
static void lcd_task_handler(void* parameters)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80026a0:	f004 fa34 	bl	8006b0c <xTaskGetTickCount>
 80026a4:	4603      	mov	r3, r0
 80026a6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LCD screen output.");
 80026a8:	4810      	ldr	r0, [pc, #64]	@ (80026ec <lcd_task_handler+0x54>)
 80026aa:	f008 f8a9 	bl	800a800 <SEGGER_SYSVIEW_PrintfTarget>

		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <lcd_task_handler+0x58>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fc62 	bl	8005f80 <xQueueSemaphoreTake>

#if TEST_MSG
		//LCD_Send_String(gps_raw_data);
		LCD_Display_Long_Message(gps_raw_data);
 80026bc:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <lcd_task_handler+0x5c>)
 80026be:	f7fe fc8f 	bl	8000fe0 <LCD_Display_Long_Message>
			LCD_Send_String("not available.");
		}
#endif

		// Clear the gps_raw_data
		clear_GPS_buffer();
 80026c2:	f000 f897 	bl	80027f4 <clear_GPS_buffer>

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // 1000ms
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026ce:	4618      	mov	r0, r3
 80026d0:	f004 f88c 	bl	80067ec <xTaskDelayUntil>

		xSemaphoreGive(xBinarySemaphore);
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <lcd_task_handler+0x58>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	f003 fb3f 	bl	8005d60 <xQueueGenericSend>

		vTaskDelete(NULL);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f003 ffd8 	bl	8006698 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("LCD screen output.");
 80026e8:	bf00      	nop
 80026ea:	e7dd      	b.n	80026a8 <lcd_task_handler+0x10>
 80026ec:	0800ab1c 	.word	0x0800ab1c
 80026f0:	20000324 	.word	0x20000324
 80026f4:	200001e8 	.word	0x200001e8

080026f8 <gps_data_receive_handler>:
	}
}

// GPS data receive
static void gps_data_receive_handler(void* parameters)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    TickType_t last_wakeup_time;
    last_wakeup_time = xTaskGetTickCount();
 8002700:	f004 fa04 	bl	8006b0c <xTaskGetTickCount>
 8002704:	4603      	mov	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        SEGGER_SYSVIEW_PrintfTarget("GPS data receive.");
 8002708:	480f      	ldr	r0, [pc, #60]	@ (8002748 <gps_data_receive_handler+0x50>)
 800270a:	f008 f879 	bl	800a800 <SEGGER_SYSVIEW_PrintfTarget>

        xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 800270e:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <gps_data_receive_handler+0x54>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fc32 	bl	8005f80 <xQueueSemaphoreTake>

        // Enable UART interrupt reception
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_char, 1);
 800271c:	2201      	movs	r2, #1
 800271e:	490c      	ldr	r1, [pc, #48]	@ (8002750 <gps_data_receive_handler+0x58>)
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <gps_data_receive_handler+0x5c>)
 8002722:	f002 fa18 	bl	8004b56 <HAL_UART_Receive_IT>

        xSemaphoreGive(xBinarySemaphore);
 8002726:	4b09      	ldr	r3, [pc, #36]	@ (800274c <gps_data_receive_handler+0x54>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	2300      	movs	r3, #0
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	f003 fb16 	bl	8005d60 <xQueueGenericSend>

        vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // 1000ms
 8002734:	f107 030c 	add.w	r3, r7, #12
 8002738:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800273c:	4618      	mov	r0, r3
 800273e:	f004 f855 	bl	80067ec <xTaskDelayUntil>
        SEGGER_SYSVIEW_PrintfTarget("GPS data receive.");
 8002742:	bf00      	nop
 8002744:	e7e0      	b.n	8002708 <gps_data_receive_handler+0x10>
 8002746:	bf00      	nop
 8002748:	0800ab30 	.word	0x0800ab30
 800274c:	20000324 	.word	0x20000324
 8002750:	200002ec 	.word	0x200002ec
 8002754:	200001a8 	.word	0x200001a8

08002758 <gps_data_process_handler>:
    }
}

//GPS data process
static void gps_data_process_handler(void* parameters)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8002760:	f004 f9d4 	bl	8006b0c <xTaskGetTickCount>
 8002764:	4603      	mov	r3, r0
 8002766:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("GPS data process.");
 8002768:	4808      	ldr	r0, [pc, #32]	@ (800278c <gps_data_process_handler+0x34>)
 800276a:	f008 f849 	bl	800a800 <SEGGER_SYSVIEW_PrintfTarget>

		gps_data_struct *gps_data_prt = &gps_data;
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <gps_data_process_handler+0x38>)
 8002770:	60fb      	str	r3, [r7, #12]

		// Extraction the GPS data.
		gps_data_extrac(gps_data_prt, gps_raw_data);
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <gps_data_process_handler+0x3c>)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7fe fc83 	bl	8001080 <gps_data_extrac>

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400)); // 400ms
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002782:	4618      	mov	r0, r3
 8002784:	f004 f832 	bl	80067ec <xTaskDelayUntil>
	{
 8002788:	bf00      	nop
 800278a:	e7ed      	b.n	8002768 <gps_data_process_handler+0x10>
 800278c:	0800ab44 	.word	0x0800ab44
 8002790:	200002f0 	.word	0x200002f0
 8002794:	200001e8 	.word	0x200001e8

08002798 <HAL_UART_RxCpltCallback>:
}


/* Callback for UART receive interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0e      	ldr	r2, [pc, #56]	@ (80027e0 <HAL_UART_RxCpltCallback+0x48>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d115      	bne.n	80027d6 <HAL_UART_RxCpltCallback+0x3e>
		if (gps_raw_index < GPS_DATA_LENGTH) {
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_UART_RxCpltCallback+0x4c>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2bff      	cmp	r3, #255	@ 0xff
 80027b2:	d80b      	bhi.n	80027cc <HAL_UART_RxCpltCallback+0x34>
		    gps_raw_data[gps_raw_index++] = rx_char;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_UART_RxCpltCallback+0x4c>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	b291      	uxth	r1, r2
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_UART_RxCpltCallback+0x4c>)
 80027c0:	8011      	strh	r1, [r2, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <HAL_UART_RxCpltCallback+0x50>)
 80027c6:	7819      	ldrb	r1, [r3, #0]
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_UART_RxCpltCallback+0x54>)
 80027ca:	5499      	strb	r1, [r3, r2]
		}
	    //gps_raw_data[gps_raw_index] = '\0'; // End with '\0'

	    // Receive next byte
	    HAL_UART_Receive_IT(&huart3, &rx_char, 1);
 80027cc:	2201      	movs	r2, #1
 80027ce:	4906      	ldr	r1, [pc, #24]	@ (80027e8 <HAL_UART_RxCpltCallback+0x50>)
 80027d0:	4807      	ldr	r0, [pc, #28]	@ (80027f0 <HAL_UART_RxCpltCallback+0x58>)
 80027d2:	f002 f9c0 	bl	8004b56 <HAL_UART_Receive_IT>
    }
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40004800 	.word	0x40004800
 80027e4:	200002ea 	.word	0x200002ea
 80027e8:	200002ec 	.word	0x200002ec
 80027ec:	200001e8 	.word	0x200001e8
 80027f0:	200001a8 	.word	0x200001a8

080027f4 <clear_GPS_buffer>:

/* Clear GPS data buffer */
void clear_GPS_buffer(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
    // memset(gps_raw_data, 0, sizeof(gps_raw_data));
    gps_raw_index = 0;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <clear_GPS_buffer+0x14>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	200002ea 	.word	0x200002ea

0800280c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800281e:	f000 f9bd 	bl	8002b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40001000 	.word	0x40001000

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_MspInit+0x4c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <HAL_MspInit+0x4c>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002854:	6453      	str	r3, [r2, #68]	@ 0x44
 8002856:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_MspInit+0x4c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_MspInit+0x4c>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	4a08      	ldr	r2, [pc, #32]	@ (800288c <HAL_MspInit+0x4c>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	@ 0x40
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_MspInit+0x4c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800287e:	f004 ffad 	bl	80077dc <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_I2C_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12b      	bne.n	800290a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <HAL_I2C_MspInit+0x88>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <HAL_I2C_MspInit+0x88>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_I2C_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ce:	23c0      	movs	r3, #192	@ 0xc0
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d2:	2312      	movs	r3, #18
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028de:	2304      	movs	r3, #4
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	@ (800291c <HAL_I2C_MspInit+0x8c>)
 80028ea:	f000 fa9f 	bl	8002e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_I2C_MspInit+0x88>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a08      	ldr	r2, [pc, #32]	@ (8002918 <HAL_I2C_MspInit+0x88>)
 80028f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_I2C_MspInit+0x88>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	@ 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40005400 	.word	0x40005400
 8002918:	40023800 	.word	0x40023800
 800291c:	40020400 	.word	0x40020400

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_UART_MspInit+0x94>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d134      	bne.n	80029ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <HAL_UART_MspInit+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_UART_MspInit+0x98>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_UART_MspInit+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_UART_MspInit+0x98>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <HAL_UART_MspInit+0x98>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <HAL_UART_MspInit+0x98>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800297a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800297e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800298c:	2307      	movs	r3, #7
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4809      	ldr	r0, [pc, #36]	@ (80029bc <HAL_UART_MspInit+0x9c>)
 8002998:	f000 fa48 	bl	8002e2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	2027      	movs	r0, #39	@ 0x27
 80029a2:	f000 f9f7 	bl	8002d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029a6:	2027      	movs	r0, #39	@ 0x27
 80029a8:	f000 fa10 	bl	8002dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3728      	adds	r7, #40	@ 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40004800 	.word	0x40004800
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020c00 	.word	0x40020c00

080029c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	@ 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	2036      	movs	r0, #54	@ 0x36
 80029d6:	f000 f9dd 	bl	8002d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029da:	2036      	movs	r0, #54	@ 0x36
 80029dc:	f000 f9f6 	bl	8002dcc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <HAL_InitTick+0xa4>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_InitTick+0xa4>)
 80029ea:	f043 0310 	orr.w	r3, r3, #16
 80029ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_InitTick+0xa4>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029fc:	f107 0210 	add.w	r2, r7, #16
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fde8 	bl	80045dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a0c:	f001 fdbe 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8002a10:	4603      	mov	r3, r0
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a18:	4a13      	ldr	r2, [pc, #76]	@ (8002a68 <HAL_InitTick+0xa8>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	3b01      	subs	r3, #1
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	@ (8002a70 <HAL_InitTick+0xb0>)
 8002a28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a32:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a44:	4809      	ldr	r0, [pc, #36]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a46:	f001 fdfb 	bl	8004640 <HAL_TIM_Base_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a50:	4806      	ldr	r0, [pc, #24]	@ (8002a6c <HAL_InitTick+0xac>)
 8002a52:	f001 fe2a 	bl	80046aa <HAL_TIM_Base_Start_IT>
 8002a56:	4603      	mov	r3, r0
 8002a58:	e000      	b.n	8002a5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3730      	adds	r7, #48	@ 0x30
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	431bde83 	.word	0x431bde83
 8002a6c:	20000328 	.word	0x20000328
 8002a70:	40001000 	.word	0x40001000

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <HardFault_Handler+0x4>

08002a8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <MemManage_Handler+0x4>

08002a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a96:	bf00      	nop
 8002a98:	e7fd      	b.n	8002a96 <BusFault_Handler+0x4>

08002a9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <UsageFault_Handler+0x4>

08002aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <USART3_IRQHandler+0x10>)
 8002ab6:	f002 f8a3 	bl	8004c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200001a8 	.word	0x200001a8

08002ac4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <TIM6_DAC_IRQHandler+0x10>)
 8002aca:	f001 fe12 	bl	80046f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000328 	.word	0x20000328

08002ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <SystemInit+0x28>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <SystemInit+0x28>)
 8002ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <SystemInit+0x28>)
 8002aee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002af2:	609a      	str	r2, [r3, #8]
#endif
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0a:	e003      	b.n	8002b14 <LoopCopyDataInit>

08002b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b12:	3104      	adds	r1, #4

08002b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b14:	480b      	ldr	r0, [pc, #44]	@ (8002b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b16:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b1c:	d3f6      	bcc.n	8002b0c <CopyDataInit>
  ldr  r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b20:	e002      	b.n	8002b28 <LoopFillZerobss>

08002b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b24:	f842 3b04 	str.w	r3, [r2], #4

08002b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b2c:	d3f9      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b2e:	f7ff ffd3 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f007 ff3b 	bl	800a9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7ff fa3f 	bl	8001fb8 <main>
  bx  lr    
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b40:	0800ae1c 	.word	0x0800ae1c
  ldr  r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b48:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002b4c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8002b50:	2001ab18 	.word	0x2001ab18

08002b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC_IRQHandler>
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_Init+0x40>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	@ (8002b98 <HAL_Init+0x40>)
 8002b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <HAL_Init+0x40>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <HAL_Init+0x40>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b80:	2003      	movs	r0, #3
 8002b82:	f000 f8fc 	bl	8002d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff ff1a 	bl	80029c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8c:	f7ff fe58 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00

08002b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_IncTick+0x20>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_IncTick+0x24>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <HAL_IncTick+0x24>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	20000368 	.word	0x20000368

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000368 	.word	0x20000368

08002bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff ffee 	bl	8002bc4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf4:	d005      	beq.n	8002c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_Delay+0x44>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c02:	bf00      	nop
 8002c04:	f7ff ffde 	bl	8002bc4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8f7      	bhi.n	8002c04 <HAL_Delay+0x28>
  {
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000008 	.word	0x20000008

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	@ (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	@ (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	@ (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	@ 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff4c 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da6:	f7ff ff61 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	6978      	ldr	r0, [r7, #20]
 8002db2:	f7ff ffb1 	bl	8002d18 <NVIC_EncodePriority>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff80 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff54 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2280      	movs	r2, #128	@ 0x80
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00c      	b.n	8002e20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	e16b      	b.n	8003120 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 815a 	bne.w	800311a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d00b      	beq.n	8002e86 <HAL_GPIO_Init+0x5a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e7a:	2b11      	cmp	r3, #17
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b12      	cmp	r3, #18
 8002e84:	d130      	bne.n	8002ee8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 0201 	and.w	r2, r3, #1
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0xfc>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d123      	bne.n	8002f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	220f      	movs	r2, #15
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80b4 	beq.w	800311a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b60      	ldr	r3, [pc, #384]	@ (8003138 <HAL_GPIO_Init+0x30c>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	4a5f      	ldr	r2, [pc, #380]	@ (8003138 <HAL_GPIO_Init+0x30c>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <HAL_GPIO_Init+0x30c>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fce:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <HAL_GPIO_Init+0x310>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_GPIO_Init+0x314>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02b      	beq.n	8003052 <HAL_GPIO_Init+0x226>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a51      	ldr	r2, [pc, #324]	@ (8003144 <HAL_GPIO_Init+0x318>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d025      	beq.n	800304e <HAL_GPIO_Init+0x222>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a50      	ldr	r2, [pc, #320]	@ (8003148 <HAL_GPIO_Init+0x31c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01f      	beq.n	800304a <HAL_GPIO_Init+0x21e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4f      	ldr	r2, [pc, #316]	@ (800314c <HAL_GPIO_Init+0x320>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_Init+0x21a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4e      	ldr	r2, [pc, #312]	@ (8003150 <HAL_GPIO_Init+0x324>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0x216>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4d      	ldr	r2, [pc, #308]	@ (8003154 <HAL_GPIO_Init+0x328>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_Init+0x212>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4c      	ldr	r2, [pc, #304]	@ (8003158 <HAL_GPIO_Init+0x32c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4b      	ldr	r2, [pc, #300]	@ (800315c <HAL_GPIO_Init+0x330>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_Init+0x20a>
 8003032:	2307      	movs	r3, #7
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003036:	2308      	movs	r3, #8
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x228>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x228>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	@ (800313c <HAL_GPIO_Init+0x310>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003072:	4b3b      	ldr	r3, [pc, #236]	@ (8003160 <HAL_GPIO_Init+0x334>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <HAL_GPIO_Init+0x334>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800309c:	4b30      	ldr	r3, [pc, #192]	@ (8003160 <HAL_GPIO_Init+0x334>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c0:	4a27      	ldr	r2, [pc, #156]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <HAL_GPIO_Init+0x334>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <HAL_GPIO_Init+0x334>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae90 	bls.w	8002e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40021c00 	.word	0x40021c00
 8003160:	40013c00 	.word	0x40013c00

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003180:	e003      	b.n	800318a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	619a      	str	r2, [r3, #24]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	401a      	ands	r2, r3
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d104      	bne.n	80031ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e12b      	b.n	8003436 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fb4c 	bl	8002890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	@ 0x24
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800321e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800322e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003230:	f001 f9ac 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8003234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4a81      	ldr	r2, [pc, #516]	@ (8003440 <HAL_I2C_Init+0x274>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d807      	bhi.n	8003250 <HAL_I2C_Init+0x84>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a80      	ldr	r2, [pc, #512]	@ (8003444 <HAL_I2C_Init+0x278>)
 8003244:	4293      	cmp	r3, r2
 8003246:	bf94      	ite	ls
 8003248:	2301      	movls	r3, #1
 800324a:	2300      	movhi	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e006      	b.n	800325e <HAL_I2C_Init+0x92>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a7d      	ldr	r2, [pc, #500]	@ (8003448 <HAL_I2C_Init+0x27c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	bf94      	ite	ls
 8003258:	2301      	movls	r3, #1
 800325a:	2300      	movhi	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0e7      	b.n	8003436 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a78      	ldr	r2, [pc, #480]	@ (800344c <HAL_I2C_Init+0x280>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a6a      	ldr	r2, [pc, #424]	@ (8003440 <HAL_I2C_Init+0x274>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d802      	bhi.n	80032a0 <HAL_I2C_Init+0xd4>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3301      	adds	r3, #1
 800329e:	e009      	b.n	80032b4 <HAL_I2C_Init+0xe8>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a69      	ldr	r2, [pc, #420]	@ (8003450 <HAL_I2C_Init+0x284>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	3301      	adds	r3, #1
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	495c      	ldr	r1, [pc, #368]	@ (8003440 <HAL_I2C_Init+0x274>)
 80032d0:	428b      	cmp	r3, r1
 80032d2:	d819      	bhi.n	8003308 <HAL_I2C_Init+0x13c>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e59      	subs	r1, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e2:	1c59      	adds	r1, r3, #1
 80032e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032e8:	400b      	ands	r3, r1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_I2C_Init+0x138>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1e59      	subs	r1, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003302:	e051      	b.n	80033a8 <HAL_I2C_Init+0x1dc>
 8003304:	2304      	movs	r3, #4
 8003306:	e04f      	b.n	80033a8 <HAL_I2C_Init+0x1dc>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d111      	bne.n	8003334 <HAL_I2C_Init+0x168>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e012      	b.n	800335a <HAL_I2C_Init+0x18e>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e58      	subs	r0, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	0099      	lsls	r1, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	fbb0 f3f3 	udiv	r3, r0, r3
 800334a:	3301      	adds	r3, #1
 800334c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Init+0x196>
 800335e:	2301      	movs	r3, #1
 8003360:	e022      	b.n	80033a8 <HAL_I2C_Init+0x1dc>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10e      	bne.n	8003388 <HAL_I2C_Init+0x1bc>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e58      	subs	r0, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6859      	ldr	r1, [r3, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	440b      	add	r3, r1
 8003378:	fbb0 f3f3 	udiv	r3, r0, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003386:	e00f      	b.n	80033a8 <HAL_I2C_Init+0x1dc>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e58      	subs	r0, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	0099      	lsls	r1, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	fbb0 f3f3 	udiv	r3, r0, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	6809      	ldr	r1, [r1, #0]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6911      	ldr	r1, [r2, #16]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68d2      	ldr	r2, [r2, #12]
 80033e2:	4311      	orrs	r1, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	430b      	orrs	r3, r1
 80033ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	000186a0 	.word	0x000186a0
 8003444:	001e847f 	.word	0x001e847f
 8003448:	003d08ff 	.word	0x003d08ff
 800344c:	431bde83 	.word	0x431bde83
 8003450:	10624dd3 	.word	0x10624dd3

08003454 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
 8003464:	4613      	mov	r3, r2
 8003466:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff fbac 	bl	8002bc4 <HAL_GetTick>
 800346c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b20      	cmp	r3, #32
 8003478:	f040 80e0 	bne.w	800363c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2319      	movs	r3, #25
 8003482:	2201      	movs	r2, #1
 8003484:	4970      	ldr	r1, [pc, #448]	@ (8003648 <HAL_I2C_Master_Transmit+0x1f4>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fa92 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	e0d3      	b.n	800363e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_I2C_Master_Transmit+0x50>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0cc      	b.n	800363e <HAL_I2C_Master_Transmit+0x1ea>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d007      	beq.n	80034ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	@ 0x21
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2210      	movs	r2, #16
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	893a      	ldrh	r2, [r7, #8]
 80034fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a50      	ldr	r2, [pc, #320]	@ (800364c <HAL_I2C_Master_Transmit+0x1f8>)
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800350c:	8979      	ldrh	r1, [r7, #10]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6a3a      	ldr	r2, [r7, #32]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f9ca 	bl	80038ac <I2C_MasterRequestWrite>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e08d      	b.n	800363e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003538:	e066      	b.n	8003608 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	6a39      	ldr	r1, [r7, #32]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fb0c 	bl	8003b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	2b04      	cmp	r3, #4
 8003550:	d107      	bne.n	8003562 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003560:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e06b      	b.n	800363e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	781a      	ldrb	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d11b      	bne.n	80035dc <HAL_I2C_Master_Transmit+0x188>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d017      	beq.n	80035dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	6a39      	ldr	r1, [r7, #32]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fafc 	bl	8003bde <I2C_WaitOnBTFFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d107      	bne.n	8003604 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e01a      	b.n	800363e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d194      	bne.n	800353a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	00100002 	.word	0x00100002
 800364c:	ffff0000 	.word	0xffff0000

08003650 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	460b      	mov	r3, r1
 800365e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003660:	f7ff fab0 	bl	8002bc4 <HAL_GetTick>
 8003664:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003666:	2301      	movs	r3, #1
 8003668:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	f040 8110 	bne.w	8003898 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2319      	movs	r3, #25
 800367e:	2201      	movs	r2, #1
 8003680:	4988      	ldr	r1, [pc, #544]	@ (80038a4 <HAL_I2C_IsDeviceReady+0x254>)
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f994 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
 8003690:	e103      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_I2C_IsDeviceReady+0x50>
 800369c:	2302      	movs	r3, #2
 800369e:	e0fc      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d007      	beq.n	80036c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2224      	movs	r2, #36	@ 0x24
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a70      	ldr	r2, [pc, #448]	@ (80038a8 <HAL_I2C_IsDeviceReady+0x258>)
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f952 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0b6      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800372c:	897b      	ldrh	r3, [r7, #10]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800373a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800373c:	f7ff fa42 	bl	8002bc4 <HAL_GetTick>
 8003740:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003770:	e025      	b.n	80037be <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7ff fa27 	bl	8002bc4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <HAL_I2C_IsDeviceReady+0x138>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d103      	bne.n	8003790 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	22a0      	movs	r2, #160	@ 0xa0
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80037c8:	d005      	beq.n	80037d6 <HAL_I2C_IsDeviceReady+0x186>
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <HAL_I2C_IsDeviceReady+0x186>
 80037d0:	7dbb      	ldrb	r3, [r7, #22]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0cd      	beq.n	8003772 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d129      	bne.n	8003840 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fa:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2319      	movs	r3, #25
 8003818:	2201      	movs	r2, #1
 800381a:	4922      	ldr	r1, [pc, #136]	@ (80038a4 <HAL_I2C_IsDeviceReady+0x254>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f8c7 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e036      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e02c      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800384e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003858:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2319      	movs	r3, #25
 8003860:	2201      	movs	r2, #1
 8003862:	4910      	ldr	r1, [pc, #64]	@ (80038a4 <HAL_I2C_IsDeviceReady+0x254>)
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f8a3 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e012      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	3301      	adds	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	f4ff af33 	bcc.w	80036ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	00100002 	.word	0x00100002
 80038a8:	ffff0000 	.word	0xffff0000

080038ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	460b      	mov	r3, r1
 80038ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d006      	beq.n	80038d6 <I2C_MasterRequestWrite+0x2a>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d003      	beq.n	80038d6 <I2C_MasterRequestWrite+0x2a>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038d4:	d108      	bne.n	80038e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	e00b      	b.n	8003900 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	2b12      	cmp	r3, #18
 80038ee:	d107      	bne.n	8003900 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f84f 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e035      	b.n	800399e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393a:	d108      	bne.n	800394e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	e01b      	b.n	8003986 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	11db      	asrs	r3, r3, #7
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 0306 	and.w	r3, r3, #6
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f063 030f 	orn	r3, r3, #15
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	490f      	ldr	r1, [pc, #60]	@ (80039a8 <I2C_MasterRequestWrite+0xfc>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f876 	bl	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e010      	b.n	800399e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <I2C_MasterRequestWrite+0x100>)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f866 	bl	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	00010008 	.word	0x00010008
 80039ac:	00010002 	.word	0x00010002

080039b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c0:	e025      	b.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039c8:	d021      	beq.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7ff f8fb 	bl	8002bc4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d116      	bne.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e023      	b.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10d      	bne.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	e00c      	b.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d0b6      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a6c:	e051      	b.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7c:	d123      	bne.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e046      	b.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003acc:	d021      	beq.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7ff f879 	bl	8002bc4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e020      	b.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e00b      	b.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d18d      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b68:	e02d      	b.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f878 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e02d      	b.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b80:	d021      	beq.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b82:	f7ff f81f 	bl	8002bc4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d302      	bcc.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d116      	bne.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e007      	b.n	8003bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd0:	2b80      	cmp	r3, #128	@ 0x80
 8003bd2:	d1ca      	bne.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bea:	e02d      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f837 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e02d      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c02:	d021      	beq.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe ffde 	bl	8002bc4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d1ca      	bne.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d11b      	bne.n	8003cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	f043 0204 	orr.w	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e25e      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d075      	beq.n	8003dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cde:	4b88      	ldr	r3, [pc, #544]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b85      	ldr	r3, [pc, #532]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d112      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b7e      	ldr	r3, [pc, #504]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d157      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e239      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x74>
 8003d26:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a75      	ldr	r2, [pc, #468]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b70      	ldr	r3, [pc, #448]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6f      	ldr	r2, [pc, #444]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d58:	4b69      	ldr	r3, [pc, #420]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a68      	ldr	r2, [pc, #416]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b66      	ldr	r3, [pc, #408]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a65      	ldr	r2, [pc, #404]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe ff24 	bl	8002bc4 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fe ff20 	bl	8002bc4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	@ 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e1fe      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b5b      	ldr	r3, [pc, #364]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe ff10 	bl	8002bc4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe ff0c 	bl	8002bc4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1ea      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	4b51      	ldr	r3, [pc, #324]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b47      	ldr	r3, [pc, #284]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d11c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dee:	4b44      	ldr	r3, [pc, #272]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	4b41      	ldr	r3, [pc, #260]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1be      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e12:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4937      	ldr	r1, [pc, #220]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	e03a      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fe fec5 	bl	8002bc4 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fec1 	bl	8002bc4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e19f      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4925      	ldr	r1, [pc, #148]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fea4 	bl	8002bc4 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fe fea0 	bl	8002bc4 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e17e      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d036      	beq.n	8003f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb2:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fe fe84 	bl	8002bc4 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec0:	f7fe fe80 	bl	8002bc4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e15e      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x200>
 8003ede:	e01b      	b.n	8003f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee0:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fe fe6d 	bl	8002bc4 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	e00e      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fe fe69 	bl	8002bc4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d907      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e147      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0c:	4b88      	ldr	r3, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8097 	beq.w	8004054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2a:	4b81      	ldr	r3, [pc, #516]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f46:	4b7a      	ldr	r3, [pc, #488]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b77      	ldr	r3, [pc, #476]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d118      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f62:	4b74      	ldr	r3, [pc, #464]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a73      	ldr	r2, [pc, #460]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe fe29 	bl	8002bc4 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f76:	f7fe fe25 	bl	8002bc4 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e103      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	4b6a      	ldr	r3, [pc, #424]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x2ea>
 8003f9c:	4b64      	ldr	r3, [pc, #400]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a63      	ldr	r2, [pc, #396]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x30c>
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003fcc:	4b58      	ldr	r3, [pc, #352]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a57      	ldr	r2, [pc, #348]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	4b55      	ldr	r3, [pc, #340]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a54      	ldr	r2, [pc, #336]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fe fdea 	bl	8002bc4 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fe fde6 	bl	8002bc4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0c2      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	4b49      	ldr	r3, [pc, #292]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ee      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x334>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7fe fdd4 	bl	8002bc4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fe fdd0 	bl	8002bc4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0ac      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004036:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ee      	bne.n	8004020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	4a38      	ldr	r2, [pc, #224]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8098 	beq.w	800418e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b08      	cmp	r3, #8
 8004068:	d05c      	beq.n	8004124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d141      	bne.n	80040f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004072:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <HAL_RCC_OscConfig+0x478>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fe fda4 	bl	8002bc4 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe fda0 	bl	8002bc4 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e07e      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	019b      	lsls	r3, r3, #6
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	491b      	ldr	r1, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <HAL_RCC_OscConfig+0x478>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe fd79 	bl	8002bc4 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fe fd75 	bl	8002bc4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e053      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x416>
 80040f4:	e04b      	b.n	800418e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe fd62 	bl	8002bc4 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe fd5e 	bl	8002bc4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e03c      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x444>
 8004122:	e034      	b.n	800418e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e02f      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
 8004138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800413c:	4b16      	ldr	r3, [pc, #88]	@ (8004198 <HAL_RCC_OscConfig+0x4d8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	429a      	cmp	r2, r3
 800414e:	d11c      	bne.n	800418a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d115      	bne.n	800418a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800416a:	4293      	cmp	r3, r2
 800416c:	d10d      	bne.n	800418a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d001      	beq.n	800418e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800

0800419c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0cc      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b0:	4b68      	ldr	r3, [pc, #416]	@ (8004354 <HAL_RCC_ClockConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d90c      	bls.n	80041d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b65      	ldr	r3, [pc, #404]	@ (8004354 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b63      	ldr	r3, [pc, #396]	@ (8004354 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0b8      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d020      	beq.n	8004226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f0:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a58      	ldr	r2, [pc, #352]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004208:	4b53      	ldr	r3, [pc, #332]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a52      	ldr	r2, [pc, #328]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b50      	ldr	r3, [pc, #320]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	494d      	ldr	r1, [pc, #308]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d044      	beq.n	80042bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d119      	bne.n	800427a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e07f      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d003      	beq.n	800425a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004256:	2b03      	cmp	r3, #3
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425a:	4b3f      	ldr	r3, [pc, #252]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e06f      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426a:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e067      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800427a:	4b37      	ldr	r3, [pc, #220]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f023 0203 	bic.w	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4934      	ldr	r1, [pc, #208]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800428c:	f7fe fc9a 	bl	8002bc4 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	e00a      	b.n	80042aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004294:	f7fe fc96 	bl	8002bc4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e04f      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 020c 	and.w	r2, r3, #12
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d1eb      	bne.n	8004294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042bc:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <HAL_RCC_ClockConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d20c      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e032      	b.n	800434a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4916      	ldr	r1, [pc, #88]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430e:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	490e      	ldr	r1, [pc, #56]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004322:	f000 f821 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004326:	4602      	mov	r2, r0
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	490a      	ldr	r1, [pc, #40]	@ (800435c <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800433e:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fb3c 	bl	80029c0 <HAL_InitTick>

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023c00 	.word	0x40023c00
 8004358:	40023800 	.word	0x40023800
 800435c:	0800adcc 	.word	0x0800adcc
 8004360:	20000000 	.word	0x20000000
 8004364:	20000004 	.word	0x20000004

08004368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800436c:	b094      	sub	sp, #80	@ 0x50
 800436e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	647b      	str	r3, [r7, #68]	@ 0x44
 8004374:	2300      	movs	r3, #0
 8004376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004378:	2300      	movs	r3, #0
 800437a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004380:	4b79      	ldr	r3, [pc, #484]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b08      	cmp	r3, #8
 800438a:	d00d      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x40>
 800438c:	2b08      	cmp	r3, #8
 800438e:	f200 80e1 	bhi.w	8004554 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x34>
 8004396:	2b04      	cmp	r3, #4
 8004398:	d003      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800439a:	e0db      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b73      	ldr	r3, [pc, #460]	@ (800456c <HAL_RCC_GetSysClockFreq+0x204>)
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043a0:	e0db      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043a2:	4b73      	ldr	r3, [pc, #460]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x208>)
 80043a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a6:	e0d8      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x200>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043be:	4b6a      	ldr	r3, [pc, #424]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	099b      	lsrs	r3, r3, #6
 80043c4:	2200      	movs	r2, #0
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d2:	2300      	movs	r3, #0
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043da:	4622      	mov	r2, r4
 80043dc:	462b      	mov	r3, r5
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	0159      	lsls	r1, r3, #5
 80043e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ec:	0150      	lsls	r0, r2, #5
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4621      	mov	r1, r4
 80043f4:	1a51      	subs	r1, r2, r1
 80043f6:	6139      	str	r1, [r7, #16]
 80043f8:	4629      	mov	r1, r5
 80043fa:	eb63 0301 	sbc.w	r3, r3, r1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800440c:	4659      	mov	r1, fp
 800440e:	018b      	lsls	r3, r1, #6
 8004410:	4651      	mov	r1, sl
 8004412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004416:	4651      	mov	r1, sl
 8004418:	018a      	lsls	r2, r1, #6
 800441a:	4651      	mov	r1, sl
 800441c:	ebb2 0801 	subs.w	r8, r2, r1
 8004420:	4659      	mov	r1, fp
 8004422:	eb63 0901 	sbc.w	r9, r3, r1
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443a:	4690      	mov	r8, r2
 800443c:	4699      	mov	r9, r3
 800443e:	4623      	mov	r3, r4
 8004440:	eb18 0303 	adds.w	r3, r8, r3
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	462b      	mov	r3, r5
 8004448:	eb49 0303 	adc.w	r3, r9, r3
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800445a:	4629      	mov	r1, r5
 800445c:	024b      	lsls	r3, r1, #9
 800445e:	4621      	mov	r1, r4
 8004460:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004464:	4621      	mov	r1, r4
 8004466:	024a      	lsls	r2, r1, #9
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800446e:	2200      	movs	r2, #0
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004478:	f7fc fb42 	bl	8000b00 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004484:	e058      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004486:	4b38      	ldr	r3, [pc, #224]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x200>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	099b      	lsrs	r3, r3, #6
 800448c:	2200      	movs	r2, #0
 800448e:	4618      	mov	r0, r3
 8004490:	4611      	mov	r1, r2
 8004492:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	2300      	movs	r3, #0
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
 800449c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	0159      	lsls	r1, r3, #5
 80044ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b2:	0150      	lsls	r0, r2, #5
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4641      	mov	r1, r8
 80044ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80044be:	4649      	mov	r1, r9
 80044c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044d8:	ebb2 040a 	subs.w	r4, r2, sl
 80044dc:	eb63 050b 	sbc.w	r5, r3, fp
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	00eb      	lsls	r3, r5, #3
 80044ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ee:	00e2      	lsls	r2, r4, #3
 80044f0:	4614      	mov	r4, r2
 80044f2:	461d      	mov	r5, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	18e3      	adds	r3, r4, r3
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	464b      	mov	r3, r9
 80044fc:	eb45 0303 	adc.w	r3, r5, r3
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800450e:	4629      	mov	r1, r5
 8004510:	028b      	lsls	r3, r1, #10
 8004512:	4621      	mov	r1, r4
 8004514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004518:	4621      	mov	r1, r4
 800451a:	028a      	lsls	r2, r1, #10
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004522:	2200      	movs	r2, #0
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	61fa      	str	r2, [r7, #28]
 8004528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800452c:	f7fc fae8 	bl	8000b00 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4613      	mov	r3, r2
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x200>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	3301      	adds	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800454a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004552:	e002      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004554:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCC_GetSysClockFreq+0x204>)
 8004556:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800455a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800455c:	4618      	mov	r0, r3
 800455e:	3750      	adds	r7, #80	@ 0x50
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	00f42400 	.word	0x00f42400
 8004570:	007a1200 	.word	0x007a1200

08004574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004578:	4b03      	ldr	r3, [pc, #12]	@ (8004588 <HAL_RCC_GetHCLKFreq+0x14>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000000 	.word	0x20000000

0800458c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004590:	f7ff fff0 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	0a9b      	lsrs	r3, r3, #10
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4903      	ldr	r1, [pc, #12]	@ (80045b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40023800 	.word	0x40023800
 80045b0:	0800addc 	.word	0x0800addc

080045b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045b8:	f7ff ffdc 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0b5b      	lsrs	r3, r3, #13
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	@ (80045d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	0800addc 	.word	0x0800addc

080045dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	220f      	movs	r2, #15
 80045ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <HAL_RCC_GetClockConfig+0x5c>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0203 	and.w	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <HAL_RCC_GetClockConfig+0x5c>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004604:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <HAL_RCC_GetClockConfig+0x5c>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004610:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	08db      	lsrs	r3, r3, #3
 8004616:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800461e:	4b07      	ldr	r3, [pc, #28]	@ (800463c <HAL_RCC_GetClockConfig+0x60>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 020f 	and.w	r2, r3, #15
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	601a      	str	r2, [r3, #0]
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	40023c00 	.word	0x40023c00

08004640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e01d      	b.n	800468e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f815 	bl	8004696 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f000 f968 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d122      	bne.n	800474e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d11b      	bne.n	800474e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0202 	mvn.w	r2, #2
 800471e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8ee 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 800473a:	e005      	b.n	8004748 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8e0 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f8f1 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d122      	bne.n	80047a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d11b      	bne.n	80047a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0204 	mvn.w	r2, #4
 8004772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8c4 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 800478e:	e005      	b.n	800479c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8b6 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8c7 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d122      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11b      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f06f 0208 	mvn.w	r2, #8
 80047c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2204      	movs	r2, #4
 80047cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f89a 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80047e2:	e005      	b.n	80047f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f88c 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f89d 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b10      	cmp	r3, #16
 8004802:	d122      	bne.n	800484a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b10      	cmp	r3, #16
 8004810:	d11b      	bne.n	800484a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f06f 0210 	mvn.w	r2, #16
 800481a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2208      	movs	r2, #8
 8004820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f870 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004836:	e005      	b.n	8004844 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f862 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f873 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10e      	bne.n	8004876 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f06f 0201 	mvn.w	r2, #1
 800486e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fd ffcb 	bl	800280c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004880:	2b80      	cmp	r3, #128	@ 0x80
 8004882:	d10e      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488e:	2b80      	cmp	r3, #128	@ 0x80
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f903 	bl	8004aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d10e      	bne.n	80048ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ba:	2b40      	cmp	r3, #64	@ 0x40
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f838 	bl	800493e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d10e      	bne.n	80048fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d107      	bne.n	80048fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f06f 0220 	mvn.w	r2, #32
 80048f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8cd 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a40      	ldr	r2, [pc, #256]	@ (8004a68 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004972:	d00f      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3d      	ldr	r2, [pc, #244]	@ (8004a6c <TIM_Base_SetConfig+0x118>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a70 <TIM_Base_SetConfig+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3b      	ldr	r2, [pc, #236]	@ (8004a74 <TIM_Base_SetConfig+0x120>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a78 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004a68 <TIM_Base_SetConfig+0x114>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b4:	d027      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <TIM_Base_SetConfig+0x118>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d023      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a70 <TIM_Base_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a74 <TIM_Base_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	@ (8004a78 <TIM_Base_SetConfig+0x124>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	@ (8004a7c <TIM_Base_SetConfig+0x128>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a23      	ldr	r2, [pc, #140]	@ (8004a90 <TIM_Base_SetConfig+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	@ (8004a78 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d103      	bne.n	8004a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	615a      	str	r2, [r3, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40001c00 	.word	0x40001c00
 8004a90:	40002000 	.word	0x40002000

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e03f      	b.n	8004b4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fd ff1c 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	@ 0x24
 8004aec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fab3 	bl	800506c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	4613      	mov	r3, r2
 8004b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d140      	bne.n	8004bf2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_UART_Receive_IT+0x26>
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e039      	b.n	8004bf4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_UART_Receive_IT+0x38>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e032      	b.n	8004bf4 <HAL_UART_Receive_IT+0x9e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	88fa      	ldrh	r2, [r7, #6]
 8004ba0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2222      	movs	r2, #34	@ 0x22
 8004bb2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bcc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0220 	orr.w	r2, r2, #32
 8004bec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_UART_IRQHandler+0x52>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f98c 	bl	8004f68 <UART_Receive_IT>
      return;
 8004c50:	e0d0      	b.n	8004df4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80b0 	beq.w	8004dba <HAL_UART_IRQHandler+0x1ba>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <HAL_UART_IRQHandler+0x70>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a5 	beq.w	8004dba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_UART_IRQHandler+0x90>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c88:	f043 0201 	orr.w	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_UART_IRQHandler+0xb0>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xd0>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	f043 0204 	orr.w	r2, r3, #4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00f      	beq.n	8004cfa <HAL_UART_IRQHandler+0xfa>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <HAL_UART_IRQHandler+0xee>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf2:	f043 0208 	orr.w	r2, r3, #8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d077      	beq.n	8004df2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_UART_IRQHandler+0x11c>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f926 	bl	8004f68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d26:	2b40      	cmp	r3, #64	@ 0x40
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <HAL_UART_IRQHandler+0x144>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d031      	beq.n	8004da8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f86f 	bl	8004e28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d123      	bne.n	8004da0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695a      	ldr	r2, [r3, #20]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d74:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_UART_IRQHandler+0x1fc>)
 8004d76:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fe f833 	bl	8002de8 <HAL_DMA_Abort_IT>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d016      	beq.n	8004db6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d92:	4610      	mov	r0, r2
 8004d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d96:	e00e      	b.n	8004db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f83b 	bl	8004e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	e00a      	b.n	8004db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f837 	bl	8004e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da6:	e006      	b.n	8004db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f833 	bl	8004e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8004db4:	e01d      	b.n	8004df2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db6:	bf00      	nop
    return;
 8004db8:	e01b      	b.n	8004df2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x1d6>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f85c 	bl	8004e8c <UART_Transmit_IT>
    return;
 8004dd4:	e00e      	b.n	8004df4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_UART_IRQHandler+0x1f4>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f8a4 	bl	8004f38 <UART_EndTransmit_IT>
    return;
 8004df0:	e000      	b.n	8004df4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004df2:	bf00      	nop
  }
}
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08004e65 	.word	0x08004e65

08004e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004e3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff ffc8 	bl	8004e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b21      	cmp	r3, #33	@ 0x21
 8004e9e:	d144      	bne.n	8004f2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea8:	d11a      	bne.n	8004ee0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ebe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	1c9a      	adds	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]
 8004ed2:	e00e      	b.n	8004ef2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	621a      	str	r2, [r3, #32]
 8004ede:	e008      	b.n	8004ef2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6211      	str	r1, [r2, #32]
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4619      	mov	r1, r3
 8004f00:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10f      	bne.n	8004f26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
  }
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff51 	bl	8004e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b22      	cmp	r3, #34	@ 0x22
 8004f7a:	d171      	bne.n	8005060 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f84:	d123      	bne.n	8004fce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10e      	bne.n	8004fb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	1c9a      	adds	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fb0:	e029      	b.n	8005006 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fcc:	e01b      	b.n	8005006 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6858      	ldr	r0, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6291      	str	r1, [r2, #40]	@ 0x28
 8004fe6:	b2c2      	uxtb	r2, r0
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e00c      	b.n	8005006 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	1c58      	adds	r0, r3, #1
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	6288      	str	r0, [r1, #40]	@ 0x28
 8004ffe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29b      	uxth	r3, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4619      	mov	r1, r3
 8005014:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005016:	2b00      	cmp	r3, #0
 8005018:	d120      	bne.n	800505c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0220 	bic.w	r2, r2, #32
 8005028:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005038:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fd fba0 	bl	8002798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e002      	b.n	8005062 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005070:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005074:	af00      	add	r7, sp, #0
 8005076:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005086:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	ea40 0301 	orr.w	r3, r0, r1
 8005096:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005098:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 80050ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050c6:	f021 010c 	bic.w	r1, r1, #12
 80050ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80050d4:	430b      	orrs	r3, r1
 80050d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	ea40 0301 	orr.w	r3, r0, r1
 80050f4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005100:	f040 824a 	bne.w	8005598 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005104:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b96      	ldr	r3, [pc, #600]	@ (8005364 <UART_SetConfig+0x2f8>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d006      	beq.n	800511e <UART_SetConfig+0xb2>
 8005110:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b94      	ldr	r3, [pc, #592]	@ (8005368 <UART_SetConfig+0x2fc>)
 8005118:	429a      	cmp	r2, r3
 800511a:	f040 8129 	bne.w	8005370 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800511e:	f7ff fa49 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 8005122:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005126:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800512a:	2200      	movs	r2, #0
 800512c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8005130:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8005134:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8005138:	4622      	mov	r2, r4
 800513a:	462b      	mov	r3, r5
 800513c:	1891      	adds	r1, r2, r2
 800513e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005142:	415b      	adcs	r3, r3
 8005144:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005148:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800514c:	4621      	mov	r1, r4
 800514e:	1851      	adds	r1, r2, r1
 8005150:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8005154:	4629      	mov	r1, r5
 8005156:	414b      	adcs	r3, r1
 8005158:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8005168:	4649      	mov	r1, r9
 800516a:	00cb      	lsls	r3, r1, #3
 800516c:	4641      	mov	r1, r8
 800516e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005172:	4641      	mov	r1, r8
 8005174:	00ca      	lsls	r2, r1, #3
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	4603      	mov	r3, r0
 800517c:	4622      	mov	r2, r4
 800517e:	189b      	adds	r3, r3, r2
 8005180:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8005184:	462b      	mov	r3, r5
 8005186:	460a      	mov	r2, r1
 8005188:	eb42 0303 	adc.w	r3, r2, r3
 800518c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8005190:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800519c:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80051a0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 80051a4:	460b      	mov	r3, r1
 80051a6:	18db      	adds	r3, r3, r3
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ac:	4613      	mov	r3, r2
 80051ae:	eb42 0303 	adc.w	r3, r2, r3
 80051b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051b6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80051ba:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80051be:	f7fb fc9f 	bl	8000b00 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b69      	ldr	r3, [pc, #420]	@ (800536c <UART_SetConfig+0x300>)
 80051c8:	fba3 2302 	umull	r2, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	011c      	lsls	r4, r3, #4
 80051d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80051da:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80051de:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80051e2:	4642      	mov	r2, r8
 80051e4:	464b      	mov	r3, r9
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80051ec:	415b      	adcs	r3, r3
 80051ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051f2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80051f6:	4641      	mov	r1, r8
 80051f8:	1851      	adds	r1, r2, r1
 80051fa:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80051fe:	4649      	mov	r1, r9
 8005200:	414b      	adcs	r3, r1
 8005202:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8005212:	4659      	mov	r1, fp
 8005214:	00cb      	lsls	r3, r1, #3
 8005216:	4651      	mov	r1, sl
 8005218:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521c:	4651      	mov	r1, sl
 800521e:	00ca      	lsls	r2, r1, #3
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	4603      	mov	r3, r0
 8005226:	4642      	mov	r2, r8
 8005228:	189b      	adds	r3, r3, r2
 800522a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800522e:	464b      	mov	r3, r9
 8005230:	460a      	mov	r2, r1
 8005232:	eb42 0303 	adc.w	r3, r2, r3
 8005236:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800523a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005246:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800524a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 800524e:	460b      	mov	r3, r1
 8005250:	18db      	adds	r3, r3, r3
 8005252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005256:	4613      	mov	r3, r2
 8005258:	eb42 0303 	adc.w	r3, r2, r3
 800525c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005260:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005264:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8005268:	f7fb fc4a 	bl	8000b00 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4611      	mov	r1, r2
 8005272:	4b3e      	ldr	r3, [pc, #248]	@ (800536c <UART_SetConfig+0x300>)
 8005274:	fba3 2301 	umull	r2, r3, r3, r1
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2264      	movs	r2, #100	@ 0x64
 800527c:	fb02 f303 	mul.w	r3, r2, r3
 8005280:	1acb      	subs	r3, r1, r3
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005288:	4b38      	ldr	r3, [pc, #224]	@ (800536c <UART_SetConfig+0x300>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005296:	441c      	add	r4, r3
 8005298:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800529c:	2200      	movs	r2, #0
 800529e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80052a2:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 80052a6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 80052aa:	4642      	mov	r2, r8
 80052ac:	464b      	mov	r3, r9
 80052ae:	1891      	adds	r1, r2, r2
 80052b0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80052b4:	415b      	adcs	r3, r3
 80052b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052ba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80052be:	4641      	mov	r1, r8
 80052c0:	1851      	adds	r1, r2, r1
 80052c2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80052c6:	4649      	mov	r1, r9
 80052c8:	414b      	adcs	r3, r1
 80052ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 80052da:	4659      	mov	r1, fp
 80052dc:	00cb      	lsls	r3, r1, #3
 80052de:	4651      	mov	r1, sl
 80052e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e4:	4651      	mov	r1, sl
 80052e6:	00ca      	lsls	r2, r1, #3
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	4603      	mov	r3, r0
 80052ee:	4642      	mov	r2, r8
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80052f6:	464b      	mov	r3, r9
 80052f8:	460a      	mov	r2, r1
 80052fa:	eb42 0303 	adc.w	r3, r2, r3
 80052fe:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005302:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800530e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8005312:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8005316:	460b      	mov	r3, r1
 8005318:	18db      	adds	r3, r3, r3
 800531a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800531e:	4613      	mov	r3, r2
 8005320:	eb42 0303 	adc.w	r3, r2, r3
 8005324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005328:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800532c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8005330:	f7fb fbe6 	bl	8000b00 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <UART_SetConfig+0x300>)
 800533a:	fba3 1302 	umull	r1, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2164      	movs	r1, #100	@ 0x64
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	3332      	adds	r3, #50	@ 0x32
 800534c:	4a07      	ldr	r2, [pc, #28]	@ (800536c <UART_SetConfig+0x300>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 0207 	and.w	r2, r3, #7
 8005358:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4422      	add	r2, r4
 8005360:	609a      	str	r2, [r3, #8]
 8005362:	e34a      	b.n	80059fa <UART_SetConfig+0x98e>
 8005364:	40011000 	.word	0x40011000
 8005368:	40011400 	.word	0x40011400
 800536c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005370:	f7ff f90c 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8005374:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005378:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800537c:	2200      	movs	r2, #0
 800537e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8005382:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8005386:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	1891      	adds	r1, r2, r2
 8005390:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8005394:	415b      	adcs	r3, r3
 8005396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800539a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800539e:	4621      	mov	r1, r4
 80053a0:	eb12 0a01 	adds.w	sl, r2, r1
 80053a4:	4629      	mov	r1, r5
 80053a6:	eb43 0b01 	adc.w	fp, r3, r1
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053be:	4692      	mov	sl, r2
 80053c0:	469b      	mov	fp, r3
 80053c2:	4623      	mov	r3, r4
 80053c4:	eb1a 0303 	adds.w	r3, sl, r3
 80053c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80053cc:	462b      	mov	r3, r5
 80053ce:	eb4b 0303 	adc.w	r3, fp, r3
 80053d2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80053d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80053e2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80053e6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80053ea:	460b      	mov	r3, r1
 80053ec:	18db      	adds	r3, r3, r3
 80053ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053f2:	4613      	mov	r3, r2
 80053f4:	eb42 0303 	adc.w	r3, r2, r3
 80053f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005400:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8005404:	f7fb fb7c 	bl	8000b00 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4b61      	ldr	r3, [pc, #388]	@ (8005594 <UART_SetConfig+0x528>)
 800540e:	fba3 2302 	umull	r2, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	011c      	lsls	r4, r3, #4
 8005416:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8005420:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8005424:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	1891      	adds	r1, r2, r2
 800542e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005430:	415b      	adcs	r3, r3
 8005432:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005434:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005438:	4641      	mov	r1, r8
 800543a:	1851      	adds	r1, r2, r1
 800543c:	6739      	str	r1, [r7, #112]	@ 0x70
 800543e:	4649      	mov	r1, r9
 8005440:	414b      	adcs	r3, r1
 8005442:	677b      	str	r3, [r7, #116]	@ 0x74
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8005450:	4659      	mov	r1, fp
 8005452:	00cb      	lsls	r3, r1, #3
 8005454:	4651      	mov	r1, sl
 8005456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545a:	4651      	mov	r1, sl
 800545c:	00ca      	lsls	r2, r1, #3
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	4603      	mov	r3, r0
 8005464:	4642      	mov	r2, r8
 8005466:	189b      	adds	r3, r3, r2
 8005468:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800546c:	464b      	mov	r3, r9
 800546e:	460a      	mov	r2, r1
 8005470:	eb42 0303 	adc.w	r3, r2, r3
 8005474:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8005478:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005484:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8005488:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 800548c:	460b      	mov	r3, r1
 800548e:	18db      	adds	r3, r3, r3
 8005490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005492:	4613      	mov	r3, r2
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800549a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800549e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80054a2:	f7fb fb2d 	bl	8000b00 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	4b39      	ldr	r3, [pc, #228]	@ (8005594 <UART_SetConfig+0x528>)
 80054ae:	fba3 2301 	umull	r2, r3, r3, r1
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2264      	movs	r2, #100	@ 0x64
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	1acb      	subs	r3, r1, r3
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054c2:	4b34      	ldr	r3, [pc, #208]	@ (8005594 <UART_SetConfig+0x528>)
 80054c4:	fba3 2302 	umull	r2, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054d0:	441c      	add	r4, r3
 80054d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80054dc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80054e0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	6639      	str	r1, [r7, #96]	@ 0x60
 80054ec:	415b      	adcs	r3, r3
 80054ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80054f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80054f4:	4641      	mov	r1, r8
 80054f6:	1851      	adds	r1, r2, r1
 80054f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054fa:	4649      	mov	r1, r9
 80054fc:	414b      	adcs	r3, r1
 80054fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800550c:	4659      	mov	r1, fp
 800550e:	00cb      	lsls	r3, r1, #3
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005516:	4651      	mov	r1, sl
 8005518:	00ca      	lsls	r2, r1, #3
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	4603      	mov	r3, r0
 8005520:	4642      	mov	r2, r8
 8005522:	189b      	adds	r3, r3, r2
 8005524:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8005528:	464b      	mov	r3, r9
 800552a:	460a      	mov	r2, r1
 800552c:	eb42 0303 	adc.w	r3, r2, r3
 8005530:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8005534:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8005540:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8005544:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8005548:	460b      	mov	r3, r1
 800554a:	18db      	adds	r3, r3, r3
 800554c:	653b      	str	r3, [r7, #80]	@ 0x50
 800554e:	4613      	mov	r3, r2
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	657b      	str	r3, [r7, #84]	@ 0x54
 8005556:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800555a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800555e:	f7fb facf 	bl	8000b00 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <UART_SetConfig+0x528>)
 8005568:	fba3 1302 	umull	r1, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	2164      	movs	r1, #100	@ 0x64
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	3332      	adds	r3, #50	@ 0x32
 800557a:	4a06      	ldr	r2, [pc, #24]	@ (8005594 <UART_SetConfig+0x528>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	f003 0207 	and.w	r2, r3, #7
 8005586:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4422      	add	r2, r4
 800558e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005590:	e233      	b.n	80059fa <UART_SetConfig+0x98e>
 8005592:	bf00      	nop
 8005594:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005598:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b8d      	ldr	r3, [pc, #564]	@ (80057d4 <UART_SetConfig+0x768>)
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d006      	beq.n	80055b2 <UART_SetConfig+0x546>
 80055a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b8b      	ldr	r3, [pc, #556]	@ (80057d8 <UART_SetConfig+0x76c>)
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f040 8117 	bne.w	80057e0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b2:	f7fe ffff 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 80055b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80055c4:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80055c8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80055cc:	4622      	mov	r2, r4
 80055ce:	462b      	mov	r3, r5
 80055d0:	1891      	adds	r1, r2, r2
 80055d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055d4:	415b      	adcs	r3, r3
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055dc:	4621      	mov	r1, r4
 80055de:	eb12 0801 	adds.w	r8, r2, r1
 80055e2:	4629      	mov	r1, r5
 80055e4:	eb43 0901 	adc.w	r9, r3, r1
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055fc:	4690      	mov	r8, r2
 80055fe:	4699      	mov	r9, r3
 8005600:	4623      	mov	r3, r4
 8005602:	eb18 0303 	adds.w	r3, r8, r3
 8005606:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800560a:	462b      	mov	r3, r5
 800560c:	eb49 0303 	adc.w	r3, r9, r3
 8005610:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8005614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005620:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8005630:	4629      	mov	r1, r5
 8005632:	008b      	lsls	r3, r1, #2
 8005634:	4621      	mov	r1, r4
 8005636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563a:	4621      	mov	r1, r4
 800563c:	008a      	lsls	r2, r1, #2
 800563e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8005642:	f7fb fa5d 	bl	8000b00 <__aeabi_uldivmod>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4b64      	ldr	r3, [pc, #400]	@ (80057dc <UART_SetConfig+0x770>)
 800564c:	fba3 2302 	umull	r2, r3, r3, r2
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	011c      	lsls	r4, r3, #4
 8005654:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800565e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8005662:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 8005666:	4642      	mov	r2, r8
 8005668:	464b      	mov	r3, r9
 800566a:	1891      	adds	r1, r2, r2
 800566c:	6439      	str	r1, [r7, #64]	@ 0x40
 800566e:	415b      	adcs	r3, r3
 8005670:	647b      	str	r3, [r7, #68]	@ 0x44
 8005672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005676:	4641      	mov	r1, r8
 8005678:	1851      	adds	r1, r2, r1
 800567a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800567c:	4649      	mov	r1, r9
 800567e:	414b      	adcs	r3, r1
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 800568e:	4659      	mov	r1, fp
 8005690:	00cb      	lsls	r3, r1, #3
 8005692:	4651      	mov	r1, sl
 8005694:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005698:	4651      	mov	r1, sl
 800569a:	00ca      	lsls	r2, r1, #3
 800569c:	4610      	mov	r0, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	4642      	mov	r2, r8
 80056a4:	189b      	adds	r3, r3, r2
 80056a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80056aa:	464b      	mov	r3, r9
 80056ac:	460a      	mov	r2, r1
 80056ae:	eb42 0303 	adc.w	r3, r2, r3
 80056b2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80056b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80056c2:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80056d2:	4649      	mov	r1, r9
 80056d4:	008b      	lsls	r3, r1, #2
 80056d6:	4641      	mov	r1, r8
 80056d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056dc:	4641      	mov	r1, r8
 80056de:	008a      	lsls	r2, r1, #2
 80056e0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80056e4:	f7fb fa0c 	bl	8000b00 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4611      	mov	r1, r2
 80056ee:	4b3b      	ldr	r3, [pc, #236]	@ (80057dc <UART_SetConfig+0x770>)
 80056f0:	fba3 2301 	umull	r2, r3, r3, r1
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	2264      	movs	r2, #100	@ 0x64
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	1acb      	subs	r3, r1, r3
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	3332      	adds	r3, #50	@ 0x32
 8005702:	4a36      	ldr	r2, [pc, #216]	@ (80057dc <UART_SetConfig+0x770>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800570e:	441c      	add	r4, r3
 8005710:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005714:	2200      	movs	r2, #0
 8005716:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800571a:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 800571e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8005722:	4642      	mov	r2, r8
 8005724:	464b      	mov	r3, r9
 8005726:	1891      	adds	r1, r2, r2
 8005728:	6339      	str	r1, [r7, #48]	@ 0x30
 800572a:	415b      	adcs	r3, r3
 800572c:	637b      	str	r3, [r7, #52]	@ 0x34
 800572e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005732:	4641      	mov	r1, r8
 8005734:	1851      	adds	r1, r2, r1
 8005736:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005738:	4649      	mov	r1, r9
 800573a:	414b      	adcs	r3, r1
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800574a:	4659      	mov	r1, fp
 800574c:	00cb      	lsls	r3, r1, #3
 800574e:	4651      	mov	r1, sl
 8005750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005754:	4651      	mov	r1, sl
 8005756:	00ca      	lsls	r2, r1, #3
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	4603      	mov	r3, r0
 800575e:	4642      	mov	r2, r8
 8005760:	189b      	adds	r3, r3, r2
 8005762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005766:	464b      	mov	r3, r9
 8005768:	460a      	mov	r2, r1
 800576a:	eb42 0303 	adc.w	r3, r2, r3
 800576e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005772:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800577e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 800578e:	4649      	mov	r1, r9
 8005790:	008b      	lsls	r3, r1, #2
 8005792:	4641      	mov	r1, r8
 8005794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005798:	4641      	mov	r1, r8
 800579a:	008a      	lsls	r2, r1, #2
 800579c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80057a0:	f7fb f9ae 	bl	8000b00 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <UART_SetConfig+0x770>)
 80057aa:	fba3 1302 	umull	r1, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2164      	movs	r1, #100	@ 0x64
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	3332      	adds	r3, #50	@ 0x32
 80057bc:	4a07      	ldr	r2, [pc, #28]	@ (80057dc <UART_SetConfig+0x770>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4422      	add	r2, r4
 80057d0:	609a      	str	r2, [r3, #8]
 80057d2:	e112      	b.n	80059fa <UART_SetConfig+0x98e>
 80057d4:	40011000 	.word	0x40011000
 80057d8:	40011400 	.word	0x40011400
 80057dc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7fe fed4 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 80057e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057f2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80057f6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80057fa:	4642      	mov	r2, r8
 80057fc:	464b      	mov	r3, r9
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	6239      	str	r1, [r7, #32]
 8005802:	415b      	adcs	r3, r3
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
 8005806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800580a:	4641      	mov	r1, r8
 800580c:	1854      	adds	r4, r2, r1
 800580e:	4649      	mov	r1, r9
 8005810:	eb43 0501 	adc.w	r5, r3, r1
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	00eb      	lsls	r3, r5, #3
 800581e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005822:	00e2      	lsls	r2, r4, #3
 8005824:	4614      	mov	r4, r2
 8005826:	461d      	mov	r5, r3
 8005828:	4643      	mov	r3, r8
 800582a:	18e3      	adds	r3, r4, r3
 800582c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005830:	464b      	mov	r3, r9
 8005832:	eb45 0303 	adc.w	r3, r5, r3
 8005836:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800583a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005846:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8005856:	4629      	mov	r1, r5
 8005858:	008b      	lsls	r3, r1, #2
 800585a:	4621      	mov	r1, r4
 800585c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005860:	4621      	mov	r1, r4
 8005862:	008a      	lsls	r2, r1, #2
 8005864:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8005868:	f7fb f94a 	bl	8000b00 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4b65      	ldr	r3, [pc, #404]	@ (8005a08 <UART_SetConfig+0x99c>)
 8005872:	fba3 2302 	umull	r2, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	011c      	lsls	r4, r3, #4
 800587a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005884:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8005888:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	61b9      	str	r1, [r7, #24]
 8005894:	415b      	adcs	r3, r3
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589c:	4641      	mov	r1, r8
 800589e:	1851      	adds	r1, r2, r1
 80058a0:	6139      	str	r1, [r7, #16]
 80058a2:	4649      	mov	r1, r9
 80058a4:	414b      	adcs	r3, r1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b4:	4659      	mov	r1, fp
 80058b6:	00cb      	lsls	r3, r1, #3
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058be:	4651      	mov	r1, sl
 80058c0:	00ca      	lsls	r2, r1, #3
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	4642      	mov	r2, r8
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058d0:	464b      	mov	r3, r9
 80058d2:	460a      	mov	r2, r1
 80058d4:	eb42 0303 	adc.w	r3, r2, r3
 80058d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058e8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80058f8:	4649      	mov	r1, r9
 80058fa:	008b      	lsls	r3, r1, #2
 80058fc:	4641      	mov	r1, r8
 80058fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005902:	4641      	mov	r1, r8
 8005904:	008a      	lsls	r2, r1, #2
 8005906:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800590a:	f7fb f8f9 	bl	8000b00 <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4611      	mov	r1, r2
 8005914:	4b3c      	ldr	r3, [pc, #240]	@ (8005a08 <UART_SetConfig+0x99c>)
 8005916:	fba3 2301 	umull	r2, r3, r3, r1
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	2264      	movs	r2, #100	@ 0x64
 800591e:	fb02 f303 	mul.w	r3, r2, r3
 8005922:	1acb      	subs	r3, r1, r3
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	3332      	adds	r3, #50	@ 0x32
 8005928:	4a37      	ldr	r2, [pc, #220]	@ (8005a08 <UART_SetConfig+0x99c>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005934:	441c      	add	r4, r3
 8005936:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800593a:	2200      	movs	r2, #0
 800593c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005940:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005944:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	1891      	adds	r1, r2, r2
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	415b      	adcs	r3, r3
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005958:	4641      	mov	r1, r8
 800595a:	1851      	adds	r1, r2, r1
 800595c:	6039      	str	r1, [r7, #0]
 800595e:	4649      	mov	r1, r9
 8005960:	414b      	adcs	r3, r1
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005970:	4659      	mov	r1, fp
 8005972:	00cb      	lsls	r3, r1, #3
 8005974:	4651      	mov	r1, sl
 8005976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800597a:	4651      	mov	r1, sl
 800597c:	00ca      	lsls	r2, r1, #3
 800597e:	4610      	mov	r0, r2
 8005980:	4619      	mov	r1, r3
 8005982:	4603      	mov	r3, r0
 8005984:	4642      	mov	r2, r8
 8005986:	189b      	adds	r3, r3, r2
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800598c:	464b      	mov	r3, r9
 800598e:	460a      	mov	r2, r1
 8005990:	eb42 0303 	adc.w	r3, r2, r3
 8005994:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005998:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059a4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80059b4:	4649      	mov	r1, r9
 80059b6:	008b      	lsls	r3, r1, #2
 80059b8:	4641      	mov	r1, r8
 80059ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059be:	4641      	mov	r1, r8
 80059c0:	008a      	lsls	r2, r1, #2
 80059c2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059c6:	f7fb f89b 	bl	8000b00 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <UART_SetConfig+0x99c>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	2164      	movs	r1, #100	@ 0x64
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	3332      	adds	r3, #50	@ 0x32
 80059e2:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <UART_SetConfig+0x99c>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4422      	add	r2, r4
 80059f6:	609a      	str	r2, [r3, #8]
}
 80059f8:	e7ff      	b.n	80059fa <UART_SetConfig+0x98e>
 80059fa:	bf00      	nop
 80059fc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005a00:	46bd      	mov	sp, r7
 8005a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a06:	bf00      	nop
 8005a08:	51eb851f 	.word	0x51eb851f

08005a0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f103 0208 	add.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a24:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f103 0208 	add.w	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f103 0208 	add.w	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ac4:	d103      	bne.n	8005ace <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e00c      	b.n	8005ae8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e002      	b.n	8005adc <vListInsert+0x2e>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d2f6      	bcs.n	8005ad6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6892      	ldr	r2, [r2, #8]
 8005b36:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6852      	ldr	r2, [r2, #4]
 8005b40:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d103      	bne.n	8005b54 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1e5a      	subs	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <xQueueGenericReset+0x2c>
        __asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	60bb      	str	r3, [r7, #8]
    }
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005ba0:	f001 fe9c 	bl	80078dc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	441a      	add	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	22ff      	movs	r2, #255	@ 0xff
 8005be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	22ff      	movs	r2, #255	@ 0xff
 8005bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d114      	bne.n	8005c20 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01a      	beq.n	8005c34 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3310      	adds	r3, #16
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 f8f2 	bl	8006dec <xTaskRemoveFromEventList>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d012      	beq.n	8005c34 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c44 <xQueueGenericReset+0xd0>)
 8005c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	e009      	b.n	8005c34 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3310      	adds	r3, #16
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fef1 	bl	8005a0c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3324      	adds	r3, #36	@ 0x24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff feec 	bl	8005a0c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005c34:	f001 fe84 	bl	8007940 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005c38:	2301      	movs	r3, #1
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	e000ed04 	.word	0xe000ed04

08005c48 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08c      	sub	sp, #48	@ 0x30
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xQueueGenericCreate+0x2c>
        __asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61bb      	str	r3, [r7, #24]
    }
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d006      	beq.n	8005c92 <xQueueGenericCreate+0x4a>
 8005c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d101      	bne.n	8005c96 <xQueueGenericCreate+0x4e>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueGenericCreate+0x50>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xQueueGenericCreate+0x6c>
        __asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	617b      	str	r3, [r7, #20]
    }
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005cba:	d90b      	bls.n	8005cd4 <xQueueGenericCreate+0x8c>
        __asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	613b      	str	r3, [r7, #16]
    }
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	3350      	adds	r3, #80	@ 0x50
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 ff31 	bl	8007b40 <pvPortMalloc>
 8005cde:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3350      	adds	r3, #80	@ 0x50
 8005cee:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cf0:	79fa      	ldrb	r2, [r7, #7]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f805 	bl	8005d0c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005d02:	6a3b      	ldr	r3, [r7, #32]
    }
 8005d04:	4618      	mov	r0, r3
 8005d06:	3728      	adds	r7, #40	@ 0x28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	69b8      	ldr	r0, [r7, #24]
 8005d3e:	f7ff ff19 	bl	8005b74 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	78fa      	ldrb	r2, [r7, #3]
 8005d46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	2073      	movs	r0, #115	@ 0x73
 8005d52:	f003 fedb 	bl	8009b0c <SEGGER_SYSVIEW_RecordU32x3>
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	@ 0x38
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <xQueueGenericSend+0x34>
        __asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	623b      	str	r3, [r7, #32]
    }
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSend+0x42>
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <xQueueGenericSend+0x46>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <xQueueGenericSend+0x48>
 8005da6:	2300      	movs	r3, #0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <xQueueGenericSend+0x64>
        __asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	61fb      	str	r3, [r7, #28]
    }
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	e7fd      	b.n	8005dc0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d103      	bne.n	8005dd2 <xQueueGenericSend+0x72>
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <xQueueGenericSend+0x76>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <xQueueGenericSend+0x78>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <xQueueGenericSend+0x94>
        __asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61bb      	str	r3, [r7, #24]
    }
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005df4:	f001 fd72 	bl	80078dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <xQueueGenericSend+0xaa>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d136      	bne.n	8005e78 <xQueueGenericSend+0x118>
            {
                traceQUEUE_SEND( pxQueue );
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f004 fc0b 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	205a      	movs	r0, #90	@ 0x5a
 8005e20:	f003 feea 	bl	8009bf8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e2a:	f000 f9e7 	bl	80061fc <prvCopyDataToQueue>
 8005e2e:	6278      	str	r0, [r7, #36]	@ 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d010      	beq.n	8005e5a <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	3324      	adds	r3, #36	@ 0x24
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 ffd5 	bl	8006dec <xTaskRemoveFromEventList>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <xQueueGenericSend+0x110>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005e48:	4b4c      	ldr	r3, [pc, #304]	@ (8005f7c <xQueueGenericSend+0x21c>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	e00a      	b.n	8005e70 <xQueueGenericSend+0x110>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <xQueueGenericSend+0x110>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005e60:	4b46      	ldr	r3, [pc, #280]	@ (8005f7c <xQueueGenericSend+0x21c>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005e70:	f001 fd66 	bl	8007940 <vPortExitCritical>
                return pdPASS;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e07d      	b.n	8005f74 <xQueueGenericSend+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d110      	bne.n	8005ea0 <xQueueGenericSend+0x140>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005e7e:	f001 fd5f 	bl	8007940 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	4618      	mov	r0, r3
 8005e86:	f004 fbcf 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	460b      	mov	r3, r1
 8005e94:	4601      	mov	r1, r0
 8005e96:	205a      	movs	r0, #90	@ 0x5a
 8005e98:	f003 feae 	bl	8009bf8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e069      	b.n	8005f74 <xQueueGenericSend+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <xQueueGenericSend+0x154>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005ea6:	f107 0310 	add.w	r3, r7, #16
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 f806 	bl	8006ebc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005eb4:	f001 fd44 	bl	8007940 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005eb8:	f000 fd78 	bl	80069ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005ebc:	f001 fd0e 	bl	80078dc <vPortEnterCritical>
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ecc:	d103      	bne.n	8005ed6 <xQueueGenericSend+0x176>
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ee2:	d103      	bne.n	8005eec <xQueueGenericSend+0x18c>
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eec:	f001 fd28 	bl	8007940 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ef0:	1d3a      	adds	r2, r7, #4
 8005ef2:	f107 0310 	add.w	r3, r7, #16
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fff5 	bl	8006ee8 <xTaskCheckForTimeOut>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d124      	bne.n	8005f4e <xQueueGenericSend+0x1ee>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f06:	f000 fa4b 	bl	80063a0 <prvIsQueueFull>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d018      	beq.n	8005f42 <xQueueGenericSend+0x1e2>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	3310      	adds	r3, #16
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 ff41 	bl	8006da0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f20:	f000 f9d6 	bl	80062d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005f24:	f000 fd50 	bl	80069c8 <xTaskResumeAll>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f47f af62 	bne.w	8005df4 <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 8005f30:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <xQueueGenericSend+0x21c>)
 8005f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	e758      	b.n	8005df4 <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f44:	f000 f9c4 	bl	80062d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005f48:	f000 fd3e 	bl	80069c8 <xTaskResumeAll>
 8005f4c:	e752      	b.n	8005df4 <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f50:	f000 f9be 	bl	80062d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005f54:	f000 fd38 	bl	80069c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f004 fb64 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	205a      	movs	r0, #90	@ 0x5a
 8005f6e:	f003 fe43 	bl	8009bf8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005f72:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3730      	adds	r7, #48	@ 0x30
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b08f      	sub	sp, #60	@ 0x3c
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10b      	bne.n	8005fb4 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	61bb      	str	r3, [r7, #24]
    }
 8005fae:	bf00      	nop
 8005fb0:	bf00      	nop
 8005fb2:	e7fd      	b.n	8005fb0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	617b      	str	r3, [r7, #20]
    }
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <xQueueSemaphoreTake+0x50>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005fd4:	f001 fc82 	bl	80078dc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d034      	beq.n	800604e <xQueueSemaphoreTake+0xce>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 fb1e 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8005fec:	4604      	mov	r4, r0
 8005fee:	2000      	movs	r0, #0
 8005ff0:	f004 fb1a 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	9100      	str	r1, [sp, #0]
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	205c      	movs	r0, #92	@ 0x5c
 8006000:	f003 fdfa 	bl	8009bf8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <xQueueSemaphoreTake+0x9e>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006014:	f001 fa24 	bl	8007460 <pvTaskIncrementMutexHeldCount>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00f      	beq.n	8006046 <xQueueSemaphoreTake+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	3310      	adds	r3, #16
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fede 	bl	8006dec <xTaskRemoveFromEventList>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d007      	beq.n	8006046 <xQueueSemaphoreTake+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006036:	4b64      	ldr	r3, [pc, #400]	@ (80061c8 <xQueueSemaphoreTake+0x248>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006046:	f001 fc7b 	bl	8007940 <vPortExitCritical>
                return pdPASS;
 800604a:	2301      	movs	r3, #1
 800604c:	e0b8      	b.n	80061c0 <xQueueSemaphoreTake+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d122      	bne.n	800609a <xQueueSemaphoreTake+0x11a>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <xQueueSemaphoreTake+0xf2>
        __asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	613b      	str	r3, [r7, #16]
    }
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xQueueSemaphoreTake+0xee>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006072:	f001 fc65 	bl	8007940 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	4618      	mov	r0, r3
 800607a:	f004 fad5 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 800607e:	4604      	mov	r4, r0
 8006080:	2000      	movs	r0, #0
 8006082:	f004 fad1 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8006086:	4602      	mov	r2, r0
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2101      	movs	r1, #1
 800608c:	9100      	str	r1, [sp, #0]
 800608e:	4621      	mov	r1, r4
 8006090:	205c      	movs	r0, #92	@ 0x5c
 8006092:	f003 fdb1 	bl	8009bf8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8006096:	2300      	movs	r3, #0
 8006098:	e092      	b.n	80061c0 <xQueueSemaphoreTake+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 800609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <xQueueSemaphoreTake+0x12e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 ff09 	bl	8006ebc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80060ae:	f001 fc47 	bl	8007940 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80060b2:	f000 fc7b 	bl	80069ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80060b6:	f001 fc11 	bl	80078dc <vPortEnterCritical>
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060c0:	b25b      	sxtb	r3, r3
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c6:	d103      	bne.n	80060d0 <xQueueSemaphoreTake+0x150>
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060dc:	d103      	bne.n	80060e6 <xQueueSemaphoreTake+0x166>
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e6:	f001 fc2b 	bl	8007940 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ea:	463a      	mov	r2, r7
 80060ec:	f107 0308 	add.w	r3, r7, #8
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fef8 	bl	8006ee8 <xTaskCheckForTimeOut>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d132      	bne.n	8006164 <xQueueSemaphoreTake+0x1e4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006100:	f000 f938 	bl	8006374 <prvIsQueueEmpty>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d026      	beq.n	8006158 <xQueueSemaphoreTake+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <xQueueSemaphoreTake+0x1a6>
                        {
                            taskENTER_CRITICAL();
 8006112:	f001 fbe3 	bl	80078dc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f80a 	bl	8007134 <xTaskPriorityInherit>
 8006120:	62b8      	str	r0, [r7, #40]	@ 0x28
                            }
                            taskEXIT_CRITICAL();
 8006122:	f001 fc0d 	bl	8007940 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	3324      	adds	r3, #36	@ 0x24
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fe36 	bl	8006da0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006134:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006136:	f000 f8cb 	bl	80062d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800613a:	f000 fc45 	bl	80069c8 <xTaskResumeAll>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af47 	bne.w	8005fd4 <xQueueSemaphoreTake+0x54>
                {
                    portYIELD_WITHIN_API();
 8006146:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <xQueueSemaphoreTake+0x248>)
 8006148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	e73d      	b.n	8005fd4 <xQueueSemaphoreTake+0x54>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800615a:	f000 f8b9 	bl	80062d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800615e:	f000 fc33 	bl	80069c8 <xTaskResumeAll>
 8006162:	e737      	b.n	8005fd4 <xQueueSemaphoreTake+0x54>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006166:	f000 f8b3 	bl	80062d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800616a:	f000 fc2d 	bl	80069c8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800616e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006170:	f000 f900 	bl	8006374 <prvIsQueueEmpty>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	f43f af2c 	beq.w	8005fd4 <xQueueSemaphoreTake+0x54>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <xQueueSemaphoreTake+0x21e>
                        {
                            taskENTER_CRITICAL();
 8006182:	f001 fbab 	bl	80078dc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006186:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006188:	f000 f820 	bl	80061cc <prvGetDisinheritPriorityAfterTimeout>
 800618c:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	4618      	mov	r0, r3
 8006196:	f001 f8c9 	bl	800732c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800619a:	f001 fbd1 	bl	8007940 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f004 fa41 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 80061a6:	4604      	mov	r4, r0
 80061a8:	2000      	movs	r0, #0
 80061aa:	f004 fa3d 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 80061ae:	4602      	mov	r2, r0
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2101      	movs	r1, #1
 80061b4:	9100      	str	r1, [sp, #0]
 80061b6:	4621      	mov	r1, r4
 80061b8:	205c      	movs	r0, #92	@ 0x5c
 80061ba:	f003 fd1d 	bl	8009bf8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80061be:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3734      	adds	r7, #52	@ 0x34
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd90      	pop	{r4, r7, pc}
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d006      	beq.n	80061ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1c3 0305 	rsb	r3, r3, #5
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e001      	b.n	80061ee <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80061ee:	68fb      	ldr	r3, [r7, #12]
    }
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d14d      	bne.n	80062be <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fffe 	bl	8007228 <xTaskPriorityDisinherit>
 800622c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	e043      	b.n	80062be <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d119      	bne.n	8006270 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6858      	ldr	r0, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	461a      	mov	r2, r3
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	f004 fbd4 	bl	800a9f4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	429a      	cmp	r2, r3
 8006264:	d32b      	bcc.n	80062be <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	e026      	b.n	80062be <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68d8      	ldr	r0, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	461a      	mov	r2, r3
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	f004 fbba 	bl	800a9f4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	425b      	negs	r3, r3
 800628a:	441a      	add	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d207      	bcs.n	80062ac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a4:	425b      	negs	r3, r3
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d105      	bne.n	80062be <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80062c6:	697b      	ldr	r3, [r7, #20]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80062d8:	f001 fb00 	bl	80078dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e4:	e011      	b.n	800630a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d012      	beq.n	8006314 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3324      	adds	r3, #36	@ 0x24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fd7a 	bl	8006dec <xTaskRemoveFromEventList>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80062fe:	f000 fe5b 	bl	8006fb8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	3b01      	subs	r3, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800630a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	dce9      	bgt.n	80062e6 <prvUnlockQueue+0x16>
 8006312:	e000      	b.n	8006316 <prvUnlockQueue+0x46>
                        break;
 8006314:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	22ff      	movs	r2, #255	@ 0xff
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800631e:	f001 fb0f 	bl	8007940 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006322:	f001 fadb 	bl	80078dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800632c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800632e:	e011      	b.n	8006354 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d012      	beq.n	800635e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3310      	adds	r3, #16
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fd55 	bl	8006dec <xTaskRemoveFromEventList>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006348:	f000 fe36 	bl	8006fb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	3b01      	subs	r3, #1
 8006350:	b2db      	uxtb	r3, r3
 8006352:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dce9      	bgt.n	8006330 <prvUnlockQueue+0x60>
 800635c:	e000      	b.n	8006360 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800635e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	22ff      	movs	r2, #255	@ 0xff
 8006364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006368:	f001 faea 	bl	8007940 <vPortExitCritical>
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800637c:	f001 faae 	bl	80078dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e001      	b.n	8006392 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006392:	f001 fad5 	bl	8007940 <vPortExitCritical>

    return xReturn;
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80063a8:	f001 fa98 	bl	80078dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d102      	bne.n	80063be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e001      	b.n	80063c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80063c2:	f001 fabd 	bl	8007940 <vPortExitCritical>

    return xReturn;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	@ 0x30
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 fbab 	bl	8007b40 <pvPortMalloc>
 80063ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00e      	beq.n	8006410 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063f2:	2058      	movs	r0, #88	@ 0x58
 80063f4:	f001 fba4 	bl	8007b40 <pvPortMalloc>
 80063f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30
 8006406:	e005      	b.n	8006414 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006408:	6978      	ldr	r0, [r7, #20]
 800640a:	f001 fc7b 	bl	8007d04 <vPortFree>
 800640e:	e001      	b.n	8006414 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d013      	beq.n	8006442 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	2300      	movs	r3, #0
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	9302      	str	r3, [sp, #8]
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f80e 	bl	8006452 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006436:	69f8      	ldr	r0, [r7, #28]
 8006438:	f000 f8a2 	bl	8006580 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e002      	b.n	8006448 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006446:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006448:	69bb      	ldr	r3, [r7, #24]
    }
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	461a      	mov	r2, r3
 800646a:	21a5      	movs	r1, #165	@ 0xa5
 800646c:	f004 fa95 	bl	800a99a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800647a:	3b01      	subs	r3, #1
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	f023 0307 	bic.w	r3, r3, #7
 8006488:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	617b      	str	r3, [r7, #20]
    }
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d01f      	beq.n	80064f2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	e012      	b.n	80064de <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	7819      	ldrb	r1, [r3, #0]
 80064c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	3334      	adds	r3, #52	@ 0x34
 80064c8:	460a      	mov	r2, r1
 80064ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	3301      	adds	r3, #1
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b09      	cmp	r3, #9
 80064e2:	d9e9      	bls.n	80064b8 <prvInitialiseNewTask+0x66>
 80064e4:	e000      	b.n	80064e8 <prvInitialiseNewTask+0x96>
            {
                break;
 80064e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80064f0:	e003      	b.n	80064fa <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d901      	bls.n	8006504 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006500:	2304      	movs	r3, #4
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006508:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800650e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	2200      	movs	r2, #0
 8006514:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	3304      	adds	r3, #4
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fa96 	bl	8005a4c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	3318      	adds	r3, #24
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fa91 	bl	8005a4c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800652e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	f1c3 0205 	rsb	r2, r3, #5
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	3350      	adds	r3, #80	@ 0x50
 8006544:	2204      	movs	r2, #4
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f004 fa26 	bl	800a99a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	3354      	adds	r3, #84	@ 0x54
 8006552:	2201      	movs	r2, #1
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f004 fa1f 	bl	800a99a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	69b8      	ldr	r0, [r7, #24]
 8006562:	f001 f809 	bl	8007578 <pxPortInitialiseStack>
 8006566:	4602      	mov	r2, r0
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006576:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006578:	bf00      	nop
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006580:	b5b0      	push	{r4, r5, r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af02      	add	r7, sp, #8
 8006586:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006588:	f001 f9a8 	bl	80078dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800658c:	4b3b      	ldr	r3, [pc, #236]	@ (800667c <prvAddNewTaskToReadyList+0xfc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a3a      	ldr	r2, [pc, #232]	@ (800667c <prvAddNewTaskToReadyList+0xfc>)
 8006594:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006596:	4b3a      	ldr	r3, [pc, #232]	@ (8006680 <prvAddNewTaskToReadyList+0x100>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800659e:	4a38      	ldr	r2, [pc, #224]	@ (8006680 <prvAddNewTaskToReadyList+0x100>)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065a4:	4b35      	ldr	r3, [pc, #212]	@ (800667c <prvAddNewTaskToReadyList+0xfc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d110      	bne.n	80065ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80065ac:	f000 fd28 	bl	8007000 <prvInitialiseTaskLists>
 80065b0:	e00d      	b.n	80065ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80065b2:	4b34      	ldr	r3, [pc, #208]	@ (8006684 <prvAddNewTaskToReadyList+0x104>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065ba:	4b31      	ldr	r3, [pc, #196]	@ (8006680 <prvAddNewTaskToReadyList+0x100>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d802      	bhi.n	80065ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80065c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006680 <prvAddNewTaskToReadyList+0x100>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80065ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006688 <prvAddNewTaskToReadyList+0x108>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006688 <prvAddNewTaskToReadyList+0x108>)
 80065d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006688 <prvAddNewTaskToReadyList+0x108>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <prvAddNewTaskToReadyList+0x94>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f003 fef7 	bl	800a3dc <SEGGER_SYSVIEW_OnTaskCreate>
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	461d      	mov	r5, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461c      	mov	r4, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660a:	1ae3      	subs	r3, r4, r3
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	462b      	mov	r3, r5
 8006610:	f001 fd48 	bl	80080a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4618      	mov	r0, r3
 8006618:	f003 ff64 	bl	800a4e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	2201      	movs	r2, #1
 8006622:	409a      	lsls	r2, r3
 8006624:	4b19      	ldr	r3, [pc, #100]	@ (800668c <prvAddNewTaskToReadyList+0x10c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4313      	orrs	r3, r2
 800662a:	4a18      	ldr	r2, [pc, #96]	@ (800668c <prvAddNewTaskToReadyList+0x10c>)
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4a15      	ldr	r2, [pc, #84]	@ (8006690 <prvAddNewTaskToReadyList+0x110>)
 800663c:	441a      	add	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7ff fa0e 	bl	8005a66 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800664a:	f001 f979 	bl	8007940 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <prvAddNewTaskToReadyList+0x104>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006656:	4b0a      	ldr	r3, [pc, #40]	@ (8006680 <prvAddNewTaskToReadyList+0x100>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	429a      	cmp	r2, r3
 8006662:	d207      	bcs.n	8006674 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006664:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <prvAddNewTaskToReadyList+0x114>)
 8006666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bdb0      	pop	{r4, r5, r7, pc}
 800667c:	20000444 	.word	0x20000444
 8006680:	2000036c 	.word	0x2000036c
 8006684:	20000450 	.word	0x20000450
 8006688:	20000460 	.word	0x20000460
 800668c:	2000044c 	.word	0x2000044c
 8006690:	20000370 	.word	0x20000370
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80066a0:	f001 f91c 	bl	80078dc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <vTaskDelete+0x18>
 80066aa:	4b46      	ldr	r3, [pc, #280]	@ (80067c4 <vTaskDelete+0x12c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	e000      	b.n	80066b2 <vTaskDelete+0x1a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fa31 	bl	8005b20 <uxListRemove>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d115      	bne.n	80066f0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c8:	493f      	ldr	r1, [pc, #252]	@ (80067c8 <vTaskDelete+0x130>)
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <vTaskDelete+0x58>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	2201      	movs	r2, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43da      	mvns	r2, r3
 80066e6:	4b39      	ldr	r3, [pc, #228]	@ (80067cc <vTaskDelete+0x134>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4013      	ands	r3, r2
 80066ec:	4a37      	ldr	r2, [pc, #220]	@ (80067cc <vTaskDelete+0x134>)
 80066ee:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3318      	adds	r3, #24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fa0f 	bl	8005b20 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8006702:	4b33      	ldr	r3, [pc, #204]	@ (80067d0 <vTaskDelete+0x138>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a31      	ldr	r2, [pc, #196]	@ (80067d0 <vTaskDelete+0x138>)
 800670a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800670c:	4b2d      	ldr	r3, [pc, #180]	@ (80067c4 <vTaskDelete+0x12c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	429a      	cmp	r2, r3
 8006714:	d118      	bne.n	8006748 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	482d      	ldr	r0, [pc, #180]	@ (80067d4 <vTaskDelete+0x13c>)
 800671e:	f7ff f9a2 	bl	8005a66 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8006722:	4b2d      	ldr	r3, [pc, #180]	@ (80067d8 <vTaskDelete+0x140>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	4a2b      	ldr	r2, [pc, #172]	@ (80067d8 <vTaskDelete+0x140>)
 800672a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4618      	mov	r0, r3
 8006730:	f003 ff7a 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 8006734:	4603      	mov	r3, r0
 8006736:	4619      	mov	r1, r3
 8006738:	2022      	movs	r0, #34	@ 0x22
 800673a:	f003 f951 	bl	80099e0 <SEGGER_SYSVIEW_RecordU32>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4618      	mov	r0, r3
 8006742:	f001 fd17 	bl	8008174 <SYSVIEW_DeleteTask>
 8006746:	e016      	b.n	8006776 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8006748:	4b24      	ldr	r3, [pc, #144]	@ (80067dc <vTaskDelete+0x144>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a23      	ldr	r2, [pc, #140]	@ (80067dc <vTaskDelete+0x144>)
 8006750:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4618      	mov	r0, r3
 8006756:	f003 ff67 	bl	800a628 <SEGGER_SYSVIEW_ShrinkId>
 800675a:	4603      	mov	r3, r0
 800675c:	4619      	mov	r1, r3
 800675e:	2022      	movs	r0, #34	@ 0x22
 8006760:	f003 f93e 	bl	80099e0 <SEGGER_SYSVIEW_RecordU32>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fd04 	bl	8008174 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fcb5 	bl	80070dc <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8006772:	f000 fcc3 	bl	80070fc <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8006776:	f001 f8e3 	bl	8007940 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800677a:	4b19      	ldr	r3, [pc, #100]	@ (80067e0 <vTaskDelete+0x148>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01c      	beq.n	80067bc <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 8006782:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <vTaskDelete+0x12c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d117      	bne.n	80067bc <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800678c:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <vTaskDelete+0x14c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <vTaskDelete+0x114>
        __asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	60bb      	str	r3, [r7, #8]
    }
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80067ac:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <vTaskDelete+0x150>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	2000036c 	.word	0x2000036c
 80067c8:	20000370 	.word	0x20000370
 80067cc:	2000044c 	.word	0x2000044c
 80067d0:	20000460 	.word	0x20000460
 80067d4:	20000418 	.word	0x20000418
 80067d8:	2000042c 	.word	0x2000042c
 80067dc:	20000444 	.word	0x20000444
 80067e0:	20000450 	.word	0x20000450
 80067e4:	2000046c 	.word	0x2000046c
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	@ 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <xTaskDelayUntil+0x2c>
        __asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	617b      	str	r3, [r7, #20]
    }
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	e7fd      	b.n	8006814 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <xTaskDelayUntil+0x4a>
        __asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	613b      	str	r3, [r7, #16]
    }
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8006836:	4b2c      	ldr	r3, [pc, #176]	@ (80068e8 <xTaskDelayUntil+0xfc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <xTaskDelayUntil+0x6a>
        __asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60fb      	str	r3, [r7, #12]
    }
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8006856:	f000 f8a9 	bl	80069ac <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800685a:	4b24      	ldr	r3, [pc, #144]	@ (80068ec <xTaskDelayUntil+0x100>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	4413      	add	r3, r2
 8006868:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6a3a      	ldr	r2, [r7, #32]
 8006870:	429a      	cmp	r2, r3
 8006872:	d20b      	bcs.n	800688c <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	429a      	cmp	r2, r3
 800687c:	d211      	bcs.n	80068a2 <xTaskDelayUntil+0xb6>
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	429a      	cmp	r2, r3
 8006884:	d90d      	bls.n	80068a2 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8006886:	2301      	movs	r3, #1
 8006888:	627b      	str	r3, [r7, #36]	@ 0x24
 800688a:	e00a      	b.n	80068a2 <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	429a      	cmp	r2, r3
 8006894:	d303      	bcc.n	800689e <xTaskDelayUntil+0xb2>
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	429a      	cmp	r2, r3
 800689c:	d901      	bls.n	80068a2 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 800689e:	2301      	movs	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <xTaskDelayUntil+0xd6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80068ae:	2024      	movs	r0, #36	@ 0x24
 80068b0:	f003 f878 	bl	80099a4 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fde3 	bl	8007488 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80068c2:	f000 f881 	bl	80069c8 <xTaskResumeAll>
 80068c6:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d107      	bne.n	80068de <xTaskDelayUntil+0xf2>
        {
            portYIELD_WITHIN_API();
 80068ce:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <xTaskDelayUntil+0x104>)
 80068d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80068e0:	4618      	mov	r0, r3
 80068e2:	3728      	adds	r7, #40	@ 0x28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	2000046c 	.word	0x2000046c
 80068ec:	20000448 	.word	0x20000448
 80068f0:	e000ed04 	.word	0xe000ed04

080068f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80068fa:	4b24      	ldr	r3, [pc, #144]	@ (800698c <vTaskStartScheduler+0x98>)
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	2300      	movs	r3, #0
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	2300      	movs	r3, #0
 8006904:	2282      	movs	r2, #130	@ 0x82
 8006906:	4922      	ldr	r1, [pc, #136]	@ (8006990 <vTaskStartScheduler+0x9c>)
 8006908:	4822      	ldr	r0, [pc, #136]	@ (8006994 <vTaskStartScheduler+0xa0>)
 800690a:	f7ff fd61 	bl	80063d0 <xTaskCreate>
 800690e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d124      	bne.n	8006960 <vTaskStartScheduler+0x6c>
        __asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60bb      	str	r3, [r7, #8]
    }
 8006928:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800692a:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <vTaskStartScheduler+0xa4>)
 800692c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006930:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006932:	4b1a      	ldr	r3, [pc, #104]	@ (800699c <vTaskStartScheduler+0xa8>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006938:	4b19      	ldr	r3, [pc, #100]	@ (80069a0 <vTaskStartScheduler+0xac>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800693e:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <vTaskStartScheduler+0xb0>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b12      	ldr	r3, [pc, #72]	@ (800698c <vTaskStartScheduler+0x98>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d102      	bne.n	8006950 <vTaskStartScheduler+0x5c>
 800694a:	f003 fd2b 	bl	800a3a4 <SEGGER_SYSVIEW_OnIdle>
 800694e:	e004      	b.n	800695a <vTaskStartScheduler+0x66>
 8006950:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <vTaskStartScheduler+0xb0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f003 fd83 	bl	800a460 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800695a:	f000 fe9b 	bl	8007694 <xPortStartScheduler>
 800695e:	e00f      	b.n	8006980 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006966:	d10b      	bne.n	8006980 <vTaskStartScheduler+0x8c>
        __asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	607b      	str	r3, [r7, #4]
    }
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006980:	4b09      	ldr	r3, [pc, #36]	@ (80069a8 <vTaskStartScheduler+0xb4>)
 8006982:	681b      	ldr	r3, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000468 	.word	0x20000468
 8006990:	0800ab58 	.word	0x0800ab58
 8006994:	08006fd1 	.word	0x08006fd1
 8006998:	20000464 	.word	0x20000464
 800699c:	20000450 	.word	0x20000450
 80069a0:	20000448 	.word	0x20000448
 80069a4:	2000036c 	.word	0x2000036c
 80069a8:	2000000c 	.word	0x2000000c

080069ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80069b0:	4b04      	ldr	r3, [pc, #16]	@ (80069c4 <vTaskSuspendAll+0x18>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	4a03      	ldr	r2, [pc, #12]	@ (80069c4 <vTaskSuspendAll+0x18>)
 80069b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80069ba:	bf00      	nop
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	2000046c 	.word	0x2000046c

080069c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80069d6:	4b44      	ldr	r3, [pc, #272]	@ (8006ae8 <xTaskResumeAll+0x120>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xTaskResumeAll+0x2e>
        __asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	603b      	str	r3, [r7, #0]
    }
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80069f6:	f000 ff71 	bl	80078dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80069fa:	4b3b      	ldr	r3, [pc, #236]	@ (8006ae8 <xTaskResumeAll+0x120>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a39      	ldr	r2, [pc, #228]	@ (8006ae8 <xTaskResumeAll+0x120>)
 8006a02:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a04:	4b38      	ldr	r3, [pc, #224]	@ (8006ae8 <xTaskResumeAll+0x120>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d165      	bne.n	8006ad8 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a0c:	4b37      	ldr	r3, [pc, #220]	@ (8006aec <xTaskResumeAll+0x124>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d061      	beq.n	8006ad8 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a14:	e032      	b.n	8006a7c <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a16:	4b36      	ldr	r3, [pc, #216]	@ (8006af0 <xTaskResumeAll+0x128>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3318      	adds	r3, #24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f87c 	bl	8005b20 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff f877 	bl	8005b20 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f003 fd55 	bl	800a4e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	2201      	movs	r2, #1
 8006a40:	409a      	lsls	r2, r3
 8006a42:	4b2c      	ldr	r3, [pc, #176]	@ (8006af4 <xTaskResumeAll+0x12c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	4a2a      	ldr	r2, [pc, #168]	@ (8006af4 <xTaskResumeAll+0x12c>)
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4a27      	ldr	r2, [pc, #156]	@ (8006af8 <xTaskResumeAll+0x130>)
 8006a5a:	441a      	add	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f7fe ffff 	bl	8005a66 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6c:	4b23      	ldr	r3, [pc, #140]	@ (8006afc <xTaskResumeAll+0x134>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8006a76:	4b22      	ldr	r3, [pc, #136]	@ (8006b00 <xTaskResumeAll+0x138>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006af0 <xTaskResumeAll+0x128>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1c8      	bne.n	8006a16 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006a8a:	f000 fb37 	bl	80070fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <xTaskResumeAll+0x13c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d010      	beq.n	8006abc <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006a9a:	f000 f859 	bl	8006b50 <xTaskIncrementTick>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8006aa4:	4b16      	ldr	r3, [pc, #88]	@ (8006b00 <xTaskResumeAll+0x138>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f1      	bne.n	8006a9a <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8006ab6:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <xTaskResumeAll+0x13c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006abc:	4b10      	ldr	r3, [pc, #64]	@ (8006b00 <xTaskResumeAll+0x138>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b08 <xTaskResumeAll+0x140>)
 8006aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006ad8:	f000 ff32 	bl	8007940 <vPortExitCritical>

    return xAlreadyYielded;
 8006adc:	68bb      	ldr	r3, [r7, #8]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	2000046c 	.word	0x2000046c
 8006aec:	20000444 	.word	0x20000444
 8006af0:	20000404 	.word	0x20000404
 8006af4:	2000044c 	.word	0x2000044c
 8006af8:	20000370 	.word	0x20000370
 8006afc:	2000036c 	.word	0x2000036c
 8006b00:	20000458 	.word	0x20000458
 8006b04:	20000454 	.word	0x20000454
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006b12:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <xTaskGetTickCount+0x1c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006b18:	687b      	ldr	r3, [r7, #4]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000448 	.word	0x20000448

08006b2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b32:	f000 ffc3 	bl	8007abc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006b36:	2300      	movs	r3, #0
 8006b38:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006b3a:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <xTaskGetTickCountFromISR+0x20>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006b40:	683b      	ldr	r3, [r7, #0]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000448 	.word	0x20000448

08006b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b5a:	4b51      	ldr	r3, [pc, #324]	@ (8006ca0 <xTaskIncrementTick+0x150>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 8093 	bne.w	8006c8a <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b64:	4b4f      	ldr	r3, [pc, #316]	@ (8006ca4 <xTaskIncrementTick+0x154>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8006ca4 <xTaskIncrementTick+0x154>)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d121      	bne.n	8006bbc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006b78:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca8 <xTaskIncrementTick+0x158>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <xTaskIncrementTick+0x4a>
        __asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	603b      	str	r3, [r7, #0]
    }
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <xTaskIncrementTick+0x46>
 8006b9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <xTaskIncrementTick+0x158>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	4b42      	ldr	r3, [pc, #264]	@ (8006cac <xTaskIncrementTick+0x15c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a40      	ldr	r2, [pc, #256]	@ (8006ca8 <xTaskIncrementTick+0x158>)
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4a40      	ldr	r2, [pc, #256]	@ (8006cac <xTaskIncrementTick+0x15c>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	4b40      	ldr	r3, [pc, #256]	@ (8006cb0 <xTaskIncrementTick+0x160>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8006cb0 <xTaskIncrementTick+0x160>)
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	f000 faa0 	bl	80070fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8006cb4 <xTaskIncrementTick+0x164>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d34c      	bcc.n	8006c60 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc6:	4b38      	ldr	r3, [pc, #224]	@ (8006ca8 <xTaskIncrementTick+0x158>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd0:	4b38      	ldr	r3, [pc, #224]	@ (8006cb4 <xTaskIncrementTick+0x164>)
 8006bd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bd6:	601a      	str	r2, [r3, #0]
                    break;
 8006bd8:	e042      	b.n	8006c60 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bda:	4b33      	ldr	r3, [pc, #204]	@ (8006ca8 <xTaskIncrementTick+0x158>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d203      	bcs.n	8006bfa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006bf2:	4a30      	ldr	r2, [pc, #192]	@ (8006cb4 <xTaskIncrementTick+0x164>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bf8:	e032      	b.n	8006c60 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe ff8e 	bl	8005b20 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3318      	adds	r3, #24
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe ff85 	bl	8005b20 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f003 fc63 	bl	800a4e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	2201      	movs	r2, #1
 8006c24:	409a      	lsls	r2, r3
 8006c26:	4b24      	ldr	r3, [pc, #144]	@ (8006cb8 <xTaskIncrementTick+0x168>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	4a22      	ldr	r2, [pc, #136]	@ (8006cb8 <xTaskIncrementTick+0x168>)
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cbc <xTaskIncrementTick+0x16c>)
 8006c3e:	441a      	add	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe ff0d 	bl	8005a66 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c50:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <xTaskIncrementTick+0x170>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d3b5      	bcc.n	8006bc6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c5e:	e7b2      	b.n	8006bc6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c60:	4b17      	ldr	r3, [pc, #92]	@ (8006cc0 <xTaskIncrementTick+0x170>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4915      	ldr	r1, [pc, #84]	@ (8006cbc <xTaskIncrementTick+0x16c>)
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	440b      	add	r3, r1
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d901      	bls.n	8006c7c <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006c7c:	4b11      	ldr	r3, [pc, #68]	@ (8006cc4 <xTaskIncrementTick+0x174>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e004      	b.n	8006c94 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc8 <xTaskIncrementTick+0x178>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc8 <xTaskIncrementTick+0x178>)
 8006c92:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006c94:	697b      	ldr	r3, [r7, #20]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	2000046c 	.word	0x2000046c
 8006ca4:	20000448 	.word	0x20000448
 8006ca8:	200003fc 	.word	0x200003fc
 8006cac:	20000400 	.word	0x20000400
 8006cb0:	2000045c 	.word	0x2000045c
 8006cb4:	20000464 	.word	0x20000464
 8006cb8:	2000044c 	.word	0x2000044c
 8006cbc:	20000370 	.word	0x20000370
 8006cc0:	2000036c 	.word	0x2000036c
 8006cc4:	20000458 	.word	0x20000458
 8006cc8:	20000454 	.word	0x20000454

08006ccc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d88 <vTaskSwitchContext+0xbc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006cda:	4b2c      	ldr	r3, [pc, #176]	@ (8006d8c <vTaskSwitchContext+0xc0>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006ce0:	e04e      	b.n	8006d80 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d8c <vTaskSwitchContext+0xc0>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	4b29      	ldr	r3, [pc, #164]	@ (8006d90 <vTaskSwitchContext+0xc4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	fab3 f383 	clz	r3, r3
 8006cf4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	f1c3 031f 	rsb	r3, r3, #31
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	4925      	ldr	r1, [pc, #148]	@ (8006d94 <vTaskSwitchContext+0xc8>)
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <vTaskSwitchContext+0x5e>
        __asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	607b      	str	r3, [r7, #4]
    }
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <vTaskSwitchContext+0x5a>
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4a17      	ldr	r2, [pc, #92]	@ (8006d94 <vTaskSwitchContext+0xc8>)
 8006d36:	4413      	add	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d104      	bne.n	8006d5a <vTaskSwitchContext+0x8e>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4a0d      	ldr	r2, [pc, #52]	@ (8006d98 <vTaskSwitchContext+0xcc>)
 8006d62:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006d64:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <vTaskSwitchContext+0xcc>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <vTaskSwitchContext+0xd0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d102      	bne.n	8006d76 <vTaskSwitchContext+0xaa>
 8006d70:	f003 fb18 	bl	800a3a4 <SEGGER_SYSVIEW_OnIdle>
}
 8006d74:	e004      	b.n	8006d80 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8006d76:	4b08      	ldr	r3, [pc, #32]	@ (8006d98 <vTaskSwitchContext+0xcc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f003 fb70 	bl	800a460 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006d80:	bf00      	nop
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000046c 	.word	0x2000046c
 8006d8c:	20000458 	.word	0x20000458
 8006d90:	2000044c 	.word	0x2000044c
 8006d94:	20000370 	.word	0x20000370
 8006d98:	2000036c 	.word	0x2000036c
 8006d9c:	20000468 	.word	0x20000468

08006da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
    }
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dc8:	4b07      	ldr	r3, [pc, #28]	@ (8006de8 <vTaskPlaceOnEventList+0x48>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3318      	adds	r3, #24
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fe fe6c 	bl	8005aae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	6838      	ldr	r0, [r7, #0]
 8006dda:	f000 fb55 	bl	8007488 <prvAddCurrentTaskToDelayedList>
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	2000036c 	.word	0x2000036c

08006dec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
    }
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	3318      	adds	r3, #24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fe7e 	bl	8005b20 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e24:	4b1f      	ldr	r3, [pc, #124]	@ (8006ea4 <xTaskRemoveFromEventList+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d120      	bne.n	8006e6e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fe75 	bl	8005b20 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f003 fb53 	bl	800a4e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	2201      	movs	r2, #1
 8006e44:	409a      	lsls	r2, r3
 8006e46:	4b18      	ldr	r3, [pc, #96]	@ (8006ea8 <xTaskRemoveFromEventList+0xbc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	4a16      	ldr	r2, [pc, #88]	@ (8006ea8 <xTaskRemoveFromEventList+0xbc>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4a13      	ldr	r2, [pc, #76]	@ (8006eac <xTaskRemoveFromEventList+0xc0>)
 8006e5e:	441a      	add	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7fe fdfd 	bl	8005a66 <vListInsertEnd>
 8006e6c:	e005      	b.n	8006e7a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3318      	adds	r3, #24
 8006e72:	4619      	mov	r1, r3
 8006e74:	480e      	ldr	r0, [pc, #56]	@ (8006eb0 <xTaskRemoveFromEventList+0xc4>)
 8006e76:	f7fe fdf6 	bl	8005a66 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <xTaskRemoveFromEventList+0xc8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d905      	bls.n	8006e94 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <xTaskRemoveFromEventList+0xcc>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e001      	b.n	8006e98 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006e98:	697b      	ldr	r3, [r7, #20]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000046c 	.word	0x2000046c
 8006ea8:	2000044c 	.word	0x2000044c
 8006eac:	20000370 	.word	0x20000370
 8006eb0:	20000404 	.word	0x20000404
 8006eb4:	2000036c 	.word	0x2000036c
 8006eb8:	20000458 	.word	0x20000458

08006ebc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <vTaskInternalSetTimeOutState+0x24>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <vTaskInternalSetTimeOutState+0x28>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	605a      	str	r2, [r3, #4]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	2000045c 	.word	0x2000045c
 8006ee4:	20000448 	.word	0x20000448

08006ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	613b      	str	r3, [r7, #16]
    }
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
    }
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006f2e:	f000 fcd5 	bl	80078dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006f32:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb0 <xTaskCheckForTimeOut+0xc8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f4a:	d102      	bne.n	8006f52 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e026      	b.n	8006fa0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b17      	ldr	r3, [pc, #92]	@ (8006fb4 <xTaskCheckForTimeOut+0xcc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d00a      	beq.n	8006f74 <xTaskCheckForTimeOut+0x8c>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d305      	bcc.n	8006f74 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e015      	b.n	8006fa0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d20b      	bcs.n	8006f96 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff ff96 	bl	8006ebc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	e004      	b.n	8006fa0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006fa0:	f000 fcce 	bl	8007940 <vPortExitCritical>

    return xReturn;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3720      	adds	r7, #32
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000448 	.word	0x20000448
 8006fb4:	2000045c 	.word	0x2000045c

08006fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	@ (8006fcc <vTaskMissedYield+0x14>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
}
 8006fc2:	bf00      	nop
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000458 	.word	0x20000458

08006fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006fd8:	f000 f852 	bl	8007080 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <prvIdleTask+0x28>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d9f9      	bls.n	8006fd8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006fe4:	4b05      	ldr	r3, [pc, #20]	@ (8006ffc <prvIdleTask+0x2c>)
 8006fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006ff4:	e7f0      	b.n	8006fd8 <prvIdleTask+0x8>
 8006ff6:	bf00      	nop
 8006ff8:	20000370 	.word	0x20000370
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	e00c      	b.n	8007026 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4a12      	ldr	r2, [pc, #72]	@ (8007060 <prvInitialiseTaskLists+0x60>)
 8007018:	4413      	add	r3, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fcf6 	bl	8005a0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3301      	adds	r3, #1
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d9ef      	bls.n	800700c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800702c:	480d      	ldr	r0, [pc, #52]	@ (8007064 <prvInitialiseTaskLists+0x64>)
 800702e:	f7fe fced 	bl	8005a0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007032:	480d      	ldr	r0, [pc, #52]	@ (8007068 <prvInitialiseTaskLists+0x68>)
 8007034:	f7fe fcea 	bl	8005a0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007038:	480c      	ldr	r0, [pc, #48]	@ (800706c <prvInitialiseTaskLists+0x6c>)
 800703a:	f7fe fce7 	bl	8005a0c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800703e:	480c      	ldr	r0, [pc, #48]	@ (8007070 <prvInitialiseTaskLists+0x70>)
 8007040:	f7fe fce4 	bl	8005a0c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007044:	480b      	ldr	r0, [pc, #44]	@ (8007074 <prvInitialiseTaskLists+0x74>)
 8007046:	f7fe fce1 	bl	8005a0c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800704a:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <prvInitialiseTaskLists+0x78>)
 800704c:	4a05      	ldr	r2, [pc, #20]	@ (8007064 <prvInitialiseTaskLists+0x64>)
 800704e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007050:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <prvInitialiseTaskLists+0x7c>)
 8007052:	4a05      	ldr	r2, [pc, #20]	@ (8007068 <prvInitialiseTaskLists+0x68>)
 8007054:	601a      	str	r2, [r3, #0]
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000370 	.word	0x20000370
 8007064:	200003d4 	.word	0x200003d4
 8007068:	200003e8 	.word	0x200003e8
 800706c:	20000404 	.word	0x20000404
 8007070:	20000418 	.word	0x20000418
 8007074:	20000430 	.word	0x20000430
 8007078:	200003fc 	.word	0x200003fc
 800707c:	20000400 	.word	0x20000400

08007080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007086:	e019      	b.n	80070bc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007088:	f000 fc28 	bl	80078dc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708c:	4b10      	ldr	r3, [pc, #64]	@ (80070d0 <prvCheckTasksWaitingTermination+0x50>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fd41 	bl	8005b20 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <prvCheckTasksWaitingTermination+0x54>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	4a0b      	ldr	r2, [pc, #44]	@ (80070d4 <prvCheckTasksWaitingTermination+0x54>)
 80070a6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80070a8:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <prvCheckTasksWaitingTermination+0x58>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a0a      	ldr	r2, [pc, #40]	@ (80070d8 <prvCheckTasksWaitingTermination+0x58>)
 80070b0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80070b2:	f000 fc45 	bl	8007940 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f810 	bl	80070dc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070bc:	4b06      	ldr	r3, [pc, #24]	@ (80070d8 <prvCheckTasksWaitingTermination+0x58>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e1      	bne.n	8007088 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000418 	.word	0x20000418
 80070d4:	20000444 	.word	0x20000444
 80070d8:	2000042c 	.word	0x2000042c

080070dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fe0b 	bl	8007d04 <vPortFree>
                vPortFree( pxTCB );
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fe08 	bl	8007d04 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007100:	4b0a      	ldr	r3, [pc, #40]	@ (800712c <prvResetNextTaskUnblockTime+0x30>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800710a:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <prvResetNextTaskUnblockTime+0x34>)
 800710c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007110:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007112:	e005      	b.n	8007120 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007114:	4b05      	ldr	r3, [pc, #20]	@ (800712c <prvResetNextTaskUnblockTime+0x30>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <prvResetNextTaskUnblockTime+0x34>)
 800711e:	6013      	str	r3, [r2, #0]
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	200003fc 	.word	0x200003fc
 8007130:	20000464 	.word	0x20000464

08007134 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d063      	beq.n	8007212 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714e:	4b33      	ldr	r3, [pc, #204]	@ (800721c <xTaskPriorityInherit+0xe8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	429a      	cmp	r2, r3
 8007156:	d253      	bcs.n	8007200 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	db06      	blt.n	800716e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007160:	4b2e      	ldr	r3, [pc, #184]	@ (800721c <xTaskPriorityInherit+0xe8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007166:	f1c3 0205 	rsb	r2, r3, #5
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6959      	ldr	r1, [r3, #20]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4a28      	ldr	r2, [pc, #160]	@ (8007220 <xTaskPriorityInherit+0xec>)
 8007180:	4413      	add	r3, r2
 8007182:	4299      	cmp	r1, r3
 8007184:	d12f      	bne.n	80071e6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3304      	adds	r3, #4
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fcc8 	bl	8005b20 <uxListRemove>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	2201      	movs	r2, #1
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	43da      	mvns	r2, r3
 80071a2:	4b20      	ldr	r3, [pc, #128]	@ (8007224 <xTaskPriorityInherit+0xf0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4013      	ands	r3, r2
 80071a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007224 <xTaskPriorityInherit+0xf0>)
 80071aa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071ac:	4b1b      	ldr	r3, [pc, #108]	@ (800721c <xTaskPriorityInherit+0xe8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ba:	2201      	movs	r2, #1
 80071bc:	409a      	lsls	r2, r3
 80071be:	4b19      	ldr	r3, [pc, #100]	@ (8007224 <xTaskPriorityInherit+0xf0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	4a17      	ldr	r2, [pc, #92]	@ (8007224 <xTaskPriorityInherit+0xf0>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4a12      	ldr	r2, [pc, #72]	@ (8007220 <xTaskPriorityInherit+0xec>)
 80071d6:	441a      	add	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3304      	adds	r3, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fc41 	bl	8005a66 <vListInsertEnd>
 80071e4:	e004      	b.n	80071f0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <xTaskPriorityInherit+0xe8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4619      	mov	r1, r3
 80071f4:	2049      	movs	r0, #73	@ 0x49
 80071f6:	f002 fbf3 	bl	80099e0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80071fa:	2301      	movs	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e008      	b.n	8007212 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007204:	4b05      	ldr	r3, [pc, #20]	@ (800721c <xTaskPriorityInherit+0xe8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d201      	bcs.n	8007212 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007212:	68fb      	ldr	r3, [r7, #12]
    }
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000036c 	.word	0x2000036c
 8007220:	20000370 	.word	0x20000370
 8007224:	2000044c 	.word	0x2000044c

08007228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d06a      	beq.n	8007314 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800723e:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <xTaskPriorityDisinherit+0xf8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d00b      	beq.n	8007260 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
    }
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	60bb      	str	r3, [r7, #8]
    }
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007292:	429a      	cmp	r2, r3
 8007294:	d03e      	beq.n	8007314 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d13a      	bne.n	8007314 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fc3c 	bl	8005b20 <uxListRemove>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	2201      	movs	r2, #1
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	43da      	mvns	r2, r3
 80072ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007324 <xTaskPriorityDisinherit+0xfc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4013      	ands	r3, r2
 80072c0:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <xTaskPriorityDisinherit+0xfc>)
 80072c2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4619      	mov	r1, r3
 80072c8:	204a      	movs	r0, #74	@ 0x4a
 80072ca:	f002 fb89 	bl	80099e0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	f1c3 0205 	rsb	r2, r3, #5
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	2201      	movs	r2, #1
 80072e8:	409a      	lsls	r2, r3
 80072ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007324 <xTaskPriorityDisinherit+0xfc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007324 <xTaskPriorityDisinherit+0xfc>)
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4a09      	ldr	r2, [pc, #36]	@ (8007328 <xTaskPriorityDisinherit+0x100>)
 8007302:	441a      	add	r2, r3
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f7fe fbab 	bl	8005a66 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007314:	697b      	ldr	r3, [r7, #20]
    }
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	2000036c 	.word	0x2000036c
 8007324:	2000044c 	.word	0x2000044c
 8007328:	20000370 	.word	0x20000370

0800732c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800733a:	2301      	movs	r3, #1
 800733c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8083 	beq.w	800744c <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10b      	bne.n	8007366 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60fb      	str	r3, [r7, #12]
    }
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	429a      	cmp	r2, r3
 800736e:	d902      	bls.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e002      	b.n	800737c <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800737a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	429a      	cmp	r2, r3
 8007384:	d062      	beq.n	800744c <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	429a      	cmp	r2, r3
 800738e:	d15d      	bne.n	800744c <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007390:	4b30      	ldr	r3, [pc, #192]	@ (8007454 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	429a      	cmp	r2, r3
 8007398:	d10b      	bne.n	80073b2 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	60bb      	str	r3, [r7, #8]
    }
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4619      	mov	r1, r3
 80073b6:	204a      	movs	r0, #74	@ 0x4a
 80073b8:	f002 fb12 	bl	80099e0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	db04      	blt.n	80073da <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f1c3 0205 	rsb	r2, r3, #5
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	6959      	ldr	r1, [r3, #20]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007458 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80073ea:	4413      	add	r3, r2
 80073ec:	4299      	cmp	r1, r3
 80073ee:	d12d      	bne.n	800744c <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe fb93 	bl	8005b20 <uxListRemove>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	2201      	movs	r2, #1
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43da      	mvns	r2, r3
 800740c:	4b13      	ldr	r3, [pc, #76]	@ (800745c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4013      	ands	r3, r2
 8007412:	4a12      	ldr	r2, [pc, #72]	@ (800745c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007414:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	4618      	mov	r0, r3
 800741a:	f003 f863 	bl	800a4e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	2201      	movs	r2, #1
 8007424:	409a      	lsls	r2, r3
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4313      	orrs	r3, r2
 800742c:	4a0b      	ldr	r2, [pc, #44]	@ (800745c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4a06      	ldr	r2, [pc, #24]	@ (8007458 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800743e:	441a      	add	r2, r3
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	3304      	adds	r3, #4
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7fe fb0d 	bl	8005a66 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800744c:	bf00      	nop
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	2000036c 	.word	0x2000036c
 8007458:	20000370 	.word	0x20000370
 800745c:	2000044c 	.word	0x2000044c

08007460 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007464:	4b07      	ldr	r3, [pc, #28]	@ (8007484 <pvTaskIncrementMutexHeldCount+0x24>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <pvTaskIncrementMutexHeldCount+0x24>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007472:	3201      	adds	r2, #1
 8007474:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8007476:	4b03      	ldr	r3, [pc, #12]	@ (8007484 <pvTaskIncrementMutexHeldCount+0x24>)
 8007478:	681b      	ldr	r3, [r3, #0]
    }
 800747a:	4618      	mov	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	2000036c 	.word	0x2000036c

08007488 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007492:	4b32      	ldr	r3, [pc, #200]	@ (800755c <prvAddCurrentTaskToDelayedList+0xd4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007498:	4b31      	ldr	r3, [pc, #196]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fb3e 	bl	8005b20 <uxListRemove>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10b      	bne.n	80074c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80074aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	2201      	movs	r2, #1
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	43da      	mvns	r2, r3
 80074b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007564 <prvAddCurrentTaskToDelayedList+0xdc>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4013      	ands	r3, r2
 80074be:	4a29      	ldr	r2, [pc, #164]	@ (8007564 <prvAddCurrentTaskToDelayedList+0xdc>)
 80074c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074c8:	d110      	bne.n	80074ec <prvAddCurrentTaskToDelayedList+0x64>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00d      	beq.n	80074ec <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80074d0:	4b23      	ldr	r3, [pc, #140]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	211b      	movs	r1, #27
 80074d6:	4618      	mov	r0, r3
 80074d8:	f003 f846 	bl	800a568 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074dc:	4b20      	ldr	r3, [pc, #128]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	4820      	ldr	r0, [pc, #128]	@ (8007568 <prvAddCurrentTaskToDelayedList+0xe0>)
 80074e6:	f7fe fabe 	bl	8005a66 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80074ea:	e032      	b.n	8007552 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4413      	add	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d20f      	bcs.n	8007524 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8007504:	4b16      	ldr	r3, [pc, #88]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2104      	movs	r1, #4
 800750a:	4618      	mov	r0, r3
 800750c:	f003 f82c 	bl	800a568 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007510:	4b16      	ldr	r3, [pc, #88]	@ (800756c <prvAddCurrentTaskToDelayedList+0xe4>)
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3304      	adds	r3, #4
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f7fe fac6 	bl	8005aae <vListInsert>
}
 8007522:	e016      	b.n	8007552 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8007524:	4b0e      	ldr	r3, [pc, #56]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2104      	movs	r1, #4
 800752a:	4618      	mov	r0, r3
 800752c:	f003 f81c 	bl	800a568 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007530:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3304      	adds	r3, #4
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f7fe fab6 	bl	8005aae <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007542:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <prvAddCurrentTaskToDelayedList+0xec>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	429a      	cmp	r2, r3
 800754a:	d202      	bcs.n	8007552 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800754c:	4a09      	ldr	r2, [pc, #36]	@ (8007574 <prvAddCurrentTaskToDelayedList+0xec>)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6013      	str	r3, [r2, #0]
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000448 	.word	0x20000448
 8007560:	2000036c 	.word	0x2000036c
 8007564:	2000044c 	.word	0x2000044c
 8007568:	20000430 	.word	0x20000430
 800756c:	20000400 	.word	0x20000400
 8007570:	200003fc 	.word	0x200003fc
 8007574:	20000464 	.word	0x20000464

08007578 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b04      	subs	r3, #4
 8007588:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007590:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3b04      	subs	r3, #4
 8007596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f023 0201 	bic.w	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80075a8:	4a0c      	ldr	r2, [pc, #48]	@ (80075dc <pxPortInitialiseStack+0x64>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3b14      	subs	r3, #20
 80075b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b04      	subs	r3, #4
 80075be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f06f 0202 	mvn.w	r2, #2
 80075c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3b20      	subs	r3, #32
 80075cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80075ce:	68fb      	ldr	r3, [r7, #12]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	080075e1 	.word	0x080075e1

080075e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80075ea:	4b13      	ldr	r3, [pc, #76]	@ (8007638 <prvTaskExitError+0x58>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075f2:	d00b      	beq.n	800760c <prvTaskExitError+0x2c>
        __asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	60fb      	str	r3, [r7, #12]
    }
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <prvTaskExitError+0x28>
        __asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60bb      	str	r3, [r7, #8]
    }
 800761e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007620:	bf00      	nop
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0fc      	beq.n	8007622 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	20000010 	.word	0x20000010
 800763c:	00000000 	.word	0x00000000

08007640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007640:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <pxCurrentTCBConst2>)
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	6808      	ldr	r0, [r1, #0]
 8007646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764a:	f380 8809 	msr	PSP, r0
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f04f 0000 	mov.w	r0, #0
 8007656:	f380 8811 	msr	BASEPRI, r0
 800765a:	4770      	bx	lr
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst2>:
 8007660:	2000036c 	.word	0x2000036c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007668:	4808      	ldr	r0, [pc, #32]	@ (800768c <prvPortStartFirstTask+0x24>)
 800766a:	6800      	ldr	r0, [r0, #0]
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	f380 8808 	msr	MSP, r0
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f380 8814 	msr	CONTROL, r0
 800767a:	b662      	cpsie	i
 800767c:	b661      	cpsie	f
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	df00      	svc	0
 8007688:	bf00      	nop
 800768a:	0000      	.short	0x0000
 800768c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop

08007694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800769a:	4b47      	ldr	r3, [pc, #284]	@ (80077b8 <xPortStartScheduler+0x124>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a47      	ldr	r2, [pc, #284]	@ (80077bc <xPortStartScheduler+0x128>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10b      	bne.n	80076bc <xPortStartScheduler+0x28>
        __asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	613b      	str	r3, [r7, #16]
    }
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	e7fd      	b.n	80076b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076bc:	4b3e      	ldr	r3, [pc, #248]	@ (80077b8 <xPortStartScheduler+0x124>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a3f      	ldr	r2, [pc, #252]	@ (80077c0 <xPortStartScheduler+0x12c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d10b      	bne.n	80076de <xPortStartScheduler+0x4a>
        __asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60fb      	str	r3, [r7, #12]
    }
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076de:	4b39      	ldr	r3, [pc, #228]	@ (80077c4 <xPortStartScheduler+0x130>)
 80076e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	22ff      	movs	r2, #255	@ 0xff
 80076ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007700:	b2da      	uxtb	r2, r3
 8007702:	4b31      	ldr	r3, [pc, #196]	@ (80077c8 <xPortStartScheduler+0x134>)
 8007704:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007706:	4b31      	ldr	r3, [pc, #196]	@ (80077cc <xPortStartScheduler+0x138>)
 8007708:	2207      	movs	r2, #7
 800770a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800770c:	e009      	b.n	8007722 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800770e:	4b2f      	ldr	r3, [pc, #188]	@ (80077cc <xPortStartScheduler+0x138>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3b01      	subs	r3, #1
 8007714:	4a2d      	ldr	r2, [pc, #180]	@ (80077cc <xPortStartScheduler+0x138>)
 8007716:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	b2db      	uxtb	r3, r3
 8007720:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772a:	2b80      	cmp	r3, #128	@ 0x80
 800772c:	d0ef      	beq.n	800770e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800772e:	4b27      	ldr	r3, [pc, #156]	@ (80077cc <xPortStartScheduler+0x138>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1c3 0307 	rsb	r3, r3, #7
 8007736:	2b04      	cmp	r3, #4
 8007738:	d00b      	beq.n	8007752 <xPortStartScheduler+0xbe>
        __asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	60bb      	str	r3, [r7, #8]
    }
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007752:	4b1e      	ldr	r3, [pc, #120]	@ (80077cc <xPortStartScheduler+0x138>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	4a1c      	ldr	r2, [pc, #112]	@ (80077cc <xPortStartScheduler+0x138>)
 800775a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800775c:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <xPortStartScheduler+0x138>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007764:	4a19      	ldr	r2, [pc, #100]	@ (80077cc <xPortStartScheduler+0x138>)
 8007766:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007770:	4b17      	ldr	r3, [pc, #92]	@ (80077d0 <xPortStartScheduler+0x13c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a16      	ldr	r2, [pc, #88]	@ (80077d0 <xPortStartScheduler+0x13c>)
 8007776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800777a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800777c:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <xPortStartScheduler+0x13c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a13      	ldr	r2, [pc, #76]	@ (80077d0 <xPortStartScheduler+0x13c>)
 8007782:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007786:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007788:	f000 f968 	bl	8007a5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800778c:	4b11      	ldr	r3, [pc, #68]	@ (80077d4 <xPortStartScheduler+0x140>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007792:	f000 f987 	bl	8007aa4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <xPortStartScheduler+0x144>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a0f      	ldr	r2, [pc, #60]	@ (80077d8 <xPortStartScheduler+0x144>)
 800779c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80077a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80077a2:	f7ff ff61 	bl	8007668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80077a6:	f7ff fa91 	bl	8006ccc <vTaskSwitchContext>
    prvTaskExitError();
 80077aa:	f7ff ff19 	bl	80075e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	e000ed00 	.word	0xe000ed00
 80077bc:	410fc271 	.word	0x410fc271
 80077c0:	410fc270 	.word	0x410fc270
 80077c4:	e000e400 	.word	0xe000e400
 80077c8:	20000470 	.word	0x20000470
 80077cc:	20000474 	.word	0x20000474
 80077d0:	e000ed20 	.word	0xe000ed20
 80077d4:	20000010 	.word	0x20000010
 80077d8:	e000ef34 	.word	0xe000ef34

080077dc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077e2:	4b38      	ldr	r3, [pc, #224]	@ (80078c4 <vInitPrioGroupValue+0xe8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a38      	ldr	r2, [pc, #224]	@ (80078c8 <vInitPrioGroupValue+0xec>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d10b      	bne.n	8007804 <vInitPrioGroupValue+0x28>
        __asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	613b      	str	r3, [r7, #16]
    }
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	e7fd      	b.n	8007800 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007804:	4b2f      	ldr	r3, [pc, #188]	@ (80078c4 <vInitPrioGroupValue+0xe8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a30      	ldr	r2, [pc, #192]	@ (80078cc <vInitPrioGroupValue+0xf0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10b      	bne.n	8007826 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	60fb      	str	r3, [r7, #12]
    }
 8007820:	bf00      	nop
 8007822:	bf00      	nop
 8007824:	e7fd      	b.n	8007822 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007826:	4b2a      	ldr	r3, [pc, #168]	@ (80078d0 <vInitPrioGroupValue+0xf4>)
 8007828:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	22ff      	movs	r2, #255	@ 0xff
 8007836:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007848:	b2da      	uxtb	r2, r3
 800784a:	4b22      	ldr	r3, [pc, #136]	@ (80078d4 <vInitPrioGroupValue+0xf8>)
 800784c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800784e:	4b22      	ldr	r3, [pc, #136]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 8007850:	2207      	movs	r2, #7
 8007852:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007854:	e009      	b.n	800786a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007856:	4b20      	ldr	r3, [pc, #128]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3b01      	subs	r3, #1
 800785c:	4a1e      	ldr	r2, [pc, #120]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 800785e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007872:	2b80      	cmp	r3, #128	@ 0x80
 8007874:	d0ef      	beq.n	8007856 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007876:	4b18      	ldr	r3, [pc, #96]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1c3 0307 	rsb	r3, r3, #7
 800787e:	2b04      	cmp	r3, #4
 8007880:	d00b      	beq.n	800789a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	60bb      	str	r3, [r7, #8]
    }
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800789a:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	4a0d      	ldr	r2, [pc, #52]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 80078a2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078a4:	4b0c      	ldr	r3, [pc, #48]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078ac:	4a0a      	ldr	r2, [pc, #40]	@ (80078d8 <vInitPrioGroupValue+0xfc>)
 80078ae:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80078b8:	bf00      	nop
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	e000ed00 	.word	0xe000ed00
 80078c8:	410fc271 	.word	0x410fc271
 80078cc:	410fc270 	.word	0x410fc270
 80078d0:	e000e400 	.word	0xe000e400
 80078d4:	20000470 	.word	0x20000470
 80078d8:	20000474 	.word	0x20000474

080078dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
        __asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	607b      	str	r3, [r7, #4]
    }
 80078f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80078f6:	4b10      	ldr	r3, [pc, #64]	@ (8007938 <vPortEnterCritical+0x5c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007938 <vPortEnterCritical+0x5c>)
 80078fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007900:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <vPortEnterCritical+0x5c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d110      	bne.n	800792a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007908:	4b0c      	ldr	r3, [pc, #48]	@ (800793c <vPortEnterCritical+0x60>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <vPortEnterCritical+0x4e>
        __asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	603b      	str	r3, [r7, #0]
    }
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <vPortEnterCritical+0x4a>
    }
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	20000010 	.word	0x20000010
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007946:	4b12      	ldr	r3, [pc, #72]	@ (8007990 <vPortExitCritical+0x50>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10b      	bne.n	8007966 <vPortExitCritical+0x26>
        __asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
    }
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007966:	4b0a      	ldr	r3, [pc, #40]	@ (8007990 <vPortExitCritical+0x50>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3b01      	subs	r3, #1
 800796c:	4a08      	ldr	r2, [pc, #32]	@ (8007990 <vPortExitCritical+0x50>)
 800796e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007970:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <vPortExitCritical+0x50>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <vPortExitCritical+0x44>
 8007978:	2300      	movs	r3, #0
 800797a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007982:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	20000010 	.word	0x20000010
	...

080079a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80079a0:	f3ef 8009 	mrs	r0, PSP
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4b15      	ldr	r3, [pc, #84]	@ (8007a00 <pxCurrentTCBConst>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	f01e 0f10 	tst.w	lr, #16
 80079b0:	bf08      	it	eq
 80079b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	6010      	str	r0, [r2, #0]
 80079bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079c4:	f380 8811 	msr	BASEPRI, r0
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f7ff f97c 	bl	8006ccc <vTaskSwitchContext>
 80079d4:	f04f 0000 	mov.w	r0, #0
 80079d8:	f380 8811 	msr	BASEPRI, r0
 80079dc:	bc09      	pop	{r0, r3}
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	6808      	ldr	r0, [r1, #0]
 80079e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e6:	f01e 0f10 	tst.w	lr, #16
 80079ea:	bf08      	it	eq
 80079ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079f0:	f380 8809 	msr	PSP, r0
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst>:
 8007a00:	2000036c 	.word	0x2000036c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
        __asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	607b      	str	r3, [r7, #4]
    }
 8007a20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007a22:	f002 fc45 	bl	800a2b0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007a26:	f7ff f893 	bl	8006b50 <xTaskIncrementTick>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007a30:	f002 fc9c 	bl	800a36c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a34:	4b08      	ldr	r3, [pc, #32]	@ (8007a58 <SysTick_Handler+0x50>)
 8007a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e001      	b.n	8007a42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8007a3e:	f002 fc79 	bl	800a334 <SEGGER_SYSVIEW_RecordExitISR>
 8007a42:	2300      	movs	r3, #0
 8007a44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	f383 8811 	msr	BASEPRI, r3
    }
 8007a4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a60:	4b0b      	ldr	r3, [pc, #44]	@ (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a66:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <vPortSetupTimerInterrupt+0x38>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <vPortSetupTimerInterrupt+0x3c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	@ (8007a9c <vPortSetupTimerInterrupt+0x40>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	4a09      	ldr	r2, [pc, #36]	@ (8007aa0 <vPortSetupTimerInterrupt+0x44>)
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a7e:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <vPortSetupTimerInterrupt+0x34>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	e000e010 	.word	0xe000e010
 8007a94:	e000e018 	.word	0xe000e018
 8007a98:	20000000 	.word	0x20000000
 8007a9c:	10624dd3 	.word	0x10624dd3
 8007aa0:	e000e014 	.word	0xe000e014

08007aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ab4 <vPortEnableVFP+0x10>
 8007aa8:	6801      	ldr	r1, [r0, #0]
 8007aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007aae:	6001      	str	r1, [r0, #0]
 8007ab0:	4770      	bx	lr
 8007ab2:	0000      	.short	0x0000
 8007ab4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop

08007abc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007ac2:	f3ef 8305 	mrs	r3, IPSR
 8007ac6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b0f      	cmp	r3, #15
 8007acc:	d915      	bls.n	8007afa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ace:	4a18      	ldr	r2, [pc, #96]	@ (8007b30 <vPortValidateInterruptPriority+0x74>)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ad8:	4b16      	ldr	r3, [pc, #88]	@ (8007b34 <vPortValidateInterruptPriority+0x78>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	7afa      	ldrb	r2, [r7, #11]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d20b      	bcs.n	8007afa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
    }
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop
 8007af8:	e7fd      	b.n	8007af6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007afa:	4b0f      	ldr	r3, [pc, #60]	@ (8007b38 <vPortValidateInterruptPriority+0x7c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b02:	4b0e      	ldr	r3, [pc, #56]	@ (8007b3c <vPortValidateInterruptPriority+0x80>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d90b      	bls.n	8007b22 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	603b      	str	r3, [r7, #0]
    }
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	e7fd      	b.n	8007b1e <vPortValidateInterruptPriority+0x62>
    }
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	e000e3f0 	.word	0xe000e3f0
 8007b34:	20000470 	.word	0x20000470
 8007b38:	e000ed0c 	.word	0xe000ed0c
 8007b3c:	20000474 	.word	0x20000474

08007b40 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	@ 0x28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007b4c:	f7fe ff2e 	bl	80069ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007b50:	4b66      	ldr	r3, [pc, #408]	@ (8007cec <pvPortMalloc+0x1ac>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007b58:	f000 f938 	bl	8007dcc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b5c:	4b64      	ldr	r3, [pc, #400]	@ (8007cf0 <pvPortMalloc+0x1b0>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 80a9 	bne.w	8007cbc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d02e      	beq.n	8007bce <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007b70:	2208      	movs	r2, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d228      	bcs.n	8007bce <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d022      	beq.n	8007bd4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f023 0307 	bic.w	r3, r3, #7
 8007b94:	3308      	adds	r3, #8
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d215      	bcs.n	8007bc8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f023 0307 	bic.w	r3, r3, #7
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d011      	beq.n	8007bd4 <pvPortMalloc+0x94>
        __asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	617b      	str	r3, [r7, #20]
    }
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bcc:	e002      	b.n	8007bd4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	e000      	b.n	8007bd6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bd4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d06f      	beq.n	8007cbc <pvPortMalloc+0x17c>
 8007bdc:	4b45      	ldr	r3, [pc, #276]	@ (8007cf4 <pvPortMalloc+0x1b4>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d86a      	bhi.n	8007cbc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007be6:	4b44      	ldr	r3, [pc, #272]	@ (8007cf8 <pvPortMalloc+0x1b8>)
 8007be8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007bea:	4b43      	ldr	r3, [pc, #268]	@ (8007cf8 <pvPortMalloc+0x1b8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf0:	e004      	b.n	8007bfc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d903      	bls.n	8007c0e <pvPortMalloc+0xce>
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f1      	bne.n	8007bf2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007c0e:	4b37      	ldr	r3, [pc, #220]	@ (8007cec <pvPortMalloc+0x1ac>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d051      	beq.n	8007cbc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	4413      	add	r3, r2
 8007c20:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	2308      	movs	r3, #8
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d920      	bls.n	8007c7c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <pvPortMalloc+0x124>
        __asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
    }
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	1ad2      	subs	r2, r2, r3
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c76:	69b8      	ldr	r0, [r7, #24]
 8007c78:	f000 f90a 	bl	8007e90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf4 <pvPortMalloc+0x1b4>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf4 <pvPortMalloc+0x1b4>)
 8007c88:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf4 <pvPortMalloc+0x1b4>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <pvPortMalloc+0x1bc>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d203      	bcs.n	8007c9e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c96:	4b17      	ldr	r3, [pc, #92]	@ (8007cf4 <pvPortMalloc+0x1b4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <pvPortMalloc+0x1bc>)
 8007c9c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	4b13      	ldr	r3, [pc, #76]	@ (8007cf0 <pvPortMalloc+0x1b0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007cb2:	4b13      	ldr	r3, [pc, #76]	@ (8007d00 <pvPortMalloc+0x1c0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	4a11      	ldr	r2, [pc, #68]	@ (8007d00 <pvPortMalloc+0x1c0>)
 8007cba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007cbc:	f7fe fe84 	bl	80069c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00b      	beq.n	8007ce2 <pvPortMalloc+0x1a2>
        __asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	60fb      	str	r3, [r7, #12]
    }
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
 8007ce0:	e7fd      	b.n	8007cde <pvPortMalloc+0x19e>
    return pvReturn;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3728      	adds	r7, #40	@ 0x28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20019480 	.word	0x20019480
 8007cf0:	20019494 	.word	0x20019494
 8007cf4:	20019484 	.word	0x20019484
 8007cf8:	20019478 	.word	0x20019478
 8007cfc:	20019488 	.word	0x20019488
 8007d00:	2001948c 	.word	0x2001948c

08007d04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d04f      	beq.n	8007db6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007d16:	2308      	movs	r3, #8
 8007d18:	425b      	negs	r3, r3
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	4b25      	ldr	r3, [pc, #148]	@ (8007dc0 <vPortFree+0xbc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <vPortFree+0x46>
        __asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60fb      	str	r3, [r7, #12]
    }
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <vPortFree+0x66>
        __asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	60bb      	str	r3, [r7, #8]
    }
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	e7fd      	b.n	8007d66 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	4b14      	ldr	r3, [pc, #80]	@ (8007dc0 <vPortFree+0xbc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4013      	ands	r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01e      	beq.n	8007db6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d11a      	bne.n	8007db6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <vPortFree+0xbc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007d90:	f7fe fe0c 	bl	80069ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <vPortFree+0xc0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	4a09      	ldr	r2, [pc, #36]	@ (8007dc4 <vPortFree+0xc0>)
 8007da0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007da2:	6938      	ldr	r0, [r7, #16]
 8007da4:	f000 f874 	bl	8007e90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007da8:	4b07      	ldr	r3, [pc, #28]	@ (8007dc8 <vPortFree+0xc4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	4a06      	ldr	r2, [pc, #24]	@ (8007dc8 <vPortFree+0xc4>)
 8007db0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007db2:	f7fe fe09 	bl	80069c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007db6:	bf00      	nop
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20019494 	.word	0x20019494
 8007dc4:	20019484 	.word	0x20019484
 8007dc8:	20019490 	.word	0x20019490

08007dcc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dd2:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8007dd6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007dd8:	4b27      	ldr	r3, [pc, #156]	@ (8007e78 <prvHeapInit+0xac>)
 8007dda:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3307      	adds	r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8007e78 <prvHeapInit+0xac>)
 8007dfc:	4413      	add	r3, r2
 8007dfe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e04:	4a1d      	ldr	r2, [pc, #116]	@ (8007e7c <prvHeapInit+0xb0>)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007e7c <prvHeapInit+0xb0>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	4413      	add	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007e18:	2208      	movs	r2, #8
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1a9b      	subs	r3, r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0307 	bic.w	r3, r3, #7
 8007e26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4a15      	ldr	r2, [pc, #84]	@ (8007e80 <prvHeapInit+0xb4>)
 8007e2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007e2e:	4b14      	ldr	r3, [pc, #80]	@ (8007e80 <prvHeapInit+0xb4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2200      	movs	r2, #0
 8007e34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007e36:	4b12      	ldr	r3, [pc, #72]	@ (8007e80 <prvHeapInit+0xb4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	1ad2      	subs	r2, r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e80 <prvHeapInit+0xb4>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	4a0a      	ldr	r2, [pc, #40]	@ (8007e84 <prvHeapInit+0xb8>)
 8007e5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <prvHeapInit+0xbc>)
 8007e62:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e64:	4b09      	ldr	r3, [pc, #36]	@ (8007e8c <prvHeapInit+0xc0>)
 8007e66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e6a:	601a      	str	r2, [r3, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000478 	.word	0x20000478
 8007e7c:	20019478 	.word	0x20019478
 8007e80:	20019480 	.word	0x20019480
 8007e84:	20019488 	.word	0x20019488
 8007e88:	20019484 	.word	0x20019484
 8007e8c:	20019494 	.word	0x20019494

08007e90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e98:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <prvInsertBlockIntoFreeList+0xac>)
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	e002      	b.n	8007ea4 <prvInsertBlockIntoFreeList+0x14>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d8f7      	bhi.n	8007e9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d108      	bne.n	8007ed2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	441a      	add	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d118      	bne.n	8007f18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b15      	ldr	r3, [pc, #84]	@ (8007f40 <prvInsertBlockIntoFreeList+0xb0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d00d      	beq.n	8007f0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	441a      	add	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e008      	b.n	8007f20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f40 <prvInsertBlockIntoFreeList+0xb0>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e003      	b.n	8007f20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d002      	beq.n	8007f2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20019478 	.word	0x20019478
 8007f40:	20019480 	.word	0x20019480

08007f44 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007f48:	4803      	ldr	r0, [pc, #12]	@ (8007f58 <_cbSendSystemDesc+0x14>)
 8007f4a:	f002 f95b 	bl	800a204 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007f4e:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <_cbSendSystemDesc+0x18>)
 8007f50:	f002 f958 	bl	800a204 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007f54:	bf00      	nop
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	0800ab60 	.word	0x0800ab60
 8007f5c:	0800aba4 	.word	0x0800aba4

08007f60 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007f64:	4b06      	ldr	r3, [pc, #24]	@ (8007f80 <SEGGER_SYSVIEW_Conf+0x20>)
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	4b05      	ldr	r3, [pc, #20]	@ (8007f80 <SEGGER_SYSVIEW_Conf+0x20>)
 8007f6a:	6819      	ldr	r1, [r3, #0]
 8007f6c:	4b05      	ldr	r3, [pc, #20]	@ (8007f84 <SEGGER_SYSVIEW_Conf+0x24>)
 8007f6e:	4a06      	ldr	r2, [pc, #24]	@ (8007f88 <SEGGER_SYSVIEW_Conf+0x28>)
 8007f70:	f001 fcc4 	bl	80098fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007f74:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8007f78:	f001 fd04 	bl	8009984 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007f7c:	bf00      	nop
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20000000 	.word	0x20000000
 8007f84:	08007f45 	.word	0x08007f45
 8007f88:	0800ade4 	.word	0x0800ade4

08007f8c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	e033      	b.n	8008000 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007f98:	491e      	ldr	r1, [pc, #120]	@ (8008014 <_cbSendTaskList+0x88>)
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	491a      	ldr	r1, [pc, #104]	@ (8008014 <_cbSendTaskList+0x88>)
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	4c16      	ldr	r4, [pc, #88]	@ (8008014 <_cbSendTaskList+0x88>)
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4423      	add	r3, r4
 8007fc8:	3308      	adds	r3, #8
 8007fca:	681c      	ldr	r4, [r3, #0]
 8007fcc:	4d11      	ldr	r5, [pc, #68]	@ (8008014 <_cbSendTaskList+0x88>)
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	442b      	add	r3, r5
 8007fda:	330c      	adds	r3, #12
 8007fdc:	681d      	ldr	r5, [r3, #0]
 8007fde:	4e0d      	ldr	r6, [pc, #52]	@ (8008014 <_cbSendTaskList+0x88>)
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4433      	add	r3, r6
 8007fec:	3310      	adds	r3, #16
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	f000 f979 	bl	80082ec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <_cbSendTaskList+0x8c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d3c6      	bcc.n	8007f98 <_cbSendTaskList+0xc>
  }
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008014:	20019498 	.word	0x20019498
 8008018:	20019538 	.word	0x20019538

0800801c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800801c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008024:	f7fe fd82 	bl	8006b2c <xTaskGetTickCountFromISR>
 8008028:	4603      	mov	r3, r0
 800802a:	2200      	movs	r2, #0
 800802c:	469a      	mov	sl, r3
 800802e:	4693      	mov	fp, r2
 8008030:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	f04f 0a00 	mov.w	sl, #0
 8008040:	f04f 0b00 	mov.w	fp, #0
 8008044:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008048:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800804c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008050:	4652      	mov	r2, sl
 8008052:	465b      	mov	r3, fp
 8008054:	1a14      	subs	r4, r2, r0
 8008056:	eb63 0501 	sbc.w	r5, r3, r1
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	00ab      	lsls	r3, r5, #2
 8008064:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008068:	00a2      	lsls	r2, r4, #2
 800806a:	4614      	mov	r4, r2
 800806c:	461d      	mov	r5, r3
 800806e:	eb14 0800 	adds.w	r8, r4, r0
 8008072:	eb45 0901 	adc.w	r9, r5, r1
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808a:	4690      	mov	r8, r2
 800808c:	4699      	mov	r9, r3
 800808e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008092:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008096:	4610      	mov	r0, r2
 8008098:	4619      	mov	r1, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080080a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80080b2:	2205      	movs	r2, #5
 80080b4:	492b      	ldr	r1, [pc, #172]	@ (8008164 <SYSVIEW_AddTask+0xc0>)
 80080b6:	68b8      	ldr	r0, [r7, #8]
 80080b8:	f002 fc5f 	bl	800a97a <memcmp>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d04b      	beq.n	800815a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80080c2:	4b29      	ldr	r3, [pc, #164]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b07      	cmp	r3, #7
 80080c8:	d903      	bls.n	80080d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80080ca:	4828      	ldr	r0, [pc, #160]	@ (800816c <SYSVIEW_AddTask+0xc8>)
 80080cc:	f002 fbac 	bl	800a828 <SEGGER_SYSVIEW_Warn>
    return;
 80080d0:	e044      	b.n	800815c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80080d2:	4b25      	ldr	r3, [pc, #148]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4926      	ldr	r1, [pc, #152]	@ (8008170 <SYSVIEW_AddTask+0xcc>)
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80080e6:	4b20      	ldr	r3, [pc, #128]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4921      	ldr	r1, [pc, #132]	@ (8008170 <SYSVIEW_AddTask+0xcc>)
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	3304      	adds	r3, #4
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80080fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	491b      	ldr	r1, [pc, #108]	@ (8008170 <SYSVIEW_AddTask+0xcc>)
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3308      	adds	r3, #8
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008112:	4b15      	ldr	r3, [pc, #84]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4916      	ldr	r1, [pc, #88]	@ (8008170 <SYSVIEW_AddTask+0xcc>)
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	330c      	adds	r3, #12
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008128:	4b0f      	ldr	r3, [pc, #60]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	4910      	ldr	r1, [pc, #64]	@ (8008170 <SYSVIEW_AddTask+0xcc>)
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	3310      	adds	r3, #16
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800813e:	4b0a      	ldr	r3, [pc, #40]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	4a08      	ldr	r2, [pc, #32]	@ (8008168 <SYSVIEW_AddTask+0xc4>)
 8008146:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f8ca 	bl	80082ec <SYSVIEW_SendTaskInfo>
 8008158:	e000      	b.n	800815c <SYSVIEW_AddTask+0xb8>
    return;
 800815a:	bf00      	nop

}
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	0800abb4 	.word	0x0800abb4
 8008168:	20019538 	.word	0x20019538
 800816c:	0800abbc 	.word	0x0800abbc
 8008170:	20019498 	.word	0x20019498

08008174 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800817c:	4b59      	ldr	r3, [pc, #356]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80ab 	beq.w	80082dc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e00d      	b.n	80081a8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800818c:	4956      	ldr	r1, [pc, #344]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d008      	beq.n	80081b4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3301      	adds	r3, #1
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	4b4e      	ldr	r3, [pc, #312]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d3ec      	bcc.n	800818c <SYSVIEW_DeleteTask+0x18>
 80081b2:	e000      	b.n	80081b6 <SYSVIEW_DeleteTask+0x42>
      break;
 80081b4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80081b6:	4b4b      	ldr	r3, [pc, #300]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d111      	bne.n	80081e6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4a46      	ldr	r2, [pc, #280]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 80081ce:	4413      	add	r3, r2
 80081d0:	2214      	movs	r2, #20
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f002 fbe0 	bl	800a99a <memset>
    _NumTasks--;
 80081da:	4b42      	ldr	r3, [pc, #264]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3b01      	subs	r3, #1
 80081e0:	4a40      	ldr	r2, [pc, #256]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e07b      	b.n	80082de <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80081e6:	4b3f      	ldr	r3, [pc, #252]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d276      	bcs.n	80082de <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80081f0:	4b3c      	ldr	r3, [pc, #240]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	1e5a      	subs	r2, r3, #1
 80081f6:	493c      	ldr	r1, [pc, #240]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	4838      	ldr	r0, [pc, #224]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4403      	add	r3, r0
 8008212:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8008214:	4b33      	ldr	r3, [pc, #204]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	1e5a      	subs	r2, r3, #1
 800821a:	4933      	ldr	r1, [pc, #204]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	3304      	adds	r3, #4
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	482f      	ldr	r0, [pc, #188]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4403      	add	r3, r0
 8008238:	3304      	adds	r3, #4
 800823a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800823c:	4b29      	ldr	r3, [pc, #164]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	1e5a      	subs	r2, r3, #1
 8008242:	4929      	ldr	r1, [pc, #164]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	3308      	adds	r3, #8
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	4825      	ldr	r0, [pc, #148]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4403      	add	r3, r0
 8008260:	3308      	adds	r3, #8
 8008262:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8008264:	4b1f      	ldr	r3, [pc, #124]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	1e5a      	subs	r2, r3, #1
 800826a:	491f      	ldr	r1, [pc, #124]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	330c      	adds	r3, #12
 8008278:	6819      	ldr	r1, [r3, #0]
 800827a:	481b      	ldr	r0, [pc, #108]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4403      	add	r3, r0
 8008288:	330c      	adds	r3, #12
 800828a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800828c:	4b15      	ldr	r3, [pc, #84]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	1e5a      	subs	r2, r3, #1
 8008292:	4915      	ldr	r1, [pc, #84]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	3310      	adds	r3, #16
 80082a0:	6819      	ldr	r1, [r3, #0]
 80082a2:	4811      	ldr	r0, [pc, #68]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4403      	add	r3, r0
 80082b0:	3310      	adds	r3, #16
 80082b2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80082b4:	4b0b      	ldr	r3, [pc, #44]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4a09      	ldr	r2, [pc, #36]	@ (80082e8 <SYSVIEW_DeleteTask+0x174>)
 80082c4:	4413      	add	r3, r2
 80082c6:	2214      	movs	r2, #20
 80082c8:	2100      	movs	r1, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f002 fb65 	bl	800a99a <memset>
    _NumTasks--;
 80082d0:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	4a03      	ldr	r2, [pc, #12]	@ (80082e4 <SYSVIEW_DeleteTask+0x170>)
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e000      	b.n	80082de <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80082dc:	bf00      	nop
  }
}
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20019538 	.word	0x20019538
 80082e8:	20019498 	.word	0x20019498

080082ec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80082fa:	f107 0314 	add.w	r3, r7, #20
 80082fe:	2214      	movs	r2, #20
 8008300:	2100      	movs	r1, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f002 fb49 	bl	800a99a <memset>
  TaskInfo.TaskID     = TaskID;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800831c:	f107 0314 	add.w	r3, r7, #20
 8008320:	4618      	mov	r0, r3
 8008322:	f001 fe77 	bl	800a014 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008326:	bf00      	nop
 8008328:	3728      	adds	r7, #40	@ 0x28
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <__NVIC_EnableIRQ>:
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800833a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800833e:	2b00      	cmp	r3, #0
 8008340:	db0b      	blt.n	800835a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	f003 021f 	and.w	r2, r3, #31
 8008348:	4907      	ldr	r1, [pc, #28]	@ (8008368 <__NVIC_EnableIRQ+0x38>)
 800834a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	2001      	movs	r0, #1
 8008352:	fa00 f202 	lsl.w	r2, r0, r2
 8008356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	e000e100 	.word	0xe000e100

0800836c <__NVIC_SetPriority>:
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800837c:	2b00      	cmp	r3, #0
 800837e:	db0a      	blt.n	8008396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	b2da      	uxtb	r2, r3
 8008384:	490c      	ldr	r1, [pc, #48]	@ (80083b8 <__NVIC_SetPriority+0x4c>)
 8008386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800838a:	0112      	lsls	r2, r2, #4
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	440b      	add	r3, r1
 8008390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008394:	e00a      	b.n	80083ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4908      	ldr	r1, [pc, #32]	@ (80083bc <__NVIC_SetPriority+0x50>)
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	3b04      	subs	r3, #4
 80083a4:	0112      	lsls	r2, r2, #4
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	440b      	add	r3, r1
 80083aa:	761a      	strb	r2, [r3, #24]
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	e000e100 	.word	0xe000e100
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80083c6:	f002 fa8b 	bl	800a8e0 <SEGGER_SYSVIEW_IsStarted>
 80083ca:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80083d2:	f001 fca3 	bl	8009d1c <SEGGER_SYSVIEW_Start>
  }
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80083ea:	4b0c      	ldr	r3, [pc, #48]	@ (800841c <_cbOnUARTRx+0x3c>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d806      	bhi.n	8008400 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80083f2:	4b0a      	ldr	r3, [pc, #40]	@ (800841c <_cbOnUARTRx+0x3c>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b08      	ldr	r3, [pc, #32]	@ (800841c <_cbOnUARTRx+0x3c>)
 80083fc:	701a      	strb	r2, [r3, #0]
    goto Done;
 80083fe:	e009      	b.n	8008414 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8008400:	f7ff ffde 	bl	80083c0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8008404:	4b05      	ldr	r3, [pc, #20]	@ (800841c <_cbOnUARTRx+0x3c>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	4618      	mov	r0, r3
 800840a:	1dfb      	adds	r3, r7, #7
 800840c:	2201      	movs	r2, #1
 800840e:	4619      	mov	r1, r3
 8008410:	f000 fb9a 	bl	8008b48 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8008414:	bf00      	nop
}
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000014 	.word	0x20000014

08008420 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8008428:	4b14      	ldr	r3, [pc, #80]	@ (800847c <_cbOnUARTTx+0x5c>)
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d80f      	bhi.n	8008450 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8008430:	4b12      	ldr	r3, [pc, #72]	@ (800847c <_cbOnUARTTx+0x5c>)
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	461a      	mov	r2, r3
 8008436:	4b12      	ldr	r3, [pc, #72]	@ (8008480 <_cbOnUARTTx+0x60>)
 8008438:	5c9a      	ldrb	r2, [r3, r2]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800843e:	4b0f      	ldr	r3, [pc, #60]	@ (800847c <_cbOnUARTTx+0x5c>)
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	3301      	adds	r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	4b0d      	ldr	r3, [pc, #52]	@ (800847c <_cbOnUARTTx+0x5c>)
 8008448:	705a      	strb	r2, [r3, #1]
    r = 1;
 800844a:	2301      	movs	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800844e:	e00f      	b.n	8008470 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8008450:	4b0a      	ldr	r3, [pc, #40]	@ (800847c <_cbOnUARTTx+0x5c>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fa19 	bl	8008890 <SEGGER_RTT_ReadUpBufferNoLock>
 800845e:	4603      	mov	r3, r0
 8008460:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	da02      	bge.n	800846e <_cbOnUARTTx+0x4e>
    r = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	e000      	b.n	8008470 <_cbOnUARTTx+0x50>
  }
Done:
 800846e:	bf00      	nop
  return r;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000014 	.word	0x20000014
 8008480:	0800adec 	.word	0x0800adec

08008484 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800848c:	4a04      	ldr	r2, [pc, #16]	@ (80084a0 <SEGGER_UART_init+0x1c>)
 800848e:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <SEGGER_UART_init+0x20>)
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f863 	bl	800855c <HIF_UART_Init>
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	080083e1 	.word	0x080083e1
 80084a4:	08008421 	.word	0x08008421

080084a8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80084ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008528 <USART2_IRQHandler+0x80>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d011      	beq.n	80084e2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80084be:	4b1b      	ldr	r3, [pc, #108]	@ (800852c <USART2_IRQHandler+0x84>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 030b 	and.w	r3, r3, #11
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d108      	bne.n	80084e2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80084d0:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <USART2_IRQHandler+0x88>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d004      	beq.n	80084e2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80084d8:	4b15      	ldr	r3, [pc, #84]	@ (8008530 <USART2_IRQHandler+0x88>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	79fa      	ldrb	r2, [r7, #7]
 80084de:	4610      	mov	r0, r2
 80084e0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01a      	beq.n	8008522 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <USART2_IRQHandler+0x8c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d015      	beq.n	8008520 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80084f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <USART2_IRQHandler+0x8c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	1dfa      	adds	r2, r7, #7
 80084fa:	4610      	mov	r0, r2
 80084fc:	4798      	blx	r3
 80084fe:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8008506:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <USART2_IRQHandler+0x90>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a0b      	ldr	r2, [pc, #44]	@ (8008538 <USART2_IRQHandler+0x90>)
 800850c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e006      	b.n	8008522 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8008514:	4b04      	ldr	r3, [pc, #16]	@ (8008528 <USART2_IRQHandler+0x80>)
 8008516:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	4b04      	ldr	r3, [pc, #16]	@ (800852c <USART2_IRQHandler+0x84>)
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e000      	b.n	8008522 <USART2_IRQHandler+0x7a>
      return;
 8008520:	bf00      	nop
    }
  }
}
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	40004400 	.word	0x40004400
 800852c:	40004404 	.word	0x40004404
 8008530:	2001953c 	.word	0x2001953c
 8008534:	20019540 	.word	0x20019540
 8008538:	4000440c 	.word	0x4000440c

0800853c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8008540:	4b05      	ldr	r3, [pc, #20]	@ (8008558 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a04      	ldr	r2, [pc, #16]	@ (8008558 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8008546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854a:	6013      	str	r3, [r2, #0]
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	4000440c 	.word	0x4000440c

0800855c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8008568:	4b2e      	ldr	r3, [pc, #184]	@ (8008624 <HIF_UART_Init+0xc8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a2d      	ldr	r2, [pc, #180]	@ (8008624 <HIF_UART_Init+0xc8>)
 800856e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008572:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8008574:	4b2c      	ldr	r3, [pc, #176]	@ (8008628 <HIF_UART_Init+0xcc>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a2b      	ldr	r2, [pc, #172]	@ (8008628 <HIF_UART_Init+0xcc>)
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8008580:	4b2a      	ldr	r3, [pc, #168]	@ (800862c <HIF_UART_Init+0xd0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800858c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008594:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8008596:	4a25      	ldr	r2, [pc, #148]	@ (800862c <HIF_UART_Init+0xd0>)
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800859c:	4b24      	ldr	r3, [pc, #144]	@ (8008630 <HIF_UART_Init+0xd4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085a8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80085b0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80085b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008630 <HIF_UART_Init+0xd4>)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80085b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008634 <HIF_UART_Init+0xd8>)
 80085ba:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80085be:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80085c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008638 <HIF_UART_Init+0xdc>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80085c6:	4b1d      	ldr	r3, [pc, #116]	@ (800863c <HIF_UART_Init+0xe0>)
 80085c8:	2280      	movs	r2, #128	@ 0x80
 80085ca:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80085d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008640 <HIF_UART_Init+0xe4>)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085da:	3301      	adds	r3, #1
 80085dc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ea:	d302      	bcc.n	80085f2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80085ec:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80085f0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <HIF_UART_Init+0xa6>
    SEGGER_USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	4a11      	ldr	r2, [pc, #68]	@ (8008644 <HIF_UART_Init+0xe8>)
 80085fe:	b29b      	uxth	r3, r3
 8008600:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8008602:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <HIF_UART_Init+0xec>)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8008608:	4a10      	ldr	r2, [pc, #64]	@ (800864c <HIF_UART_Init+0xf0>)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800860e:	2106      	movs	r1, #6
 8008610:	2026      	movs	r0, #38	@ 0x26
 8008612:	f7ff feab 	bl	800836c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8008616:	2026      	movs	r0, #38	@ 0x26
 8008618:	f7ff fe8a 	bl	8008330 <__NVIC_EnableIRQ>
}
 800861c:	bf00      	nop
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40023840 	.word	0x40023840
 8008628:	40023830 	.word	0x40023830
 800862c:	40020020 	.word	0x40020020
 8008630:	40020000 	.word	0x40020000
 8008634:	4000440c 	.word	0x4000440c
 8008638:	40004410 	.word	0x40004410
 800863c:	40004414 	.word	0x40004414
 8008640:	0501bd00 	.word	0x0501bd00
 8008644:	40004408 	.word	0x40004408
 8008648:	2001953c 	.word	0x2001953c
 800864c:	20019540 	.word	0x20019540

08008650 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008656:	4b24      	ldr	r3, [pc, #144]	@ (80086e8 <_DoInit+0x98>)
 8008658:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2203      	movs	r2, #3
 800865e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2203      	movs	r2, #3
 8008664:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a20      	ldr	r2, [pc, #128]	@ (80086ec <_DoInit+0x9c>)
 800866a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a20      	ldr	r2, [pc, #128]	@ (80086f0 <_DoInit+0xa0>)
 8008670:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008678:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a17      	ldr	r2, [pc, #92]	@ (80086ec <_DoInit+0x9c>)
 8008690:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a17      	ldr	r2, [pc, #92]	@ (80086f4 <_DoInit+0xa4>)
 8008696:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2210      	movs	r2, #16
 800869c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3307      	adds	r3, #7
 80086b4:	4a10      	ldr	r2, [pc, #64]	@ (80086f8 <_DoInit+0xa8>)
 80086b6:	6810      	ldr	r0, [r2, #0]
 80086b8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80086ba:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a0e      	ldr	r2, [pc, #56]	@ (80086fc <_DoInit+0xac>)
 80086c2:	6810      	ldr	r0, [r2, #0]
 80086c4:	6018      	str	r0, [r3, #0]
 80086c6:	8891      	ldrh	r1, [r2, #4]
 80086c8:	7992      	ldrb	r2, [r2, #6]
 80086ca:	8099      	strh	r1, [r3, #4]
 80086cc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80086ce:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80086d8:	f3bf 8f5f 	dmb	sy
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20019544 	.word	0x20019544
 80086ec:	0800ac0c 	.word	0x0800ac0c
 80086f0:	200195ec 	.word	0x200195ec
 80086f4:	200199ec 	.word	0x200199ec
 80086f8:	0800ac18 	.word	0x0800ac18
 80086fc:	0800ac1c 	.word	0x0800ac1c

08008700 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b08a      	sub	sp, #40	@ 0x28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800870c:	2300      	movs	r3, #0
 800870e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	429a      	cmp	r2, r3
 8008722:	d905      	bls.n	8008730 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	627b      	str	r3, [r7, #36]	@ 0x24
 800872e:	e007      	b.n	8008740 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	69b9      	ldr	r1, [r7, #24]
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	1acb      	subs	r3, r1, r3
 800873a:	4413      	add	r3, r2
 800873c:	3b01      	subs	r3, #1
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874a:	4293      	cmp	r3, r2
 800874c:	bf28      	it	cs
 800874e:	4613      	movcs	r3, r2
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4293      	cmp	r3, r2
 8008758:	bf28      	it	cs
 800875a:	4613      	movcs	r3, r2
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	6978      	ldr	r0, [r7, #20]
 800876e:	f002 f941 	bl	800a9f4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008772:	6a3a      	ldr	r2, [r7, #32]
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	4413      	add	r3, r2
 8008778:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	4413      	add	r3, r2
 8008780:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	4413      	add	r3, r2
 8008790:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	429a      	cmp	r2, r3
 800879a:	d101      	bne.n	80087a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800879c:	2300      	movs	r3, #0
 800879e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80087a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1b2      	bne.n	8008716 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80087b0:	6a3b      	ldr	r3, [r7, #32]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3728      	adds	r7, #40	@ 0x28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d911      	bls.n	8008802 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	4413      	add	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	6938      	ldr	r0, [r7, #16]
 80087ee:	f002 f901 	bl	800a9f4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80087f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	441a      	add	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008800:	e01f      	b.n	8008842 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	6938      	ldr	r0, [r7, #16]
 8008816:	f002 f8ed 	bl	800a9f4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	4413      	add	r3, r2
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4619      	mov	r1, r3
 8008832:	6938      	ldr	r0, [r7, #16]
 8008834:	f002 f8de 	bl	800a9f4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008838:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	60da      	str	r2, [r3, #12]
}
 8008842:	bf00      	nop
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800884a:	b480      	push	{r7}
 800884c:	b087      	sub	sp, #28
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	429a      	cmp	r2, r3
 8008864:	d808      	bhi.n	8008878 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1ad2      	subs	r2, r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	4413      	add	r3, r2
 8008872:	3b01      	subs	r3, #1
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	e004      	b.n	8008882 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008882:	697b      	ldr	r3, [r7, #20]
}
 8008884:	4618      	mov	r0, r3
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008890:	b580      	push	{r7, lr}
 8008892:	b08c      	sub	sp, #48	@ 0x30
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800889c:	4b3e      	ldr	r3, [pc, #248]	@ (8008998 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800889e:	623b      	str	r3, [r7, #32]
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80088aa:	f7ff fed1 	bl	8008650 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	4613      	mov	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4413      	add	r3, r2
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	4a37      	ldr	r2, [pc, #220]	@ (8008998 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80088bc:	4413      	add	r3, r2
 80088be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80088d0:	2300      	movs	r3, #0
 80088d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80088d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d92b      	bls.n	8008934 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4293      	cmp	r3, r2
 80088ec:	bf28      	it	cs
 80088ee:	4613      	movcs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f8:	4413      	add	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	6939      	ldr	r1, [r7, #16]
 8008900:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008902:	f002 f877 	bl	800a9f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8008906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	4413      	add	r3, r2
 800890c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800890e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	4413      	add	r3, r2
 8008914:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800891e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4413      	add	r3, r2
 8008924:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800892c:	429a      	cmp	r2, r3
 800892e:	d101      	bne.n	8008934 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8008930:	2300      	movs	r3, #0
 8008932:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4293      	cmp	r3, r2
 8008942:	bf28      	it	cs
 8008944:	4613      	movcs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d019      	beq.n	8008982 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	4413      	add	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	6939      	ldr	r1, [r7, #16]
 800895c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800895e:	f002 f849 	bl	800a9f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8008962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	4413      	add	r3, r2
 8008968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800896a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	4413      	add	r3, r2
 8008970:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800897a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	4413      	add	r3, r2
 8008980:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800898c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008990:	4618      	mov	r0, r3
 8008992:	3730      	adds	r7, #48	@ 0x30
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20019544 	.word	0x20019544

0800899c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	@ 0x30
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80089a8:	4b3e      	ldr	r3, [pc, #248]	@ (8008aa4 <SEGGER_RTT_ReadNoLock+0x108>)
 80089aa:	623b      	str	r3, [r7, #32]
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <SEGGER_RTT_ReadNoLock+0x1e>
 80089b6:	f7ff fe4b 	bl	8008650 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4613      	mov	r3, r2
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	4413      	add	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	3360      	adds	r3, #96	@ 0x60
 80089c6:	4a37      	ldr	r2, [pc, #220]	@ (8008aa4 <SEGGER_RTT_ReadNoLock+0x108>)
 80089c8:	4413      	add	r3, r2
 80089ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80089dc:	2300      	movs	r3, #0
 80089de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80089e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d92b      	bls.n	8008a40 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bf28      	it	cs
 80089fa:	4613      	movcs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a04:	4413      	add	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	6939      	ldr	r1, [r7, #16]
 8008a0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a0e:	f001 fff1 	bl	800a9f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8008a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4413      	add	r3, r2
 8008a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	4413      	add	r3, r2
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	4413      	add	r3, r2
 8008a30:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d101      	bne.n	8008a40 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bf28      	it	cs
 8008a50:	4613      	movcs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d019      	beq.n	8008a8e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a60:	4413      	add	r3, r2
 8008a62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	6939      	ldr	r1, [r7, #16]
 8008a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a6a:	f001 ffc3 	bl	800a9f4 <memcpy>
    NumBytesRead += NumBytesRem;
 8008a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4413      	add	r3, r2
 8008a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3730      	adds	r7, #48	@ 0x30
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20019544 	.word	0x20019544

08008aa8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	3360      	adds	r3, #96	@ 0x60
 8008ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8008b44 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d029      	beq.n	8008b26 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d82e      	bhi.n	8008b34 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d013      	beq.n	8008b06 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8008ade:	e029      	b.n	8008b34 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008ae0:	6978      	ldr	r0, [r7, #20]
 8008ae2:	f7ff feb2 	bl	800884a <_GetAvailWriteSpace>
 8008ae6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d202      	bcs.n	8008af6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008af4:	e021      	b.n	8008b3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	69b9      	ldr	r1, [r7, #24]
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7ff fe5b 	bl	80087ba <_WriteNoCheck>
    break;
 8008b04:	e019      	b.n	8008b3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008b06:	6978      	ldr	r0, [r7, #20]
 8008b08:	f7ff fe9f 	bl	800884a <_GetAvailWriteSpace>
 8008b0c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	4293      	cmp	r3, r2
 8008b14:	bf28      	it	cs
 8008b16:	4613      	movcs	r3, r2
 8008b18:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	69b9      	ldr	r1, [r7, #24]
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	f7ff fe4b 	bl	80087ba <_WriteNoCheck>
    break;
 8008b24:	e009      	b.n	8008b3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	69b9      	ldr	r1, [r7, #24]
 8008b2a:	6978      	ldr	r0, [r7, #20]
 8008b2c:	f7ff fde8 	bl	8008700 <_WriteBlocking>
 8008b30:	61f8      	str	r0, [r7, #28]
    break;
 8008b32:	e002      	b.n	8008b3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]
    break;
 8008b38:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20019544 	.word	0x20019544

08008b48 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8008b54:	4b0e      	ldr	r3, [pc, #56]	@ (8008b90 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8008b62:	f7ff fd75 	bl	8008650 <_DoInit>
  SEGGER_RTT_LOCK();
 8008b66:	f3ef 8311 	mrs	r3, BASEPRI
 8008b6a:	f04f 0120 	mov.w	r1, #32
 8008b6e:	f381 8811 	msr	BASEPRI, r1
 8008b72:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f7ff ff95 	bl	8008aa8 <SEGGER_RTT_WriteDownBufferNoLock>
 8008b7e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008b86:	697b      	ldr	r3, [r7, #20]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20019544 	.word	0x20019544

08008b94 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8008c98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008bb0:	f7ff fd4e 	bl	8008650 <_DoInit>
  SEGGER_RTT_LOCK();
 8008bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8008bb8:	f04f 0120 	mov.w	r1, #32
 8008bbc:	f381 8811 	msr	BASEPRI, r1
 8008bc0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008bc2:	4b35      	ldr	r3, [pc, #212]	@ (8008c98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008bc4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008bca:	6939      	ldr	r1, [r7, #16]
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	4413      	add	r3, r2
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	440b      	add	r3, r1
 8008bda:	3304      	adds	r3, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d008      	beq.n	8008bf4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	3301      	adds	r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	dbeb      	blt.n	8008bca <SEGGER_RTT_AllocUpBuffer+0x36>
 8008bf2:	e000      	b.n	8008bf6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008bf4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	da3f      	bge.n	8008c80 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008c00:	6939      	ldr	r1, [r7, #16]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	4613      	mov	r3, r2
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	4413      	add	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	440b      	add	r3, r1
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008c14:	6939      	ldr	r1, [r7, #16]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	4413      	add	r3, r2
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	440b      	add	r3, r1
 8008c24:	3304      	adds	r3, #4
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008c2a:	6939      	ldr	r1, [r7, #16]
 8008c2c:	69fa      	ldr	r2, [r7, #28]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4413      	add	r3, r2
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	440b      	add	r3, r1
 8008c38:	3320      	adds	r3, #32
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008c3e:	6939      	ldr	r1, [r7, #16]
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	4613      	mov	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3328      	adds	r3, #40	@ 0x28
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008c52:	6939      	ldr	r1, [r7, #16]
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	4613      	mov	r3, r2
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	4413      	add	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	440b      	add	r3, r1
 8008c60:	3324      	adds	r3, #36	@ 0x24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008c66:	6939      	ldr	r1, [r7, #16]
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	440b      	add	r3, r1
 8008c74:	332c      	adds	r3, #44	@ 0x2c
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008c7a:	f3bf 8f5f 	dmb	sy
 8008c7e:	e002      	b.n	8008c86 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c84:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20019544 	.word	0x20019544

08008c9c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008caa:	4b33      	ldr	r3, [pc, #204]	@ (8008d78 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008cb8:	f7ff fcca 	bl	8008650 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8008d78 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8008cbe:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d24d      	bcs.n	8008d68 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8008ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8008cd0:	f04f 0120 	mov.w	r1, #32
 8008cd4:	f381 8811 	msr	BASEPRI, r1
 8008cd8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d031      	beq.n	8008d44 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8008ce0:	6979      	ldr	r1, [r7, #20]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	4413      	add	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	440b      	add	r3, r1
 8008cee:	3360      	adds	r3, #96	@ 0x60
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8008cf4:	6979      	ldr	r1, [r7, #20]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	4413      	add	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	440b      	add	r3, r1
 8008d02:	3364      	adds	r3, #100	@ 0x64
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8008d08:	6979      	ldr	r1, [r7, #20]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	4413      	add	r3, r2
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	440b      	add	r3, r1
 8008d16:	3368      	adds	r3, #104	@ 0x68
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8008d1c:	6979      	ldr	r1, [r7, #20]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	4613      	mov	r3, r2
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	4413      	add	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	440b      	add	r3, r1
 8008d2a:	3370      	adds	r3, #112	@ 0x70
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4613      	mov	r3, r2
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	440b      	add	r3, r1
 8008d3e:	336c      	adds	r3, #108	@ 0x6c
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8008d44:	6979      	ldr	r1, [r7, #20]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	440b      	add	r3, r1
 8008d52:	3374      	adds	r3, #116	@ 0x74
 8008d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d56:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008d58:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	e002      	b.n	8008d6e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8008d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d6c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8008d6e:	69fb      	ldr	r3, [r7, #28]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20019544 	.word	0x20019544

08008d7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d8c:	e002      	b.n	8008d94 <_EncodeStr+0x18>
    Len++;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	3301      	adds	r3, #1
 8008d92:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4413      	add	r3, r2
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f6      	bne.n	8008d8e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d901      	bls.n	8008dac <_EncodeStr+0x30>
    Len = Limit;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2bfe      	cmp	r3, #254	@ 0xfe
 8008db0:	d806      	bhi.n	8008dc0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	60fa      	str	r2, [r7, #12]
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e011      	b.n	8008de4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	60fa      	str	r2, [r7, #12]
 8008dc6:	22ff      	movs	r2, #255	@ 0xff
 8008dc8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	60fa      	str	r2, [r7, #12]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	0a19      	lsrs	r1, r3, #8
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	60fa      	str	r2, [r7, #12]
 8008de0:	b2ca      	uxtb	r2, r1
 8008de2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008de8:	e00a      	b.n	8008e00 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	1c53      	adds	r3, r2, #1
 8008dee:	60bb      	str	r3, [r7, #8]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	1c59      	adds	r1, r3, #1
 8008df4:	60f9      	str	r1, [r7, #12]
 8008df6:	7812      	ldrb	r2, [r2, #0]
 8008df8:	701a      	strb	r2, [r3, #0]
    n++;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d3f0      	bcc.n	8008dea <_EncodeStr+0x6e>
  }
  return pPayload;
 8008e08:	68fb      	ldr	r3, [r7, #12]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3304      	adds	r3, #4
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e36:	4b35      	ldr	r3, [pc, #212]	@ (8008f0c <_HandleIncomingPacket+0xdc>)
 8008e38:	7e1b      	ldrb	r3, [r3, #24]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	1cfb      	adds	r3, r7, #3
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4619      	mov	r1, r3
 8008e42:	f7ff fdab 	bl	800899c <SEGGER_RTT_ReadNoLock>
 8008e46:	4603      	mov	r3, r0
 8008e48:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd59      	ble.n	8008f04 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	2b80      	cmp	r3, #128	@ 0x80
 8008e54:	d032      	beq.n	8008ebc <_HandleIncomingPacket+0x8c>
 8008e56:	2b80      	cmp	r3, #128	@ 0x80
 8008e58:	dc42      	bgt.n	8008ee0 <_HandleIncomingPacket+0xb0>
 8008e5a:	2b07      	cmp	r3, #7
 8008e5c:	dc16      	bgt.n	8008e8c <_HandleIncomingPacket+0x5c>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dd3e      	ble.n	8008ee0 <_HandleIncomingPacket+0xb0>
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	d83b      	bhi.n	8008ee0 <_HandleIncomingPacket+0xb0>
 8008e68:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <_HandleIncomingPacket+0x40>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008e93 	.word	0x08008e93
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008e9f 	.word	0x08008e9f
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008eab 	.word	0x08008eab
 8008e84:	08008eb1 	.word	0x08008eb1
 8008e88:	08008eb7 	.word	0x08008eb7
 8008e8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e8e:	d034      	beq.n	8008efa <_HandleIncomingPacket+0xca>
 8008e90:	e026      	b.n	8008ee0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008e92:	f000 ff43 	bl	8009d1c <SEGGER_SYSVIEW_Start>
      break;
 8008e96:	e035      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008e98:	f000 fffc 	bl	8009e94 <SEGGER_SYSVIEW_Stop>
      break;
 8008e9c:	e032      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008e9e:	f001 f9d5 	bl	800a24c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008ea2:	e02f      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008ea4:	f001 f99a 	bl	800a1dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008ea8:	e02c      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008eaa:	f001 f819 	bl	8009ee0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008eae:	e029      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008eb0:	f001 fc68 	bl	800a784 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008eb4:	e026      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008eb6:	f001 fc47 	bl	800a748 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008eba:	e023      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <_HandleIncomingPacket+0xdc>)
 8008ebe:	7e1b      	ldrb	r3, [r3, #24]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	1cfb      	adds	r3, r7, #3
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f7ff fd68 	bl	800899c <SEGGER_RTT_ReadNoLock>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	dd13      	ble.n	8008efe <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fbb5 	bl	800a648 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008ede:	e00e      	b.n	8008efe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	b25b      	sxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	da0c      	bge.n	8008f02 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008ee8:	4b08      	ldr	r3, [pc, #32]	@ (8008f0c <_HandleIncomingPacket+0xdc>)
 8008eea:	7e1b      	ldrb	r3, [r3, #24]
 8008eec:	4618      	mov	r0, r3
 8008eee:	1cfb      	adds	r3, r7, #3
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f7ff fd52 	bl	800899c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008ef8:	e003      	b.n	8008f02 <_HandleIncomingPacket+0xd2>
      break;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
      break;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <_HandleIncomingPacket+0xd4>
      break;
 8008f02:	bf00      	nop
    }
  }
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	2001aa04 	.word	0x2001aa04

08008f10 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08c      	sub	sp, #48	@ 0x30
 8008f14:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008f16:	2301      	movs	r3, #1
 8008f18:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f24:	4b32      	ldr	r3, [pc, #200]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f2a:	e00b      	b.n	8008f44 <_TrySendOverflowPacket+0x34>
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008f36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	09db      	lsrs	r3, r3, #7
 8008f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f48:	d8f0      	bhi.n	8008f2c <_TrySendOverflowPacket+0x1c>
 8008f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f52:	b2d2      	uxtb	r2, r2
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f58:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008f5a:	4b26      	ldr	r3, [pc, #152]	@ (8008ff4 <_TrySendOverflowPacket+0xe4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008f60:	4b23      	ldr	r3, [pc, #140]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	623b      	str	r3, [r7, #32]
 8008f72:	e00b      	b.n	8008f8c <_TrySendOverflowPacket+0x7c>
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7a:	1c59      	adds	r1, r3, #1
 8008f7c:	6279      	str	r1, [r7, #36]	@ 0x24
 8008f7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	09db      	lsrs	r3, r3, #7
 8008f8a:	623b      	str	r3, [r7, #32]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f90:	d8f0      	bhi.n	8008f74 <_TrySendOverflowPacket+0x64>
 8008f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f98:	6a3a      	ldr	r2, [r7, #32]
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008fa2:	4b13      	ldr	r3, [pc, #76]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	1d3b      	adds	r3, r7, #4
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	1d3b      	adds	r3, r7, #4
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	f7f7 f90c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8008fbc:	f7ff fabe 	bl	800853c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008fcc:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	4b06      	ldr	r3, [pc, #24]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e004      	b.n	8008fe4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008fda:	4b05      	ldr	r3, [pc, #20]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	4a03      	ldr	r2, [pc, #12]	@ (8008ff0 <_TrySendOverflowPacket+0xe0>)
 8008fe2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008fe4:	693b      	ldr	r3, [r7, #16]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3730      	adds	r7, #48	@ 0x30
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	2001aa04 	.word	0x2001aa04
 8008ff4:	e0001004 	.word	0xe0001004

08008ff8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08a      	sub	sp, #40	@ 0x28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009004:	4b6d      	ldr	r3, [pc, #436]	@ (80091bc <_SendPacket+0x1c4>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d010      	beq.n	800902e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800900c:	4b6b      	ldr	r3, [pc, #428]	@ (80091bc <_SendPacket+0x1c4>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80a5 	beq.w	8009160 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8009016:	4b69      	ldr	r3, [pc, #420]	@ (80091bc <_SendPacket+0x1c4>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d109      	bne.n	8009032 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800901e:	f7ff ff77 	bl	8008f10 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009022:	4b66      	ldr	r3, [pc, #408]	@ (80091bc <_SendPacket+0x1c4>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	f040 809c 	bne.w	8009164 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800902c:	e001      	b.n	8009032 <_SendPacket+0x3a>
    goto Send;
 800902e:	bf00      	nop
 8009030:	e000      	b.n	8009034 <_SendPacket+0x3c>
Send:
 8009032:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b1f      	cmp	r3, #31
 8009038:	d809      	bhi.n	800904e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800903a:	4b60      	ldr	r3, [pc, #384]	@ (80091bc <_SendPacket+0x1c4>)
 800903c:	69da      	ldr	r2, [r3, #28]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	f040 808d 	bne.w	8009168 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b17      	cmp	r3, #23
 8009052:	d807      	bhi.n	8009064 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3b01      	subs	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	b2da      	uxtb	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	e03d      	b.n	80090e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009070:	d912      	bls.n	8009098 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	09da      	lsrs	r2, r3, #7
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b01      	subs	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	3a01      	subs	r2, #1
 800908a:	60fa      	str	r2, [r7, #12]
 800908c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009090:	b2da      	uxtb	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	e006      	b.n	80090a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3b01      	subs	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80090aa:	d912      	bls.n	80090d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	09da      	lsrs	r2, r3, #7
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	3a01      	subs	r2, #1
 80090c4:	60fa      	str	r2, [r7, #12]
 80090c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	e006      	b.n	80090e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80090e0:	4b37      	ldr	r3, [pc, #220]	@ (80091c0 <_SendPacket+0x1c8>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80090e6:	4b35      	ldr	r3, [pc, #212]	@ (80091bc <_SendPacket+0x1c4>)
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	623b      	str	r3, [r7, #32]
 80090f8:	e00b      	b.n	8009112 <_SendPacket+0x11a>
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	1c59      	adds	r1, r3, #1
 8009102:	6279      	str	r1, [r7, #36]	@ 0x24
 8009104:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	09db      	lsrs	r3, r3, #7
 8009110:	623b      	str	r3, [r7, #32]
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	2b7f      	cmp	r3, #127	@ 0x7f
 8009116:	d8f0      	bhi.n	80090fa <_SendPacket+0x102>
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	627a      	str	r2, [r7, #36]	@ 0x24
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	b2d2      	uxtb	r2, r2
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8009128:	4b24      	ldr	r3, [pc, #144]	@ (80091bc <_SendPacket+0x1c4>)
 800912a:	785b      	ldrb	r3, [r3, #1]
 800912c:	4618      	mov	r0, r3
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	461a      	mov	r2, r3
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	f7f7 f84a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800913c:	4603      	mov	r3, r0
 800913e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8009140:	f7ff f9fc 	bl	800853c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800914a:	4a1c      	ldr	r2, [pc, #112]	@ (80091bc <_SendPacket+0x1c4>)
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	60d3      	str	r3, [r2, #12]
 8009150:	e00b      	b.n	800916a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009152:	4b1a      	ldr	r3, [pc, #104]	@ (80091bc <_SendPacket+0x1c4>)
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	4b18      	ldr	r3, [pc, #96]	@ (80091bc <_SendPacket+0x1c4>)
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	e004      	b.n	800916a <_SendPacket+0x172>
    goto SendDone;
 8009160:	bf00      	nop
 8009162:	e002      	b.n	800916a <_SendPacket+0x172>
      goto SendDone;
 8009164:	bf00      	nop
 8009166:	e000      	b.n	800916a <_SendPacket+0x172>
      goto SendDone;
 8009168:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800916a:	4b14      	ldr	r3, [pc, #80]	@ (80091bc <_SendPacket+0x1c4>)
 800916c:	7e1b      	ldrb	r3, [r3, #24]
 800916e:	4619      	mov	r1, r3
 8009170:	4a14      	ldr	r2, [pc, #80]	@ (80091c4 <_SendPacket+0x1cc>)
 8009172:	460b      	mov	r3, r1
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	440b      	add	r3, r1
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	4413      	add	r3, r2
 800917c:	336c      	adds	r3, #108	@ 0x6c
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	4b0e      	ldr	r3, [pc, #56]	@ (80091bc <_SendPacket+0x1c4>)
 8009182:	7e1b      	ldrb	r3, [r3, #24]
 8009184:	4618      	mov	r0, r3
 8009186:	490f      	ldr	r1, [pc, #60]	@ (80091c4 <_SendPacket+0x1cc>)
 8009188:	4603      	mov	r3, r0
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	4403      	add	r3, r0
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	440b      	add	r3, r1
 8009192:	3370      	adds	r3, #112	@ 0x70
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d00b      	beq.n	80091b2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800919a:	4b08      	ldr	r3, [pc, #32]	@ (80091bc <_SendPacket+0x1c4>)
 800919c:	789b      	ldrb	r3, [r3, #2]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d107      	bne.n	80091b2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80091a2:	4b06      	ldr	r3, [pc, #24]	@ (80091bc <_SendPacket+0x1c4>)
 80091a4:	2201      	movs	r2, #1
 80091a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80091a8:	f7ff fe42 	bl	8008e30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80091ac:	4b03      	ldr	r3, [pc, #12]	@ (80091bc <_SendPacket+0x1c4>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80091b2:	bf00      	nop
 80091b4:	3728      	adds	r7, #40	@ 0x28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2001aa04 	.word	0x2001aa04
 80091c0:	e0001004 	.word	0xe0001004
 80091c4:	20019544 	.word	0x20019544

080091c8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	@ 0x28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	3301      	adds	r3, #1
 80091de:	2b80      	cmp	r3, #128	@ 0x80
 80091e0:	d80a      	bhi.n	80091f8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	1c59      	adds	r1, r3, #1
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6051      	str	r1, [r2, #4]
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	2b80      	cmp	r3, #128	@ 0x80
 80091fe:	d15a      	bne.n	80092b6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	627b      	str	r3, [r7, #36]	@ 0x24
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	e00b      	b.n	800923a <_StoreChar+0x72>
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	1c59      	adds	r1, r3, #1
 800922a:	6279      	str	r1, [r7, #36]	@ 0x24
 800922c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	09db      	lsrs	r3, r3, #7
 8009238:	623b      	str	r3, [r7, #32]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b7f      	cmp	r3, #127	@ 0x7f
 800923e:	d8f0      	bhi.n	8009222 <_StoreChar+0x5a>
 8009240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	627a      	str	r2, [r7, #36]	@ 0x24
 8009246:	6a3a      	ldr	r2, [r7, #32]
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	2300      	movs	r3, #0
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	e00b      	b.n	8009272 <_StoreChar+0xaa>
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	b2da      	uxtb	r2, r3
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	1c59      	adds	r1, r3, #1
 8009262:	61f9      	str	r1, [r7, #28]
 8009264:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	701a      	strb	r2, [r3, #0]
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	09db      	lsrs	r3, r3, #7
 8009270:	61bb      	str	r3, [r7, #24]
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b7f      	cmp	r3, #127	@ 0x7f
 8009276:	d8f0      	bhi.n	800925a <_StoreChar+0x92>
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	61fa      	str	r2, [r7, #28]
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	221a      	movs	r2, #26
 800928e:	6939      	ldr	r1, [r7, #16]
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff feb1 	bl	8008ff8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fdbb 	bl	8008e16 <_PreparePacket>
 80092a0:	4602      	mov	r2, r0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	611a      	str	r2, [r3, #16]
  }
}
 80092b6:	bf00      	nop
 80092b8:	3728      	adds	r7, #40	@ 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
	...

080092c0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	@ 0x28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80092d2:	2301      	movs	r3, #1
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80092d6:	2301      	movs	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80092da:	e007      	b.n	80092ec <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80092dc:	6a3a      	ldr	r2, [r7, #32]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e4:	623b      	str	r3, [r7, #32]
    Width++;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	3301      	adds	r3, #1
 80092ea:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d2f3      	bcs.n	80092dc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d901      	bls.n	8009300 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8009300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d000      	beq.n	800930c <_PrintUnsigned+0x4c>
 800930a:	e01f      	b.n	800934c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01c      	beq.n	800934c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8009312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <_PrintUnsigned+0x68>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <_PrintUnsigned+0x68>
        c = '0';
 8009322:	2330      	movs	r3, #48	@ 0x30
 8009324:	76fb      	strb	r3, [r7, #27]
 8009326:	e001      	b.n	800932c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8009328:	2320      	movs	r3, #32
 800932a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800932c:	e007      	b.n	800933e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	3b01      	subs	r3, #1
 8009332:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8009334:	7efb      	ldrb	r3, [r7, #27]
 8009336:	4619      	mov	r1, r3
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7ff ff45 	bl	80091c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <_PrintUnsigned+0x8c>
 8009344:	69fa      	ldr	r2, [r7, #28]
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	429a      	cmp	r2, r3
 800934a:	d3f0      	bcc.n	800932e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d903      	bls.n	800935a <_PrintUnsigned+0x9a>
      NumDigits--;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	3b01      	subs	r3, #1
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	e009      	b.n	800936e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009362:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	429a      	cmp	r2, r3
 800936a:	d200      	bcs.n	800936e <_PrintUnsigned+0xae>
        break;
 800936c:	e005      	b.n	800937a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009378:	e7e8      	b.n	800934c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009382:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009388:	fb02 f303 	mul.w	r3, r2, r3
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8009392:	4a15      	ldr	r2, [pc, #84]	@ (80093e8 <_PrintUnsigned+0x128>)
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4413      	add	r3, r2
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4619      	mov	r1, r3
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7ff ff13 	bl	80091c8 <_StoreChar>
    Digit /= Base;
 80093a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093aa:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e3      	bne.n	800937a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80093b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d011      	beq.n	80093e0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80093c2:	e006      	b.n	80093d2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	3b01      	subs	r3, #1
 80093c8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80093ca:	2120      	movs	r1, #32
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f7ff fefb 	bl	80091c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <_PrintUnsigned+0x120>
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	429a      	cmp	r2, r3
 80093de:	d3f1      	bcc.n	80093c4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80093e0:	bf00      	nop
 80093e2:	3728      	adds	r7, #40	@ 0x28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	0800adfc 	.word	0x0800adfc

080093ec <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfb8      	it	lt
 8009400:	425b      	neglt	r3, r3
 8009402:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8009404:	2301      	movs	r3, #1
 8009406:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8009408:	e007      	b.n	800941a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009412:	613b      	str	r3, [r7, #16]
    Width++;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	3301      	adds	r3, #1
 8009418:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	429a      	cmp	r2, r3
 8009420:	daf3      	bge.n	800940a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	429a      	cmp	r2, r3
 8009428:	d901      	bls.n	800942e <_PrintInt+0x42>
    Width = NumDigits;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <_PrintInt+0x5e>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	db04      	blt.n	8009444 <_PrintInt+0x58>
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <_PrintInt+0x5e>
    FieldWidth--;
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	3b01      	subs	r3, #1
 8009448:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <_PrintInt+0x6e>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d016      	beq.n	8009488 <_PrintInt+0x9c>
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d111      	bne.n	8009488 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00e      	beq.n	8009488 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800946a:	e006      	b.n	800947a <_PrintInt+0x8e>
        FieldWidth--;
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	3b01      	subs	r3, #1
 8009470:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8009472:	2120      	movs	r1, #32
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff fea7 	bl	80091c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <_PrintInt+0x9c>
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	429a      	cmp	r2, r3
 8009486:	d3f1      	bcc.n	800946c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	da07      	bge.n	800949e <_PrintInt+0xb2>
    v = -v;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	425b      	negs	r3, r3
 8009492:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8009494:	212d      	movs	r1, #45	@ 0x2d
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff fe96 	bl	80091c8 <_StoreChar>
 800949c:	e008      	b.n	80094b0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80094a8:	212b      	movs	r1, #43	@ 0x2b
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7ff fe8c 	bl	80091c8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d019      	beq.n	80094ee <_PrintInt+0x102>
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d114      	bne.n	80094ee <_PrintInt+0x102>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d111      	bne.n	80094ee <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00e      	beq.n	80094ee <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80094d0:	e006      	b.n	80094e0 <_PrintInt+0xf4>
        FieldWidth--;
 80094d2:	6a3b      	ldr	r3, [r7, #32]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80094d8:	2130      	movs	r1, #48	@ 0x30
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff fe74 	bl	80091c8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <_PrintInt+0x102>
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d3f1      	bcc.n	80094d2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7ff fedf 	bl	80092c0 <_PrintUnsigned>
}
 8009502:	bf00      	nop
 8009504:	3718      	adds	r7, #24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800950c:	b580      	push	{r7, lr}
 800950e:	b098      	sub	sp, #96	@ 0x60
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009518:	f3ef 8311 	mrs	r3, BASEPRI
 800951c:	f04f 0120 	mov.w	r1, #32
 8009520:	f381 8811 	msr	BASEPRI, r1
 8009524:	633b      	str	r3, [r7, #48]	@ 0x30
 8009526:	48b7      	ldr	r0, [pc, #732]	@ (8009804 <_VPrintTarget+0x2f8>)
 8009528:	f7ff fc75 	bl	8008e16 <_PreparePacket>
 800952c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800952e:	4bb5      	ldr	r3, [pc, #724]	@ (8009804 <_VPrintTarget+0x2f8>)
 8009530:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8009532:	2300      	movs	r3, #0
 8009534:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8009536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009538:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	3301      	adds	r3, #1
 800953e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8009552:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8183 	beq.w	8009862 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800955c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009560:	2b25      	cmp	r3, #37	@ 0x25
 8009562:	f040 8170 	bne.w	8009846 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8009566:	2300      	movs	r3, #0
 8009568:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8009576:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800957a:	3b23      	subs	r3, #35	@ 0x23
 800957c:	2b0d      	cmp	r3, #13
 800957e:	d83f      	bhi.n	8009600 <_VPrintTarget+0xf4>
 8009580:	a201      	add	r2, pc, #4	@ (adr r2, 8009588 <_VPrintTarget+0x7c>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095f1 	.word	0x080095f1
 800958c:	08009601 	.word	0x08009601
 8009590:	08009601 	.word	0x08009601
 8009594:	08009601 	.word	0x08009601
 8009598:	08009601 	.word	0x08009601
 800959c:	08009601 	.word	0x08009601
 80095a0:	08009601 	.word	0x08009601
 80095a4:	08009601 	.word	0x08009601
 80095a8:	080095e1 	.word	0x080095e1
 80095ac:	08009601 	.word	0x08009601
 80095b0:	080095c1 	.word	0x080095c1
 80095b4:	08009601 	.word	0x08009601
 80095b8:	08009601 	.word	0x08009601
 80095bc:	080095d1 	.word	0x080095d1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80095c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c2:	f043 0301 	orr.w	r3, r3, #1
 80095c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	e01a      	b.n	8009606 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80095d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095d2:	f043 0302 	orr.w	r3, r3, #2
 80095d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3301      	adds	r3, #1
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	e012      	b.n	8009606 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80095e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e2:	f043 0304 	orr.w	r3, r3, #4
 80095e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3301      	adds	r3, #1
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	e00a      	b.n	8009606 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80095f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f2:	f043 0308 	orr.w	r3, r3, #8
 80095f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	e002      	b.n	8009606 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8009600:	2300      	movs	r3, #0
 8009602:	653b      	str	r3, [r7, #80]	@ 0x50
 8009604:	bf00      	nop
        }
      } while (v);
 8009606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1b0      	bne.n	800956e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800960c:	2300      	movs	r3, #0
 800960e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8009618:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800961c:	2b2f      	cmp	r3, #47	@ 0x2f
 800961e:	d912      	bls.n	8009646 <_VPrintTarget+0x13a>
 8009620:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009624:	2b39      	cmp	r3, #57	@ 0x39
 8009626:	d80e      	bhi.n	8009646 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800962e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	461a      	mov	r2, r3
 800963a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800963e:	4413      	add	r3, r2
 8009640:	3b30      	subs	r3, #48	@ 0x30
 8009642:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8009644:	e7e4      	b.n	8009610 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8009646:	2300      	movs	r3, #0
 8009648:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8009652:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009656:	2b2e      	cmp	r3, #46	@ 0x2e
 8009658:	d11d      	bne.n	8009696 <_VPrintTarget+0x18a>
        sFormat++;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8009668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800966c:	2b2f      	cmp	r3, #47	@ 0x2f
 800966e:	d912      	bls.n	8009696 <_VPrintTarget+0x18a>
 8009670:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009674:	2b39      	cmp	r3, #57	@ 0x39
 8009676:	d80e      	bhi.n	8009696 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3301      	adds	r3, #1
 800967c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800967e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	461a      	mov	r2, r3
 800968a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800968e:	4413      	add	r3, r2
 8009690:	3b30      	subs	r3, #48	@ 0x30
 8009692:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8009694:	e7e4      	b.n	8009660 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800969e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096a2:	2b6c      	cmp	r3, #108	@ 0x6c
 80096a4:	d003      	beq.n	80096ae <_VPrintTarget+0x1a2>
 80096a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096aa:	2b68      	cmp	r3, #104	@ 0x68
 80096ac:	d107      	bne.n	80096be <_VPrintTarget+0x1b2>
          c = *sFormat;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3301      	adds	r3, #1
 80096ba:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80096bc:	e7ef      	b.n	800969e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80096be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096c2:	2b25      	cmp	r3, #37	@ 0x25
 80096c4:	f000 80b3 	beq.w	800982e <_VPrintTarget+0x322>
 80096c8:	2b25      	cmp	r3, #37	@ 0x25
 80096ca:	f2c0 80b7 	blt.w	800983c <_VPrintTarget+0x330>
 80096ce:	2b78      	cmp	r3, #120	@ 0x78
 80096d0:	f300 80b4 	bgt.w	800983c <_VPrintTarget+0x330>
 80096d4:	2b58      	cmp	r3, #88	@ 0x58
 80096d6:	f2c0 80b1 	blt.w	800983c <_VPrintTarget+0x330>
 80096da:	3b58      	subs	r3, #88	@ 0x58
 80096dc:	2b20      	cmp	r3, #32
 80096de:	f200 80ad 	bhi.w	800983c <_VPrintTarget+0x330>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <_VPrintTarget+0x1dc>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	080097df 	.word	0x080097df
 80096ec:	0800983d 	.word	0x0800983d
 80096f0:	0800983d 	.word	0x0800983d
 80096f4:	0800983d 	.word	0x0800983d
 80096f8:	0800983d 	.word	0x0800983d
 80096fc:	0800983d 	.word	0x0800983d
 8009700:	0800983d 	.word	0x0800983d
 8009704:	0800983d 	.word	0x0800983d
 8009708:	0800983d 	.word	0x0800983d
 800970c:	0800983d 	.word	0x0800983d
 8009710:	0800983d 	.word	0x0800983d
 8009714:	0800976d 	.word	0x0800976d
 8009718:	08009793 	.word	0x08009793
 800971c:	0800983d 	.word	0x0800983d
 8009720:	0800983d 	.word	0x0800983d
 8009724:	0800983d 	.word	0x0800983d
 8009728:	0800983d 	.word	0x0800983d
 800972c:	0800983d 	.word	0x0800983d
 8009730:	0800983d 	.word	0x0800983d
 8009734:	0800983d 	.word	0x0800983d
 8009738:	0800983d 	.word	0x0800983d
 800973c:	0800983d 	.word	0x0800983d
 8009740:	0800983d 	.word	0x0800983d
 8009744:	0800983d 	.word	0x0800983d
 8009748:	08009809 	.word	0x08009809
 800974c:	0800983d 	.word	0x0800983d
 8009750:	0800983d 	.word	0x0800983d
 8009754:	0800983d 	.word	0x0800983d
 8009758:	0800983d 	.word	0x0800983d
 800975c:	080097b9 	.word	0x080097b9
 8009760:	0800983d 	.word	0x0800983d
 8009764:	0800983d 	.word	0x0800983d
 8009768:	080097df 	.word	0x080097df
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	1d19      	adds	r1, r3, #4
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6011      	str	r1, [r2, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800977a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800977c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8009780:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009784:	f107 0314 	add.w	r3, r7, #20
 8009788:	4611      	mov	r1, r2
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff fd1c 	bl	80091c8 <_StoreChar>
        break;
 8009790:	e055      	b.n	800983e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	1d19      	adds	r1, r3, #4
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6011      	str	r1, [r2, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80097a0:	f107 0014 	add.w	r0, r7, #20
 80097a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ae:	220a      	movs	r2, #10
 80097b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097b2:	f7ff fe1b 	bl	80093ec <_PrintInt>
        break;
 80097b6:	e042      	b.n	800983e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1d19      	adds	r1, r3, #4
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6011      	str	r1, [r2, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80097c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097c8:	f107 0014 	add.w	r0, r7, #20
 80097cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097d6:	220a      	movs	r2, #10
 80097d8:	f7ff fd72 	bl	80092c0 <_PrintUnsigned>
        break;
 80097dc:	e02f      	b.n	800983e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1d19      	adds	r1, r3, #4
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6011      	str	r1, [r2, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80097ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097ee:	f107 0014 	add.w	r0, r7, #20
 80097f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097fc:	2210      	movs	r2, #16
 80097fe:	f7ff fd5f 	bl	80092c0 <_PrintUnsigned>
        break;
 8009802:	e01c      	b.n	800983e <_VPrintTarget+0x332>
 8009804:	2001aa34 	.word	0x2001aa34
      case 'p':
        v = va_arg(*pParamList, int);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	1d19      	adds	r1, r3, #4
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	6011      	str	r1, [r2, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8009816:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009818:	f107 0014 	add.w	r0, r7, #20
 800981c:	2300      	movs	r3, #0
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	2308      	movs	r3, #8
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2308      	movs	r3, #8
 8009826:	2210      	movs	r2, #16
 8009828:	f7ff fd4a 	bl	80092c0 <_PrintUnsigned>
        break;
 800982c:	e007      	b.n	800983e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800982e:	f107 0314 	add.w	r3, r7, #20
 8009832:	2125      	movs	r1, #37	@ 0x25
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff fcc7 	bl	80091c8 <_StoreChar>
        break;
 800983a:	e000      	b.n	800983e <_VPrintTarget+0x332>
      default:
        break;
 800983c:	bf00      	nop
      }
      sFormat++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	e007      	b.n	8009856 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8009846:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800984a:	f107 0314 	add.w	r3, r7, #20
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff fcb9 	bl	80091c8 <_StoreChar>
    }
  } while (*sFormat);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f47f ae72 	bne.w	8009544 <_VPrintTarget+0x38>
 8009860:	e000      	b.n	8009864 <_VPrintTarget+0x358>
      break;
 8009862:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8009864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d041      	beq.n	80098ee <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800986a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	643b      	str	r3, [r7, #64]	@ 0x40
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800987a:	e00b      	b.n	8009894 <_VPrintTarget+0x388>
 800987c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987e:	b2da      	uxtb	r2, r3
 8009880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009882:	1c59      	adds	r1, r3, #1
 8009884:	6439      	str	r1, [r7, #64]	@ 0x40
 8009886:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009890:	09db      	lsrs	r3, r3, #7
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009896:	2b7f      	cmp	r3, #127	@ 0x7f
 8009898:	d8f0      	bhi.n	800987c <_VPrintTarget+0x370>
 800989a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	643a      	str	r2, [r7, #64]	@ 0x40
 80098a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098a8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ae:	2300      	movs	r3, #0
 80098b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b2:	e00b      	b.n	80098cc <_VPrintTarget+0x3c0>
 80098b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	1c59      	adds	r1, r3, #1
 80098bc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80098be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c8:	09db      	lsrs	r3, r3, #7
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80098cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80098d0:	d8f0      	bhi.n	80098b4 <_VPrintTarget+0x3a8>
 80098d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80098d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	69b9      	ldr	r1, [r7, #24]
 80098e6:	221a      	movs	r2, #26
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff fb85 	bl	8008ff8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80098f4:	bf00      	nop
 80098f6:	3758      	adds	r7, #88	@ 0x58
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800990a:	2300      	movs	r3, #0
 800990c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009910:	4917      	ldr	r1, [pc, #92]	@ (8009970 <SEGGER_SYSVIEW_Init+0x74>)
 8009912:	4818      	ldr	r0, [pc, #96]	@ (8009974 <SEGGER_SYSVIEW_Init+0x78>)
 8009914:	f7ff f93e 	bl	8008b94 <SEGGER_RTT_AllocUpBuffer>
 8009918:	4603      	mov	r3, r0
 800991a:	b2da      	uxtb	r2, r3
 800991c:	4b16      	ldr	r3, [pc, #88]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 800991e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8009920:	4b15      	ldr	r3, [pc, #84]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 8009922:	785a      	ldrb	r2, [r3, #1]
 8009924:	4b14      	ldr	r3, [pc, #80]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 8009926:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009928:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 800992a:	7e1b      	ldrb	r3, [r3, #24]
 800992c:	4618      	mov	r0, r3
 800992e:	2300      	movs	r3, #0
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	2308      	movs	r3, #8
 8009934:	4a11      	ldr	r2, [pc, #68]	@ (800997c <SEGGER_SYSVIEW_Init+0x80>)
 8009936:	490f      	ldr	r1, [pc, #60]	@ (8009974 <SEGGER_SYSVIEW_Init+0x78>)
 8009938:	f7ff f9b0 	bl	8008c9c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800993c:	4b0e      	ldr	r3, [pc, #56]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009942:	4b0f      	ldr	r3, [pc, #60]	@ (8009980 <SEGGER_SYSVIEW_Init+0x84>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a0c      	ldr	r2, [pc, #48]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 8009948:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800994a:	4a0b      	ldr	r2, [pc, #44]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009950:	4a09      	ldr	r2, [pc, #36]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009956:	4a08      	ldr	r2, [pc, #32]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800995c:	4a06      	ldr	r2, [pc, #24]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009962:	4b05      	ldr	r3, [pc, #20]	@ (8009978 <SEGGER_SYSVIEW_Init+0x7c>)
 8009964:	2200      	movs	r2, #0
 8009966:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200199fc 	.word	0x200199fc
 8009974:	0800ac24 	.word	0x0800ac24
 8009978:	2001aa04 	.word	0x2001aa04
 800997c:	2001a9fc 	.word	0x2001a9fc
 8009980:	e0001004 	.word	0xe0001004

08009984 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800998c:	4a04      	ldr	r2, [pc, #16]	@ (80099a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6113      	str	r3, [r2, #16]
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	2001aa04 	.word	0x2001aa04

080099a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80099ac:	f3ef 8311 	mrs	r3, BASEPRI
 80099b0:	f04f 0120 	mov.w	r1, #32
 80099b4:	f381 8811 	msr	BASEPRI, r1
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	4808      	ldr	r0, [pc, #32]	@ (80099dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80099bc:	f7ff fa2b 	bl	8008e16 <_PreparePacket>
 80099c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	68b8      	ldr	r0, [r7, #8]
 80099c8:	f7ff fb16 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f383 8811 	msr	BASEPRI, r3
}
 80099d2:	bf00      	nop
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	2001aa34 	.word	0x2001aa34

080099e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80099ea:	f3ef 8311 	mrs	r3, BASEPRI
 80099ee:	f04f 0120 	mov.w	r1, #32
 80099f2:	f381 8811 	msr	BASEPRI, r1
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	4816      	ldr	r0, [pc, #88]	@ (8009a54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80099fa:	f7ff fa0c 	bl	8008e16 <_PreparePacket>
 80099fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	61bb      	str	r3, [r7, #24]
 8009a0c:	e00b      	b.n	8009a26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	1c59      	adds	r1, r3, #1
 8009a16:	61f9      	str	r1, [r7, #28]
 8009a18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	09db      	lsrs	r3, r3, #7
 8009a24:	61bb      	str	r3, [r7, #24]
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a2a:	d8f0      	bhi.n	8009a0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	61fa      	str	r2, [r7, #28]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	6938      	ldr	r0, [r7, #16]
 8009a42:	f7ff fad9 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f383 8811 	msr	BASEPRI, r3
}
 8009a4c:	bf00      	nop
 8009a4e:	3720      	adds	r7, #32
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	2001aa34 	.word	0x2001aa34

08009a58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08c      	sub	sp, #48	@ 0x30
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009a64:	f3ef 8311 	mrs	r3, BASEPRI
 8009a68:	f04f 0120 	mov.w	r1, #32
 8009a6c:	f381 8811 	msr	BASEPRI, r1
 8009a70:	61fb      	str	r3, [r7, #28]
 8009a72:	4825      	ldr	r0, [pc, #148]	@ (8009b08 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009a74:	f7ff f9cf 	bl	8008e16 <_PreparePacket>
 8009a78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a86:	e00b      	b.n	8009aa0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8e:	1c59      	adds	r1, r3, #1
 8009a90:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009a92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a96:	b2d2      	uxtb	r2, r2
 8009a98:	701a      	strb	r2, [r3, #0]
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	09db      	lsrs	r3, r3, #7
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009aa4:	d8f0      	bhi.n	8009a88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	623b      	str	r3, [r7, #32]
 8009abe:	e00b      	b.n	8009ad8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac6:	1c59      	adds	r1, r3, #1
 8009ac8:	6279      	str	r1, [r7, #36]	@ 0x24
 8009aca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	09db      	lsrs	r3, r3, #7
 8009ad6:	623b      	str	r3, [r7, #32]
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8009adc:	d8f0      	bhi.n	8009ac0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ae4:	6a3a      	ldr	r2, [r7, #32]
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	69b8      	ldr	r0, [r7, #24]
 8009af4:	f7ff fa80 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
 8009b00:	3730      	adds	r7, #48	@ 0x30
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	2001aa34 	.word	0x2001aa34

08009b0c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08e      	sub	sp, #56	@ 0x38
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8009b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b1e:	f04f 0120 	mov.w	r1, #32
 8009b22:	f381 8811 	msr	BASEPRI, r1
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	4832      	ldr	r0, [pc, #200]	@ (8009bf4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8009b2a:	f7ff f974 	bl	8008e16 <_PreparePacket>
 8009b2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b3c:	e00b      	b.n	8009b56 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b44:	1c59      	adds	r1, r3, #1
 8009b46:	6379      	str	r1, [r7, #52]	@ 0x34
 8009b48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b4c:	b2d2      	uxtb	r2, r2
 8009b4e:	701a      	strb	r2, [r3, #0]
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	09db      	lsrs	r3, r3, #7
 8009b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b5a:	d8f0      	bhi.n	8009b3e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b64:	b2d2      	uxtb	r2, r2
 8009b66:	701a      	strb	r2, [r3, #0]
 8009b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b74:	e00b      	b.n	8009b8e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7c:	1c59      	adds	r1, r3, #1
 8009b7e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009b80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b84:	b2d2      	uxtb	r2, r2
 8009b86:	701a      	strb	r2, [r3, #0]
 8009b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8a:	09db      	lsrs	r3, r3, #7
 8009b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b92:	d8f0      	bhi.n	8009b76 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b96:	1c5a      	adds	r2, r3, #1
 8009b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b9c:	b2d2      	uxtb	r2, r2
 8009b9e:	701a      	strb	r2, [r3, #0]
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	623b      	str	r3, [r7, #32]
 8009bac:	e00b      	b.n	8009bc6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	1c59      	adds	r1, r3, #1
 8009bb6:	6279      	str	r1, [r7, #36]	@ 0x24
 8009bb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009bbc:	b2d2      	uxtb	r2, r2
 8009bbe:	701a      	strb	r2, [r3, #0]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	09db      	lsrs	r3, r3, #7
 8009bc4:	623b      	str	r3, [r7, #32]
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bca:	d8f0      	bhi.n	8009bae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8009bd2:	6a3a      	ldr	r2, [r7, #32]
 8009bd4:	b2d2      	uxtb	r2, r2
 8009bd6:	701a      	strb	r2, [r3, #0]
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	6979      	ldr	r1, [r7, #20]
 8009be0:	69b8      	ldr	r0, [r7, #24]
 8009be2:	f7ff fa09 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	f383 8811 	msr	BASEPRI, r3
}
 8009bec:	bf00      	nop
 8009bee:	3738      	adds	r7, #56	@ 0x38
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	2001aa34 	.word	0x2001aa34

08009bf8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b090      	sub	sp, #64	@ 0x40
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009c06:	f3ef 8311 	mrs	r3, BASEPRI
 8009c0a:	f04f 0120 	mov.w	r1, #32
 8009c0e:	f381 8811 	msr	BASEPRI, r1
 8009c12:	61fb      	str	r3, [r7, #28]
 8009c14:	4840      	ldr	r0, [pc, #256]	@ (8009d18 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009c16:	f7ff f8fe 	bl	8008e16 <_PreparePacket>
 8009c1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c28:	e00b      	b.n	8009c42 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c30:	1c59      	adds	r1, r3, #1
 8009c32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8009c34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c38:	b2d2      	uxtb	r2, r2
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	09db      	lsrs	r3, r3, #7
 8009c40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c46:	d8f0      	bhi.n	8009c2a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c60:	e00b      	b.n	8009c7a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c68:	1c59      	adds	r1, r3, #1
 8009c6a:	6379      	str	r1, [r7, #52]	@ 0x34
 8009c6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	701a      	strb	r2, [r3, #0]
 8009c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c76:	09db      	lsrs	r3, r3, #7
 8009c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c7e:	d8f0      	bhi.n	8009c62 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c88:	b2d2      	uxtb	r2, r2
 8009c8a:	701a      	strb	r2, [r3, #0]
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c98:	e00b      	b.n	8009cb2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca0:	1c59      	adds	r1, r3, #1
 8009ca2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009ca4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	09db      	lsrs	r3, r3, #7
 8009cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cb6:	d8f0      	bhi.n	8009c9a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cce:	623b      	str	r3, [r7, #32]
 8009cd0:	e00b      	b.n	8009cea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	1c59      	adds	r1, r3, #1
 8009cda:	6279      	str	r1, [r7, #36]	@ 0x24
 8009cdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	09db      	lsrs	r3, r3, #7
 8009ce8:	623b      	str	r3, [r7, #32]
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cee:	d8f0      	bhi.n	8009cd2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009cf6:	6a3a      	ldr	r2, [r7, #32]
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	6979      	ldr	r1, [r7, #20]
 8009d04:	69b8      	ldr	r0, [r7, #24]
 8009d06:	f7ff f977 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f383 8811 	msr	BASEPRI, r3
}
 8009d10:	bf00      	nop
 8009d12:	3740      	adds	r7, #64	@ 0x40
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2001aa34 	.word	0x2001aa34

08009d1c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08c      	sub	sp, #48	@ 0x30
 8009d20:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009d22:	4b59      	ldr	r3, [pc, #356]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009d28:	f3ef 8311 	mrs	r3, BASEPRI
 8009d2c:	f04f 0120 	mov.w	r1, #32
 8009d30:	f381 8811 	msr	BASEPRI, r1
 8009d34:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009d36:	4b54      	ldr	r3, [pc, #336]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	220a      	movs	r2, #10
 8009d3c:	4953      	ldr	r1, [pc, #332]	@ (8009e8c <SEGGER_SYSVIEW_Start+0x170>)
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f6 fa46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8009d4a:	f7fe fbf7 	bl	800853c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009d4e:	200a      	movs	r0, #10
 8009d50:	f7ff fe28 	bl	80099a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d54:	f3ef 8311 	mrs	r3, BASEPRI
 8009d58:	f04f 0120 	mov.w	r1, #32
 8009d5c:	f381 8811 	msr	BASEPRI, r1
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	484b      	ldr	r0, [pc, #300]	@ (8009e90 <SEGGER_SYSVIEW_Start+0x174>)
 8009d64:	f7ff f857 	bl	8008e16 <_PreparePacket>
 8009d68:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d72:	4b45      	ldr	r3, [pc, #276]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d78:	e00b      	b.n	8009d92 <SEGGER_SYSVIEW_Start+0x76>
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d80:	1c59      	adds	r1, r3, #1
 8009d82:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009d84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d88:	b2d2      	uxtb	r2, r2
 8009d8a:	701a      	strb	r2, [r3, #0]
 8009d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8e:	09db      	lsrs	r3, r3, #7
 8009d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d96:	d8f0      	bhi.n	8009d7a <SEGGER_SYSVIEW_Start+0x5e>
 8009d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009da0:	b2d2      	uxtb	r2, r2
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dac:	4b36      	ldr	r3, [pc, #216]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	623b      	str	r3, [r7, #32]
 8009db2:	e00b      	b.n	8009dcc <SEGGER_SYSVIEW_Start+0xb0>
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	1c59      	adds	r1, r3, #1
 8009dbc:	6279      	str	r1, [r7, #36]	@ 0x24
 8009dbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	09db      	lsrs	r3, r3, #7
 8009dca:	623b      	str	r3, [r7, #32]
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dd0:	d8f0      	bhi.n	8009db4 <SEGGER_SYSVIEW_Start+0x98>
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8009dd8:	6a3a      	ldr	r2, [r7, #32]
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	4b28      	ldr	r3, [pc, #160]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	61bb      	str	r3, [r7, #24]
 8009dec:	e00b      	b.n	8009e06 <SEGGER_SYSVIEW_Start+0xea>
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	1c59      	adds	r1, r3, #1
 8009df6:	61f9      	str	r1, [r7, #28]
 8009df8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009dfc:	b2d2      	uxtb	r2, r2
 8009dfe:	701a      	strb	r2, [r3, #0]
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	09db      	lsrs	r3, r3, #7
 8009e04:	61bb      	str	r3, [r7, #24]
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e0a:	d8f0      	bhi.n	8009dee <SEGGER_SYSVIEW_Start+0xd2>
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	61fa      	str	r2, [r7, #28]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	2300      	movs	r3, #0
 8009e22:	613b      	str	r3, [r7, #16]
 8009e24:	e00b      	b.n	8009e3e <SEGGER_SYSVIEW_Start+0x122>
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	1c59      	adds	r1, r3, #1
 8009e2e:	6179      	str	r1, [r7, #20]
 8009e30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009e34:	b2d2      	uxtb	r2, r2
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	09db      	lsrs	r3, r3, #7
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e42:	d8f0      	bhi.n	8009e26 <SEGGER_SYSVIEW_Start+0x10a>
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	617a      	str	r2, [r7, #20]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009e54:	2218      	movs	r2, #24
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff f8cd 	bl	8008ff8 <_SendPacket>
      RECORD_END();
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009e64:	4b08      	ldr	r3, [pc, #32]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009e6c:	4b06      	ldr	r3, [pc, #24]	@ (8009e88 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009e72:	f000 f9eb 	bl	800a24c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009e76:	f000 f9b1 	bl	800a1dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009e7a:	f000 fc83 	bl	800a784 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009e7e:	bf00      	nop
 8009e80:	3730      	adds	r7, #48	@ 0x30
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	2001aa04 	.word	0x2001aa04
 8009e8c:	0800adf0 	.word	0x0800adf0
 8009e90:	2001aa34 	.word	0x2001aa34

08009e94 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009e9e:	f04f 0120 	mov.w	r1, #32
 8009ea2:	f381 8811 	msr	BASEPRI, r1
 8009ea6:	607b      	str	r3, [r7, #4]
 8009ea8:	480b      	ldr	r0, [pc, #44]	@ (8009ed8 <SEGGER_SYSVIEW_Stop+0x44>)
 8009eaa:	f7fe ffb4 	bl	8008e16 <_PreparePacket>
 8009eae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8009edc <SEGGER_SYSVIEW_Stop+0x48>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d007      	beq.n	8009ec8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009eb8:	220b      	movs	r2, #11
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6838      	ldr	r0, [r7, #0]
 8009ebe:	f7ff f89b 	bl	8008ff8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009ec2:	4b06      	ldr	r3, [pc, #24]	@ (8009edc <SEGGER_SYSVIEW_Stop+0x48>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	2001aa34 	.word	0x2001aa34
 8009edc:	2001aa04 	.word	0x2001aa04

08009ee0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	@ 0x30
 8009ee4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8009eea:	f04f 0120 	mov.w	r1, #32
 8009eee:	f381 8811 	msr	BASEPRI, r1
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	4845      	ldr	r0, [pc, #276]	@ (800a00c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009ef6:	f7fe ff8e 	bl	8008e16 <_PreparePacket>
 8009efa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f04:	4b42      	ldr	r3, [pc, #264]	@ (800a010 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f0a:	e00b      	b.n	8009f24 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009f16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f20:	09db      	lsrs	r3, r3, #7
 8009f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f28:	d8f0      	bhi.n	8009f0c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f3e:	4b34      	ldr	r3, [pc, #208]	@ (800a010 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	623b      	str	r3, [r7, #32]
 8009f44:	e00b      	b.n	8009f5e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	1c59      	adds	r1, r3, #1
 8009f4e:	6279      	str	r1, [r7, #36]	@ 0x24
 8009f50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f54:	b2d2      	uxtb	r2, r2
 8009f56:	701a      	strb	r2, [r3, #0]
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	09db      	lsrs	r3, r3, #7
 8009f5c:	623b      	str	r3, [r7, #32]
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f62:	d8f0      	bhi.n	8009f46 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f6a:	6a3a      	ldr	r2, [r7, #32]
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	4b25      	ldr	r3, [pc, #148]	@ (800a010 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	61bb      	str	r3, [r7, #24]
 8009f7e:	e00b      	b.n	8009f98 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	1c59      	adds	r1, r3, #1
 8009f88:	61f9      	str	r1, [r7, #28]
 8009f8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f8e:	b2d2      	uxtb	r2, r2
 8009f90:	701a      	strb	r2, [r3, #0]
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	09db      	lsrs	r3, r3, #7
 8009f96:	61bb      	str	r3, [r7, #24]
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f9c:	d8f0      	bhi.n	8009f80 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	61fa      	str	r2, [r7, #28]
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	613b      	str	r3, [r7, #16]
 8009fb6:	e00b      	b.n	8009fd0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	1c59      	adds	r1, r3, #1
 8009fc0:	6179      	str	r1, [r7, #20]
 8009fc2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	09db      	lsrs	r3, r3, #7
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fd4:	d8f0      	bhi.n	8009fb8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	617a      	str	r2, [r7, #20]
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	b2d2      	uxtb	r2, r2
 8009fe0:	701a      	strb	r2, [r3, #0]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009fe6:	2218      	movs	r2, #24
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	68b8      	ldr	r0, [r7, #8]
 8009fec:	f7ff f804 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009ff6:	4b06      	ldr	r3, [pc, #24]	@ (800a010 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009ffe:	4b04      	ldr	r3, [pc, #16]	@ (800a010 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a002:	4798      	blx	r3
  }
}
 800a004:	bf00      	nop
 800a006:	3730      	adds	r7, #48	@ 0x30
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	2001aa34 	.word	0x2001aa34
 800a010:	2001aa04 	.word	0x2001aa04

0800a014 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a014:	b580      	push	{r7, lr}
 800a016:	b092      	sub	sp, #72	@ 0x48
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a01c:	f3ef 8311 	mrs	r3, BASEPRI
 800a020:	f04f 0120 	mov.w	r1, #32
 800a024:	f381 8811 	msr	BASEPRI, r1
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	486a      	ldr	r0, [pc, #424]	@ (800a1d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a02c:	f7fe fef3 	bl	8008e16 <_PreparePacket>
 800a030:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	647b      	str	r3, [r7, #68]	@ 0x44
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	4b66      	ldr	r3, [pc, #408]	@ (800a1d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	643b      	str	r3, [r7, #64]	@ 0x40
 800a046:	e00b      	b.n	800a060 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a04e:	1c59      	adds	r1, r3, #1
 800a050:	6479      	str	r1, [r7, #68]	@ 0x44
 800a052:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a05c:	09db      	lsrs	r3, r3, #7
 800a05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a062:	2b7f      	cmp	r3, #127	@ 0x7f
 800a064:	d8f0      	bhi.n	800a048 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a06c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a074:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a080:	e00b      	b.n	800a09a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a084:	b2da      	uxtb	r2, r3
 800a086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a088:	1c59      	adds	r1, r3, #1
 800a08a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800a08c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	09db      	lsrs	r3, r3, #7
 800a098:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a09e:	d8f0      	bhi.n	800a082 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a0a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a0a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0a8:	b2d2      	uxtb	r2, r2
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f7fe fe5f 	bl	8008d7c <_EncodeStr>
 800a0be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a0c0:	2209      	movs	r2, #9
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	6938      	ldr	r0, [r7, #16]
 800a0c6:	f7fe ff97 	bl	8008ff8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4b40      	ldr	r3, [pc, #256]	@ (800a1d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0de:	e00b      	b.n	800a0f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e6:	1c59      	adds	r1, r3, #1
 800a0e8:	6379      	str	r1, [r7, #52]	@ 0x34
 800a0ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	701a      	strb	r2, [r3, #0]
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	09db      	lsrs	r3, r3, #7
 800a0f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0fc:	d8f0      	bhi.n	800a0e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	637a      	str	r2, [r7, #52]	@ 0x34
 800a104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a118:	e00b      	b.n	800a132 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a120:	1c59      	adds	r1, r3, #1
 800a122:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a124:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12e:	09db      	lsrs	r3, r3, #7
 800a130:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a134:	2b7f      	cmp	r3, #127	@ 0x7f
 800a136:	d8f0      	bhi.n	800a11a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a13e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	701a      	strb	r2, [r3, #0]
 800a144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a146:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	623b      	str	r3, [r7, #32]
 800a152:	e00b      	b.n	800a16c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	b2da      	uxtb	r2, r3
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	1c59      	adds	r1, r3, #1
 800a15c:	6279      	str	r1, [r7, #36]	@ 0x24
 800a15e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	09db      	lsrs	r3, r3, #7
 800a16a:	623b      	str	r3, [r7, #32]
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a170:	d8f0      	bhi.n	800a154 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	627a      	str	r2, [r7, #36]	@ 0x24
 800a178:	6a3a      	ldr	r2, [r7, #32]
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]
 800a17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a180:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	61fb      	str	r3, [r7, #28]
 800a186:	2300      	movs	r3, #0
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	e00b      	b.n	800a1a4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	1c59      	adds	r1, r3, #1
 800a194:	61f9      	str	r1, [r7, #28]
 800a196:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	09db      	lsrs	r3, r3, #7
 800a1a2:	61bb      	str	r3, [r7, #24]
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1a8:	d8f0      	bhi.n	800a18c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	61fa      	str	r2, [r7, #28]
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	b2d2      	uxtb	r2, r2
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a1ba:	2215      	movs	r2, #21
 800a1bc:	68f9      	ldr	r1, [r7, #12]
 800a1be:	6938      	ldr	r0, [r7, #16]
 800a1c0:	f7fe ff1a 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	f383 8811 	msr	BASEPRI, r3
}
 800a1ca:	bf00      	nop
 800a1cc:	3748      	adds	r7, #72	@ 0x48
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	2001aa34 	.word	0x2001aa34
 800a1d8:	2001aa04 	.word	0x2001aa04

0800a1dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d008      	beq.n	800a1fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a1e8:	4b05      	ldr	r3, [pc, #20]	@ (800a200 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a1f2:	4b03      	ldr	r3, [pc, #12]	@ (800a200 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4798      	blx	r3
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	2001aa04 	.word	0x2001aa04

0800a204 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a20c:	f3ef 8311 	mrs	r3, BASEPRI
 800a210:	f04f 0120 	mov.w	r1, #32
 800a214:	f381 8811 	msr	BASEPRI, r1
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	480b      	ldr	r0, [pc, #44]	@ (800a248 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a21c:	f7fe fdfb 	bl	8008e16 <_PreparePacket>
 800a220:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a222:	2280      	movs	r2, #128	@ 0x80
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	6938      	ldr	r0, [r7, #16]
 800a228:	f7fe fda8 	bl	8008d7c <_EncodeStr>
 800a22c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a22e:	220e      	movs	r2, #14
 800a230:	68f9      	ldr	r1, [r7, #12]
 800a232:	6938      	ldr	r0, [r7, #16]
 800a234:	f7fe fee0 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f383 8811 	msr	BASEPRI, r3
}
 800a23e:	bf00      	nop
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	2001aa34 	.word	0x2001aa34

0800a24c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a24c:	b590      	push	{r4, r7, lr}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a252:	4b15      	ldr	r3, [pc, #84]	@ (800a2a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d01a      	beq.n	800a290 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d015      	beq.n	800a290 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a264:	4b10      	ldr	r3, [pc, #64]	@ (800a2a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4798      	blx	r3
 800a26c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a270:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a272:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	000a      	movs	r2, r1
 800a280:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a282:	4613      	mov	r3, r2
 800a284:	461a      	mov	r2, r3
 800a286:	4621      	mov	r1, r4
 800a288:	200d      	movs	r0, #13
 800a28a:	f7ff fbe5 	bl	8009a58 <SEGGER_SYSVIEW_RecordU32x2>
 800a28e:	e006      	b.n	800a29e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a290:	4b06      	ldr	r3, [pc, #24]	@ (800a2ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4619      	mov	r1, r3
 800a296:	200c      	movs	r0, #12
 800a298:	f7ff fba2 	bl	80099e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a29c:	bf00      	nop
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd90      	pop	{r4, r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	2001aa04 	.word	0x2001aa04
 800a2ac:	e0001004 	.word	0xe0001004

0800a2b0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a2b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a2ba:	f04f 0120 	mov.w	r1, #32
 800a2be:	f381 8811 	msr	BASEPRI, r1
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	4819      	ldr	r0, [pc, #100]	@ (800a32c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a2c6:	f7fe fda6 	bl	8008e16 <_PreparePacket>
 800a2ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a2d0:	4b17      	ldr	r3, [pc, #92]	@ (800a330 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	617b      	str	r3, [r7, #20]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	e00b      	b.n	800a2fc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	1c59      	adds	r1, r3, #1
 800a2ec:	6179      	str	r1, [r7, #20]
 800a2ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	09db      	lsrs	r3, r3, #7
 800a2fa:	613b      	str	r3, [r7, #16]
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a300:	d8f0      	bhi.n	800a2e4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	617a      	str	r2, [r7, #20]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a312:	2202      	movs	r2, #2
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	68b8      	ldr	r0, [r7, #8]
 800a318:	f7fe fe6e 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f383 8811 	msr	BASEPRI, r3
}
 800a322:	bf00      	nop
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	2001aa34 	.word	0x2001aa34
 800a330:	e000ed04 	.word	0xe000ed04

0800a334 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a33a:	f3ef 8311 	mrs	r3, BASEPRI
 800a33e:	f04f 0120 	mov.w	r1, #32
 800a342:	f381 8811 	msr	BASEPRI, r1
 800a346:	607b      	str	r3, [r7, #4]
 800a348:	4807      	ldr	r0, [pc, #28]	@ (800a368 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a34a:	f7fe fd64 	bl	8008e16 <_PreparePacket>
 800a34e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a350:	2203      	movs	r2, #3
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6838      	ldr	r0, [r7, #0]
 800a356:	f7fe fe4f 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f383 8811 	msr	BASEPRI, r3
}
 800a360:	bf00      	nop
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	2001aa34 	.word	0x2001aa34

0800a36c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a372:	f3ef 8311 	mrs	r3, BASEPRI
 800a376:	f04f 0120 	mov.w	r1, #32
 800a37a:	f381 8811 	msr	BASEPRI, r1
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	4807      	ldr	r0, [pc, #28]	@ (800a3a0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a382:	f7fe fd48 	bl	8008e16 <_PreparePacket>
 800a386:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a388:	2212      	movs	r2, #18
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6838      	ldr	r0, [r7, #0]
 800a38e:	f7fe fe33 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f383 8811 	msr	BASEPRI, r3
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	2001aa34 	.word	0x2001aa34

0800a3a4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a3aa:	f3ef 8311 	mrs	r3, BASEPRI
 800a3ae:	f04f 0120 	mov.w	r1, #32
 800a3b2:	f381 8811 	msr	BASEPRI, r1
 800a3b6:	607b      	str	r3, [r7, #4]
 800a3b8:	4807      	ldr	r0, [pc, #28]	@ (800a3d8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a3ba:	f7fe fd2c 	bl	8008e16 <_PreparePacket>
 800a3be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a3c0:	2211      	movs	r2, #17
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6838      	ldr	r0, [r7, #0]
 800a3c6:	f7fe fe17 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f383 8811 	msr	BASEPRI, r3
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	2001aa34 	.word	0x2001aa34

0800a3dc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a3e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a3e8:	f04f 0120 	mov.w	r1, #32
 800a3ec:	f381 8811 	msr	BASEPRI, r1
 800a3f0:	617b      	str	r3, [r7, #20]
 800a3f2:	4819      	ldr	r0, [pc, #100]	@ (800a458 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a3f4:	f7fe fd0f 	bl	8008e16 <_PreparePacket>
 800a3f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a3fe:	4b17      	ldr	r3, [pc, #92]	@ (800a45c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	61bb      	str	r3, [r7, #24]
 800a410:	e00b      	b.n	800a42a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	1c59      	adds	r1, r3, #1
 800a41a:	61f9      	str	r1, [r7, #28]
 800a41c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a420:	b2d2      	uxtb	r2, r2
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	09db      	lsrs	r3, r3, #7
 800a428:	61bb      	str	r3, [r7, #24]
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a42e:	d8f0      	bhi.n	800a412 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	61fa      	str	r2, [r7, #28]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	b2d2      	uxtb	r2, r2
 800a43a:	701a      	strb	r2, [r3, #0]
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a440:	2208      	movs	r2, #8
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	6938      	ldr	r0, [r7, #16]
 800a446:	f7fe fdd7 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f383 8811 	msr	BASEPRI, r3
}
 800a450:	bf00      	nop
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	2001aa34 	.word	0x2001aa34
 800a45c:	2001aa04 	.word	0x2001aa04

0800a460 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a468:	f3ef 8311 	mrs	r3, BASEPRI
 800a46c:	f04f 0120 	mov.w	r1, #32
 800a470:	f381 8811 	msr	BASEPRI, r1
 800a474:	617b      	str	r3, [r7, #20]
 800a476:	4819      	ldr	r0, [pc, #100]	@ (800a4dc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a478:	f7fe fccd 	bl	8008e16 <_PreparePacket>
 800a47c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a482:	4b17      	ldr	r3, [pc, #92]	@ (800a4e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	61bb      	str	r3, [r7, #24]
 800a494:	e00b      	b.n	800a4ae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	1c59      	adds	r1, r3, #1
 800a49e:	61f9      	str	r1, [r7, #28]
 800a4a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a4a4:	b2d2      	uxtb	r2, r2
 800a4a6:	701a      	strb	r2, [r3, #0]
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	09db      	lsrs	r3, r3, #7
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4b2:	d8f0      	bhi.n	800a496 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	61fa      	str	r2, [r7, #28]
 800a4ba:	69ba      	ldr	r2, [r7, #24]
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a4c4:	2204      	movs	r2, #4
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6938      	ldr	r0, [r7, #16]
 800a4ca:	f7fe fd95 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f383 8811 	msr	BASEPRI, r3
}
 800a4d4:	bf00      	nop
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	2001aa34 	.word	0x2001aa34
 800a4e0:	2001aa04 	.word	0x2001aa04

0800a4e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a4ec:	f3ef 8311 	mrs	r3, BASEPRI
 800a4f0:	f04f 0120 	mov.w	r1, #32
 800a4f4:	f381 8811 	msr	BASEPRI, r1
 800a4f8:	617b      	str	r3, [r7, #20]
 800a4fa:	4819      	ldr	r0, [pc, #100]	@ (800a560 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a4fc:	f7fe fc8b 	bl	8008e16 <_PreparePacket>
 800a500:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a506:	4b17      	ldr	r3, [pc, #92]	@ (800a564 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	61fb      	str	r3, [r7, #28]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	61bb      	str	r3, [r7, #24]
 800a518:	e00b      	b.n	800a532 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	1c59      	adds	r1, r3, #1
 800a522:	61f9      	str	r1, [r7, #28]
 800a524:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a528:	b2d2      	uxtb	r2, r2
 800a52a:	701a      	strb	r2, [r3, #0]
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	09db      	lsrs	r3, r3, #7
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2b7f      	cmp	r3, #127	@ 0x7f
 800a536:	d8f0      	bhi.n	800a51a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	1c5a      	adds	r2, r3, #1
 800a53c:	61fa      	str	r2, [r7, #28]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	b2d2      	uxtb	r2, r2
 800a542:	701a      	strb	r2, [r3, #0]
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a548:	2206      	movs	r2, #6
 800a54a:	68f9      	ldr	r1, [r7, #12]
 800a54c:	6938      	ldr	r0, [r7, #16]
 800a54e:	f7fe fd53 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f383 8811 	msr	BASEPRI, r3
}
 800a558:	bf00      	nop
 800a55a:	3720      	adds	r7, #32
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	2001aa34 	.word	0x2001aa34
 800a564:	2001aa04 	.word	0x2001aa04

0800a568 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800a568:	b580      	push	{r7, lr}
 800a56a:	b08a      	sub	sp, #40	@ 0x28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a572:	f3ef 8311 	mrs	r3, BASEPRI
 800a576:	f04f 0120 	mov.w	r1, #32
 800a57a:	f381 8811 	msr	BASEPRI, r1
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	4827      	ldr	r0, [pc, #156]	@ (800a620 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800a582:	f7fe fc48 	bl	8008e16 <_PreparePacket>
 800a586:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a58c:	4b25      	ldr	r3, [pc, #148]	@ (800a624 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	627b      	str	r3, [r7, #36]	@ 0x24
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	623b      	str	r3, [r7, #32]
 800a59e:	e00b      	b.n	800a5b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	1c59      	adds	r1, r3, #1
 800a5a8:	6279      	str	r1, [r7, #36]	@ 0x24
 800a5aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	09db      	lsrs	r3, r3, #7
 800a5b6:	623b      	str	r3, [r7, #32]
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5bc:	d8f0      	bhi.n	800a5a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5c4:	6a3a      	ldr	r2, [r7, #32]
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	61fb      	str	r3, [r7, #28]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	e00b      	b.n	800a5f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	1c59      	adds	r1, r3, #1
 800a5e0:	61f9      	str	r1, [r7, #28]
 800a5e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	09db      	lsrs	r3, r3, #7
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5f4:	d8f0      	bhi.n	800a5d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	61fa      	str	r2, [r7, #28]
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800a606:	2207      	movs	r2, #7
 800a608:	68f9      	ldr	r1, [r7, #12]
 800a60a:	6938      	ldr	r0, [r7, #16]
 800a60c:	f7fe fcf4 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f383 8811 	msr	BASEPRI, r3
}
 800a616:	bf00      	nop
 800a618:	3728      	adds	r7, #40	@ 0x28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	2001aa34 	.word	0x2001aa34
 800a624:	2001aa04 	.word	0x2001aa04

0800a628 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a630:	4b04      	ldr	r3, [pc, #16]	@ (800a644 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	1ad3      	subs	r3, r2, r3
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	2001aa04 	.word	0x2001aa04

0800a648 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08c      	sub	sp, #48	@ 0x30
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a652:	4b3b      	ldr	r3, [pc, #236]	@ (800a740 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d06d      	beq.n	800a736 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800a65a:	4b39      	ldr	r3, [pc, #228]	@ (800a740 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a660:	2300      	movs	r3, #0
 800a662:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a664:	e008      	b.n	800a678 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800a66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a674:	3301      	adds	r3, #1
 800a676:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d3f2      	bcc.n	800a666 <SEGGER_SYSVIEW_SendModule+0x1e>
 800a680:	e000      	b.n	800a684 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a682:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d055      	beq.n	800a736 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a68a:	f3ef 8311 	mrs	r3, BASEPRI
 800a68e:	f04f 0120 	mov.w	r1, #32
 800a692:	f381 8811 	msr	BASEPRI, r1
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	482a      	ldr	r0, [pc, #168]	@ (800a744 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800a69a:	f7fe fbbc 	bl	8008e16 <_PreparePacket>
 800a69e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	623b      	str	r3, [r7, #32]
 800a6ac:	e00b      	b.n	800a6c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b4:	1c59      	adds	r1, r3, #1
 800a6b6:	6279      	str	r1, [r7, #36]	@ 0x24
 800a6b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	09db      	lsrs	r3, r3, #7
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6ca:	d8f0      	bhi.n	800a6ae <SEGGER_SYSVIEW_SendModule+0x66>
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a6d2:	6a3a      	ldr	r2, [r7, #32]
 800a6d4:	b2d2      	uxtb	r2, r2
 800a6d6:	701a      	strb	r2, [r3, #0]
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	61fb      	str	r3, [r7, #28]
 800a6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	61bb      	str	r3, [r7, #24]
 800a6e6:	e00b      	b.n	800a700 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	1c59      	adds	r1, r3, #1
 800a6f0:	61f9      	str	r1, [r7, #28]
 800a6f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	09db      	lsrs	r3, r3, #7
 800a6fe:	61bb      	str	r3, [r7, #24]
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b7f      	cmp	r3, #127	@ 0x7f
 800a704:	d8f0      	bhi.n	800a6e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	61fa      	str	r2, [r7, #28]
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2280      	movs	r2, #128	@ 0x80
 800a71c:	4619      	mov	r1, r3
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7fe fb2c 	bl	8008d7c <_EncodeStr>
 800a724:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a726:	2216      	movs	r2, #22
 800a728:	68f9      	ldr	r1, [r7, #12]
 800a72a:	6938      	ldr	r0, [r7, #16]
 800a72c:	f7fe fc64 	bl	8008ff8 <_SendPacket>
      RECORD_END();
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800a736:	bf00      	nop
 800a738:	3730      	adds	r7, #48	@ 0x30
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	2001aa2c 	.word	0x2001aa2c
 800a744:	2001aa34 	.word	0x2001aa34

0800a748 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a74e:	4b0c      	ldr	r3, [pc, #48]	@ (800a780 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00f      	beq.n	800a776 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a756:	4b0a      	ldr	r3, [pc, #40]	@ (800a780 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1f2      	bne.n	800a75c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	2001aa2c 	.word	0x2001aa2c

0800a784 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a78a:	f3ef 8311 	mrs	r3, BASEPRI
 800a78e:	f04f 0120 	mov.w	r1, #32
 800a792:	f381 8811 	msr	BASEPRI, r1
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	4817      	ldr	r0, [pc, #92]	@ (800a7f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a79a:	f7fe fb3c 	bl	8008e16 <_PreparePacket>
 800a79e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	4b14      	ldr	r3, [pc, #80]	@ (800a7fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	e00b      	b.n	800a7c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	1c59      	adds	r1, r3, #1
 800a7b8:	6179      	str	r1, [r7, #20]
 800a7ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a7be:	b2d2      	uxtb	r2, r2
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	09db      	lsrs	r3, r3, #7
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7cc:	d8f0      	bhi.n	800a7b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	617a      	str	r2, [r7, #20]
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	b2d2      	uxtb	r2, r2
 800a7d8:	701a      	strb	r2, [r3, #0]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a7de:	221b      	movs	r2, #27
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	68b8      	ldr	r0, [r7, #8]
 800a7e4:	f7fe fc08 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f383 8811 	msr	BASEPRI, r3
}
 800a7ee:	bf00      	nop
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	2001aa34 	.word	0x2001aa34
 800a7fc:	2001aa30 	.word	0x2001aa30

0800a800 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800a800:	b40f      	push	{r0, r1, r2, r3}
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800a808:	f107 0314 	add.w	r3, r7, #20
 800a80c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800a80e:	1d3b      	adds	r3, r7, #4
 800a810:	461a      	mov	r2, r3
 800a812:	2100      	movs	r1, #0
 800a814:	6938      	ldr	r0, [r7, #16]
 800a816:	f7fe fe79 	bl	800950c <_VPrintTarget>
  va_end(ParamList);
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a824:	b004      	add	sp, #16
 800a826:	4770      	bx	lr

0800a828 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	@ 0x28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a830:	f3ef 8311 	mrs	r3, BASEPRI
 800a834:	f04f 0120 	mov.w	r1, #32
 800a838:	f381 8811 	msr	BASEPRI, r1
 800a83c:	617b      	str	r3, [r7, #20]
 800a83e:	4827      	ldr	r0, [pc, #156]	@ (800a8dc <SEGGER_SYSVIEW_Warn+0xb4>)
 800a840:	f7fe fae9 	bl	8008e16 <_PreparePacket>
 800a844:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a846:	2280      	movs	r2, #128	@ 0x80
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	6938      	ldr	r0, [r7, #16]
 800a84c:	f7fe fa96 	bl	8008d7c <_EncodeStr>
 800a850:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
 800a856:	2301      	movs	r3, #1
 800a858:	623b      	str	r3, [r7, #32]
 800a85a:	e00b      	b.n	800a874 <SEGGER_SYSVIEW_Warn+0x4c>
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a862:	1c59      	adds	r1, r3, #1
 800a864:	6279      	str	r1, [r7, #36]	@ 0x24
 800a866:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	09db      	lsrs	r3, r3, #7
 800a872:	623b      	str	r3, [r7, #32]
 800a874:	6a3b      	ldr	r3, [r7, #32]
 800a876:	2b7f      	cmp	r3, #127	@ 0x7f
 800a878:	d8f0      	bhi.n	800a85c <SEGGER_SYSVIEW_Warn+0x34>
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	1c5a      	adds	r2, r3, #1
 800a87e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a880:	6a3a      	ldr	r2, [r7, #32]
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	61fb      	str	r3, [r7, #28]
 800a88e:	2300      	movs	r3, #0
 800a890:	61bb      	str	r3, [r7, #24]
 800a892:	e00b      	b.n	800a8ac <SEGGER_SYSVIEW_Warn+0x84>
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	61f9      	str	r1, [r7, #28]
 800a89e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a8a2:	b2d2      	uxtb	r2, r2
 800a8a4:	701a      	strb	r2, [r3, #0]
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	09db      	lsrs	r3, r3, #7
 800a8aa:	61bb      	str	r3, [r7, #24]
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8b0:	d8f0      	bhi.n	800a894 <SEGGER_SYSVIEW_Warn+0x6c>
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	61fa      	str	r2, [r7, #28]
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	b2d2      	uxtb	r2, r2
 800a8bc:	701a      	strb	r2, [r3, #0]
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a8c2:	221a      	movs	r2, #26
 800a8c4:	68f9      	ldr	r1, [r7, #12]
 800a8c6:	6938      	ldr	r0, [r7, #16]
 800a8c8:	f7fe fb96 	bl	8008ff8 <_SendPacket>
  RECORD_END();
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f383 8811 	msr	BASEPRI, r3
}
 800a8d2:	bf00      	nop
 800a8d4:	3728      	adds	r7, #40	@ 0x28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	2001aa34 	.word	0x2001aa34

0800a8e0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a8e4:	4b13      	ldr	r3, [pc, #76]	@ (800a934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8e6:	7e1b      	ldrb	r3, [r3, #24]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4a13      	ldr	r2, [pc, #76]	@ (800a938 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	440b      	add	r3, r1
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	4413      	add	r3, r2
 800a8f6:	336c      	adds	r3, #108	@ 0x6c
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8fc:	7e1b      	ldrb	r3, [r3, #24]
 800a8fe:	4618      	mov	r0, r3
 800a900:	490d      	ldr	r1, [pc, #52]	@ (800a938 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a902:	4603      	mov	r3, r0
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	4403      	add	r3, r0
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	440b      	add	r3, r1
 800a90c:	3370      	adds	r3, #112	@ 0x70
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	429a      	cmp	r2, r3
 800a912:	d00b      	beq.n	800a92c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a914:	4b07      	ldr	r3, [pc, #28]	@ (800a934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a916:	789b      	ldrb	r3, [r3, #2]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d107      	bne.n	800a92c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a91e:	2201      	movs	r2, #1
 800a920:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a922:	f7fe fa85 	bl	8008e30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a926:	4b03      	ldr	r3, [pc, #12]	@ (800a934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a928:	2200      	movs	r2, #0
 800a92a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800a92c:	4b01      	ldr	r3, [pc, #4]	@ (800a934 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a92e:	781b      	ldrb	r3, [r3, #0]
}
 800a930:	4618      	mov	r0, r3
 800a932:	bd80      	pop	{r7, pc}
 800a934:	2001aa04 	.word	0x2001aa04
 800a938:	20019544 	.word	0x20019544

0800a93c <strchr>:
 800a93c:	b2c9      	uxtb	r1, r1
 800a93e:	4603      	mov	r3, r0
 800a940:	4618      	mov	r0, r3
 800a942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a946:	b112      	cbz	r2, 800a94e <strchr+0x12>
 800a948:	428a      	cmp	r2, r1
 800a94a:	d1f9      	bne.n	800a940 <strchr+0x4>
 800a94c:	4770      	bx	lr
 800a94e:	2900      	cmp	r1, #0
 800a950:	bf18      	it	ne
 800a952:	2000      	movne	r0, #0
 800a954:	4770      	bx	lr

0800a956 <strncmp>:
 800a956:	b510      	push	{r4, lr}
 800a958:	b16a      	cbz	r2, 800a976 <strncmp+0x20>
 800a95a:	3901      	subs	r1, #1
 800a95c:	1884      	adds	r4, r0, r2
 800a95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a962:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a966:	429a      	cmp	r2, r3
 800a968:	d103      	bne.n	800a972 <strncmp+0x1c>
 800a96a:	42a0      	cmp	r0, r4
 800a96c:	d001      	beq.n	800a972 <strncmp+0x1c>
 800a96e:	2a00      	cmp	r2, #0
 800a970:	d1f5      	bne.n	800a95e <strncmp+0x8>
 800a972:	1ad0      	subs	r0, r2, r3
 800a974:	bd10      	pop	{r4, pc}
 800a976:	4610      	mov	r0, r2
 800a978:	e7fc      	b.n	800a974 <strncmp+0x1e>

0800a97a <memcmp>:
 800a97a:	b510      	push	{r4, lr}
 800a97c:	3901      	subs	r1, #1
 800a97e:	4402      	add	r2, r0
 800a980:	4290      	cmp	r0, r2
 800a982:	d101      	bne.n	800a988 <memcmp+0xe>
 800a984:	2000      	movs	r0, #0
 800a986:	e005      	b.n	800a994 <memcmp+0x1a>
 800a988:	7803      	ldrb	r3, [r0, #0]
 800a98a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a98e:	42a3      	cmp	r3, r4
 800a990:	d001      	beq.n	800a996 <memcmp+0x1c>
 800a992:	1b18      	subs	r0, r3, r4
 800a994:	bd10      	pop	{r4, pc}
 800a996:	3001      	adds	r0, #1
 800a998:	e7f2      	b.n	800a980 <memcmp+0x6>

0800a99a <memset>:
 800a99a:	4402      	add	r2, r0
 800a99c:	4603      	mov	r3, r0
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d100      	bne.n	800a9a4 <memset+0xa>
 800a9a2:	4770      	bx	lr
 800a9a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a8:	e7f9      	b.n	800a99e <memset+0x4>
	...

0800a9ac <__libc_init_array>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a9e4 <__libc_init_array+0x38>)
 800a9b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a9e8 <__libc_init_array+0x3c>)
 800a9b2:	1b64      	subs	r4, r4, r5
 800a9b4:	10a4      	asrs	r4, r4, #2
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	42a6      	cmp	r6, r4
 800a9ba:	d109      	bne.n	800a9d0 <__libc_init_array+0x24>
 800a9bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a9ec <__libc_init_array+0x40>)
 800a9be:	4c0c      	ldr	r4, [pc, #48]	@ (800a9f0 <__libc_init_array+0x44>)
 800a9c0:	f000 f82e 	bl	800aa20 <_init>
 800a9c4:	1b64      	subs	r4, r4, r5
 800a9c6:	10a4      	asrs	r4, r4, #2
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	42a6      	cmp	r6, r4
 800a9cc:	d105      	bne.n	800a9da <__libc_init_array+0x2e>
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d4:	4798      	blx	r3
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7ee      	b.n	800a9b8 <__libc_init_array+0xc>
 800a9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9de:	4798      	blx	r3
 800a9e0:	3601      	adds	r6, #1
 800a9e2:	e7f2      	b.n	800a9ca <__libc_init_array+0x1e>
 800a9e4:	0800ae14 	.word	0x0800ae14
 800a9e8:	0800ae14 	.word	0x0800ae14
 800a9ec:	0800ae14 	.word	0x0800ae14
 800a9f0:	0800ae18 	.word	0x0800ae18

0800a9f4 <memcpy>:
 800a9f4:	440a      	add	r2, r1
 800a9f6:	4291      	cmp	r1, r2
 800a9f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a9fc:	d100      	bne.n	800aa00 <memcpy+0xc>
 800a9fe:	4770      	bx	lr
 800aa00:	b510      	push	{r4, lr}
 800aa02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa0a:	4291      	cmp	r1, r2
 800aa0c:	d1f9      	bne.n	800aa02 <memcpy+0xe>
 800aa0e:	bd10      	pop	{r4, pc}

0800aa10 <strcpy>:
 800aa10:	4603      	mov	r3, r0
 800aa12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa16:	f803 2b01 	strb.w	r2, [r3], #1
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	d1f9      	bne.n	800aa12 <strcpy+0x2>
 800aa1e:	4770      	bx	lr

0800aa20 <_init>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	bf00      	nop
 800aa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa26:	bc08      	pop	{r3}
 800aa28:	469e      	mov	lr, r3
 800aa2a:	4770      	bx	lr

0800aa2c <_fini>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr
