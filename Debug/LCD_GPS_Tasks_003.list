
LCD_GPS_Tasks_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a868  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800a9f8  0800a9f8  0000b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb8  0800adb8  0000c01c  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb8  0800adb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adc0  0800adc0  0000c01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc0  0800adc0  0000bdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adc4  0800adc4  0000bdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800adc8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aaf8  20000020  0800ade4  0000c020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001ab18  0800ade4  0000cb18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191bf  00000000  00000000  0000c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e20  00000000  00000000  0002520b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00029030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f5  00000000  00000000  0002a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025376  00000000  00000000  0002bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7dc  00000000  00000000  00050f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc935  00000000  00000000  0006d717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a04c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068fc  00000000  00000000  0014a090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  0015098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9e0 	.word	0x0800a9e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	0800a9e0 	.word	0x0800a9e0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019544 	.word	0x20019544

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_drsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000278:	e002      	b.n	8000280 <__adddf3>
 800027a:	bf00      	nop

0800027c <__aeabi_dsub>:
 800027c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000280 <__adddf3>:
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000286:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028a:	ea94 0f05 	teq	r4, r5
 800028e:	bf08      	it	eq
 8000290:	ea90 0f02 	teqeq	r0, r2
 8000294:	bf1f      	itttt	ne
 8000296:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a6:	f000 80e2 	beq.w	800046e <__adddf3+0x1ee>
 80002aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b2:	bfb8      	it	lt
 80002b4:	426d      	neglt	r5, r5
 80002b6:	dd0c      	ble.n	80002d2 <__adddf3+0x52>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	ea82 0000 	eor.w	r0, r2, r0
 80002c6:	ea83 0101 	eor.w	r1, r3, r1
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	2d36      	cmp	r5, #54	@ 0x36
 80002d4:	bf88      	it	hi
 80002d6:	bd30      	pophi	{r4, r5, pc}
 80002d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x70>
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x84>
 80002fe:	4252      	negs	r2, r2
 8000300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000304:	ea94 0f05 	teq	r4, r5
 8000308:	f000 80a7 	beq.w	800045a <__adddf3+0x1da>
 800030c:	f1a4 0401 	sub.w	r4, r4, #1
 8000310:	f1d5 0e20 	rsbs	lr, r5, #32
 8000314:	db0d      	blt.n	8000332 <__adddf3+0xb2>
 8000316:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031a:	fa22 f205 	lsr.w	r2, r2, r5
 800031e:	1880      	adds	r0, r0, r2
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	fa03 f20e 	lsl.w	r2, r3, lr
 8000328:	1880      	adds	r0, r0, r2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	4159      	adcs	r1, r3
 8000330:	e00e      	b.n	8000350 <__adddf3+0xd0>
 8000332:	f1a5 0520 	sub.w	r5, r5, #32
 8000336:	f10e 0e20 	add.w	lr, lr, #32
 800033a:	2a01      	cmp	r2, #1
 800033c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000340:	bf28      	it	cs
 8000342:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	18c0      	adds	r0, r0, r3
 800034c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000350:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000354:	d507      	bpl.n	8000366 <__adddf3+0xe6>
 8000356:	f04f 0e00 	mov.w	lr, #0
 800035a:	f1dc 0c00 	rsbs	ip, ip, #0
 800035e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000362:	eb6e 0101 	sbc.w	r1, lr, r1
 8000366:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036a:	d31b      	bcc.n	80003a4 <__adddf3+0x124>
 800036c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000370:	d30c      	bcc.n	800038c <__adddf3+0x10c>
 8000372:	0849      	lsrs	r1, r1, #1
 8000374:	ea5f 0030 	movs.w	r0, r0, rrx
 8000378:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800037c:	f104 0401 	add.w	r4, r4, #1
 8000380:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000384:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000388:	f080 809a 	bcs.w	80004c0 <__adddf3+0x240>
 800038c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000390:	bf08      	it	eq
 8000392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000396:	f150 0000 	adcs.w	r0, r0, #0
 800039a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039e:	ea41 0105 	orr.w	r1, r1, r5
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a8:	4140      	adcs	r0, r0
 80003aa:	eb41 0101 	adc.w	r1, r1, r1
 80003ae:	3c01      	subs	r4, #1
 80003b0:	bf28      	it	cs
 80003b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b6:	d2e9      	bcs.n	800038c <__adddf3+0x10c>
 80003b8:	f091 0f00 	teq	r1, #0
 80003bc:	bf04      	itt	eq
 80003be:	4601      	moveq	r1, r0
 80003c0:	2000      	moveq	r0, #0
 80003c2:	fab1 f381 	clz	r3, r1
 80003c6:	bf08      	it	eq
 80003c8:	3320      	addeq	r3, #32
 80003ca:	f1a3 030b 	sub.w	r3, r3, #11
 80003ce:	f1b3 0220 	subs.w	r2, r3, #32
 80003d2:	da0c      	bge.n	80003ee <__adddf3+0x16e>
 80003d4:	320c      	adds	r2, #12
 80003d6:	dd08      	ble.n	80003ea <__adddf3+0x16a>
 80003d8:	f102 0c14 	add.w	ip, r2, #20
 80003dc:	f1c2 020c 	rsb	r2, r2, #12
 80003e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e4:	fa21 f102 	lsr.w	r1, r1, r2
 80003e8:	e00c      	b.n	8000404 <__adddf3+0x184>
 80003ea:	f102 0214 	add.w	r2, r2, #20
 80003ee:	bfd8      	it	le
 80003f0:	f1c2 0c20 	rsble	ip, r2, #32
 80003f4:	fa01 f102 	lsl.w	r1, r1, r2
 80003f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003fc:	bfdc      	itt	le
 80003fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000402:	4090      	lslle	r0, r2
 8000404:	1ae4      	subs	r4, r4, r3
 8000406:	bfa2      	ittt	ge
 8000408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800040c:	4329      	orrge	r1, r5
 800040e:	bd30      	popge	{r4, r5, pc}
 8000410:	ea6f 0404 	mvn.w	r4, r4
 8000414:	3c1f      	subs	r4, #31
 8000416:	da1c      	bge.n	8000452 <__adddf3+0x1d2>
 8000418:	340c      	adds	r4, #12
 800041a:	dc0e      	bgt.n	800043a <__adddf3+0x1ba>
 800041c:	f104 0414 	add.w	r4, r4, #20
 8000420:	f1c4 0220 	rsb	r2, r4, #32
 8000424:	fa20 f004 	lsr.w	r0, r0, r4
 8000428:	fa01 f302 	lsl.w	r3, r1, r2
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	fa21 f304 	lsr.w	r3, r1, r4
 8000434:	ea45 0103 	orr.w	r1, r5, r3
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f1c4 040c 	rsb	r4, r4, #12
 800043e:	f1c4 0220 	rsb	r2, r4, #32
 8000442:	fa20 f002 	lsr.w	r0, r0, r2
 8000446:	fa01 f304 	lsl.w	r3, r1, r4
 800044a:	ea40 0003 	orr.w	r0, r0, r3
 800044e:	4629      	mov	r1, r5
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	fa21 f004 	lsr.w	r0, r1, r4
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f094 0f00 	teq	r4, #0
 800045e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000462:	bf06      	itte	eq
 8000464:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000468:	3401      	addeq	r4, #1
 800046a:	3d01      	subne	r5, #1
 800046c:	e74e      	b.n	800030c <__adddf3+0x8c>
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf18      	it	ne
 8000474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000478:	d029      	beq.n	80004ce <__adddf3+0x24e>
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	d005      	beq.n	8000492 <__adddf3+0x212>
 8000486:	ea54 0c00 	orrs.w	ip, r4, r0
 800048a:	bf04      	itt	eq
 800048c:	4619      	moveq	r1, r3
 800048e:	4610      	moveq	r0, r2
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea91 0f03 	teq	r1, r3
 8000496:	bf1e      	ittt	ne
 8000498:	2100      	movne	r1, #0
 800049a:	2000      	movne	r0, #0
 800049c:	bd30      	popne	{r4, r5, pc}
 800049e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a2:	d105      	bne.n	80004b0 <__adddf3+0x230>
 80004a4:	0040      	lsls	r0, r0, #1
 80004a6:	4149      	adcs	r1, r1
 80004a8:	bf28      	it	cs
 80004aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b4:	bf3c      	itt	cc
 80004b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ba:	bd30      	popcc	{r4, r5, pc}
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c8:	f04f 0000 	mov.w	r0, #0
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf1a      	itte	ne
 80004d4:	4619      	movne	r1, r3
 80004d6:	4610      	movne	r0, r2
 80004d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004dc:	bf1c      	itt	ne
 80004de:	460b      	movne	r3, r1
 80004e0:	4602      	movne	r2, r0
 80004e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e6:	bf06      	itte	eq
 80004e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ec:	ea91 0f03 	teqeq	r1, r3
 80004f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	bf00      	nop

080004f8 <__aeabi_ui2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050c:	f04f 0500 	mov.w	r5, #0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e750      	b.n	80003b8 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_i2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000530:	bf48      	it	mi
 8000532:	4240      	negmi	r0, r0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e73e      	b.n	80003b8 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_f2d>:
 800053c:	0042      	lsls	r2, r0, #1
 800053e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000542:	ea4f 0131 	mov.w	r1, r1, rrx
 8000546:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054a:	bf1f      	itttt	ne
 800054c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000550:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000554:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000558:	4770      	bxne	lr
 800055a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055e:	bf08      	it	eq
 8000560:	4770      	bxeq	lr
 8000562:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000566:	bf04      	itt	eq
 8000568:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800057c:	e71c      	b.n	80003b8 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aed8 	beq.w	8000366 <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6bd      	b.n	8000366 <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2iz>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a18:	d215      	bcs.n	8000a46 <__aeabi_d2iz+0x36>
 8000a1a:	d511      	bpl.n	8000a40 <__aeabi_d2iz+0x30>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d912      	bls.n	8000a4c <__aeabi_d2iz+0x3c>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	bf18      	it	ne
 8000a3c:	4240      	negne	r0, r0
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_d2iz+0x48>
 8000a4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a50:	bf08      	it	eq
 8000a52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b14:	f000 b96a 	b.w	8000dec <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	460c      	mov	r4, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14e      	bne.n	8000bda <__udivmoddi4+0xaa>
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	458c      	cmp	ip, r1
 8000b40:	4686      	mov	lr, r0
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	d962      	bls.n	8000c0e <__udivmoddi4+0xde>
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0320 	rsb	r3, r2, #32
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	4319      	orrs	r1, r3
 8000b5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fa1f f68c 	uxth.w	r6, ip
 8000b66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x64>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b86:	f080 8112 	bcs.w	8000dae <__udivmoddi4+0x27e>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 810f 	bls.w	8000dae <__udivmoddi4+0x27e>
 8000b90:	3c02      	subs	r4, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	fa1f f38e 	uxth.w	r3, lr
 8000b9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f606 	mul.w	r6, r0, r6
 8000baa:	429e      	cmp	r6, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x94>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bb6:	f080 80fc 	bcs.w	8000db2 <__udivmoddi4+0x282>
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	f240 80f9 	bls.w	8000db2 <__udivmoddi4+0x282>
 8000bc0:	4463      	add	r3, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	1b9b      	subs	r3, r3, r6
 8000bc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa6>
 8000bce:	40d3      	lsrs	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xba>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb4>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x150>
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xcc>
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	f0c0 80f0 	bcc.w	8000ddc <__udivmoddi4+0x2ac>
 8000bfc:	1a86      	subs	r6, r0, r2
 8000bfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d0e6      	beq.n	8000bd6 <__udivmoddi4+0xa6>
 8000c08:	e9c5 6300 	strd	r6, r3, [r5]
 8000c0c:	e7e3      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 8090 	bne.w	8000d34 <__udivmoddi4+0x204>
 8000c14:	eba1 040c 	sub.w	r4, r1, ip
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	2101      	movs	r1, #1
 8000c22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb07 f006 	mul.w	r0, r7, r6
 8000c36:	4298      	cmp	r0, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x11c>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x11a>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	f200 80cd 	bhi.w	8000de4 <__udivmoddi4+0x2b4>
 8000c4a:	4626      	mov	r6, r4
 8000c4c:	1a1c      	subs	r4, r3, r0
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c56:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb00 f707 	mul.w	r7, r0, r7
 8000c62:	429f      	cmp	r7, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x148>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x146>
 8000c70:	429f      	cmp	r7, r3
 8000c72:	f200 80b0 	bhi.w	8000dd6 <__udivmoddi4+0x2a6>
 8000c76:	4620      	mov	r0, r4
 8000c78:	1bdb      	subs	r3, r3, r7
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x9c>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c90:	fa04 f301 	lsl.w	r3, r4, r1
 8000c94:	ea43 030c 	orr.w	r3, r3, ip
 8000c98:	40f4      	lsrs	r4, r6
 8000c9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9e:	0c38      	lsrs	r0, r7, #16
 8000ca0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca8:	fa1f fc87 	uxth.w	ip, r7
 8000cac:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb8:	45a1      	cmp	r9, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d90a      	bls.n	8000cd6 <__udivmoddi4+0x1a6>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cc6:	f080 8084 	bcs.w	8000dd2 <__udivmoddi4+0x2a2>
 8000cca:	45a1      	cmp	r9, r4
 8000ccc:	f240 8081 	bls.w	8000dd2 <__udivmoddi4+0x2a2>
 8000cd0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	eba4 0409 	sub.w	r4, r4, r9
 8000cda:	fa1f f983 	uxth.w	r9, r3
 8000cde:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x1d2>
 8000cf2:	193c      	adds	r4, r7, r4
 8000cf4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cf8:	d267      	bcs.n	8000dca <__udivmoddi4+0x29a>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0x29a>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d06:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0a:	eba4 040c 	sub.w	r4, r4, ip
 8000d0e:	429c      	cmp	r4, r3
 8000d10:	46ce      	mov	lr, r9
 8000d12:	469c      	mov	ip, r3
 8000d14:	d351      	bcc.n	8000dba <__udivmoddi4+0x28a>
 8000d16:	d04e      	beq.n	8000db6 <__udivmoddi4+0x286>
 8000d18:	b155      	cbz	r5, 8000d30 <__udivmoddi4+0x200>
 8000d1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431e      	orrs	r6, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e750      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000d34:	f1c2 0320 	rsb	r3, r2, #32
 8000d38:	fa20 f103 	lsr.w	r1, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa24 f303 	lsr.w	r3, r4, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	430c      	orrs	r4, r1
 8000d48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d50:	fa1f f78c 	uxth.w	r7, ip
 8000d54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d58:	fb08 3110 	mls	r1, r8, r0, r3
 8000d5c:	0c23      	lsrs	r3, r4, #16
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f107 	mul.w	r1, r0, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x24c>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d72:	d22c      	bcs.n	8000dce <__udivmoddi4+0x29e>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d92a      	bls.n	8000dce <__udivmoddi4+0x29e>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d84:	fb08 3311 	mls	r3, r8, r1, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb01 f307 	mul.w	r3, r1, r7
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x276>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d9c:	d213      	bcs.n	8000dc6 <__udivmoddi4+0x296>
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	d911      	bls.n	8000dc6 <__udivmoddi4+0x296>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	1ae4      	subs	r4, r4, r3
 8000da8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dac:	e739      	b.n	8000c22 <__udivmoddi4+0xf2>
 8000dae:	4604      	mov	r4, r0
 8000db0:	e6f0      	b.n	8000b94 <__udivmoddi4+0x64>
 8000db2:	4608      	mov	r0, r1
 8000db4:	e706      	b.n	8000bc4 <__udivmoddi4+0x94>
 8000db6:	45c8      	cmp	r8, r9
 8000db8:	d2ae      	bcs.n	8000d18 <__udivmoddi4+0x1e8>
 8000dba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc2:	3801      	subs	r0, #1
 8000dc4:	e7a8      	b.n	8000d18 <__udivmoddi4+0x1e8>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e7ed      	b.n	8000da6 <__udivmoddi4+0x276>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	e799      	b.n	8000d02 <__udivmoddi4+0x1d2>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e7d4      	b.n	8000d7c <__udivmoddi4+0x24c>
 8000dd2:	46d6      	mov	lr, sl
 8000dd4:	e77f      	b.n	8000cd6 <__udivmoddi4+0x1a6>
 8000dd6:	4463      	add	r3, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e74d      	b.n	8000c78 <__udivmoddi4+0x148>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	4623      	mov	r3, r4
 8000de0:	4608      	mov	r0, r1
 8000de2:	e70f      	b.n	8000c04 <__udivmoddi4+0xd4>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	e730      	b.n	8000c4c <__udivmoddi4+0x11c>
 8000dea:	bf00      	nop

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <I2C_Config>:
*/


/*Configure I2C Peripheral */
static void I2C_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	//Enable I2C peripheral clock
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <I2C_Config+0x68>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <I2C_Config+0x68>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <I2C_Config+0x68>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
	
	myI2Chandle.Instance = I2C1;
 8000e12:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <I2C_Config+0x6c>)
 8000e14:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <I2C_Config+0x70>)
 8000e16:	601a      	str	r2, [r3, #0]
	myI2Chandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <I2C_Config+0x6c>)
 8000e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1e:	611a      	str	r2, [r3, #16]
	myI2Chandle.Init.ClockSpeed = 100000;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <I2C_Config+0x6c>)
 8000e22:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <I2C_Config+0x74>)
 8000e24:	605a      	str	r2, [r3, #4]
	myI2Chandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <I2C_Config+0x6c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
	myI2Chandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <I2C_Config+0x6c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
	myI2Chandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <I2C_Config+0x6c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
	myI2Chandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <I2C_Config+0x6c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
	myI2Chandle.Init.OwnAddress1 = 0;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <I2C_Config+0x6c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
	myI2Chandle.Init.OwnAddress2 = 0;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <I2C_Config+0x6c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
	HAL_I2C_Init(&myI2Chandle);
 8000e4a:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <I2C_Config+0x6c>)
 8000e4c:	f002 f9a0 	bl	8003190 <HAL_I2C_Init>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	2000003c 	.word	0x2000003c
 8000e60:	40005400 	.word	0x40005400
 8000e64:	000186a0 	.word	0x000186a0

08000e68 <LCD_Send_Cmd>:
 * @brief Send Command to LCD
 * @param cmd : LCD commands 
 * @retval None
 */
void LCD_Send_Cmd(uint8_t cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (cmd & 0xF0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((cmd << 4) & 0xF0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	737b      	strb	r3, [r7, #13]
	
	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN;
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT;
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	2201      	movs	r2, #1
 8000eac:	214e      	movs	r1, #78	@ 0x4e
 8000eae:	4815      	ldr	r0, [pc, #84]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000eb0:	f002 fbb0 	bl	8003614 <HAL_I2C_IsDeviceReady>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d108      	bne.n	8000ecc <LCD_Send_Cmd+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100); 
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	2364      	movs	r3, #100	@ 0x64
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	214e      	movs	r1, #78	@ 0x4e
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000ec8:	f002 faa6 	bl	8003418 <HAL_I2C_Master_Transmit>
	
	/*Provide a delay */
	HAL_Delay(5);
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f001 fe67 	bl	8002ba0 <HAL_Delay>

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	214e      	movs	r1, #78	@ 0x4e
 8000ed8:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000eda:	f002 fb9b 	bl	8003614 <HAL_I2C_IsDeviceReady>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <LCD_Send_Cmd+0x8e>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);	
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2302      	movs	r3, #2
 8000eee:	214e      	movs	r1, #78	@ 0x4e
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <LCD_Send_Cmd+0x9c>)
 8000ef2:	f002 fa91 	bl	8003418 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f001 fe52 	bl	8002ba0 <HAL_Delay>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000003c 	.word	0x2000003c

08000f08 <LCD_Send_Data>:
 * @brief Send Data to LCD
 * @param data: Data to be sent to LCD
 * @retval None
 */
void LCD_Send_Data(uint8_t data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (data & 0xF0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((data << 4) & 0xF0);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN|PIN_RS;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT|PIN_RS;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	737b      	strb	r3, [r7, #13]
	
	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN|PIN_RS;
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT|PIN_RS;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000f48:	230a      	movs	r3, #10
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	214e      	movs	r1, #78	@ 0x4e
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f50:	f002 fb60 	bl	8003614 <HAL_I2C_IsDeviceReady>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d108      	bne.n	8000f6c <LCD_Send_Data+0x64>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100); 
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	2364      	movs	r3, #100	@ 0x64
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	214e      	movs	r1, #78	@ 0x4e
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f68:	f002 fa56 	bl	8003418 <HAL_I2C_Master_Transmit>
	
	/*Provide a delay */
	//HAL_Delay(1);

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(& myI2Chandle, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	2201      	movs	r2, #1
 8000f70:	214e      	movs	r1, #78	@ 0x4e
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f74:	f002 fb4e 	bl	8003614 <HAL_I2C_IsDeviceReady>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d108      	bne.n	8000f90 <LCD_Send_Data+0x88>
		HAL_I2C_Master_Transmit(& myI2Chandle,I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);	
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2302      	movs	r3, #2
 8000f88:	214e      	movs	r1, #78	@ 0x4e
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <LCD_Send_Data+0x98>)
 8000f8c:	f002 fa44 	bl	8003418 <HAL_I2C_Master_Transmit>
    
    /*Provide a delay */
    HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f001 fe05 	bl	8002ba0 <HAL_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000003c 	.word	0x2000003c

08000fa4 <LCD_Init>:
/**
 * @brief  Initializes LCD
 * @retval None
 */
void LCD_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	/* Configure GPIOs */
	//GPIO_Config();

	/*Configure I2C */
	I2C_Config();
 8000fa8:	f7ff ff22 	bl	8000df0 <I2C_Config>

	/* Wait for 15ms */
	HAL_Delay(50);
 8000fac:	2032      	movs	r0, #50	@ 0x32
 8000fae:	f001 fdf7 	bl	8002ba0 <HAL_Delay>
	
	/*Function Set - As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET1);
 8000fb2:	2033      	movs	r0, #51	@ 0x33
 8000fb4:	f7ff ff58 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Function Set -As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET2);
 8000fb8:	2032      	movs	r0, #50	@ 0x32
 8000fba:	f7ff ff55 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Set 4bit mode and 2 lines */
	LCD_Send_Cmd(LCD_4BIT_2LINE_MODE);
 8000fbe:	2028      	movs	r0, #40	@ 0x28
 8000fc0:	f7ff ff52 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Display on, cursor off*/
	LCD_Send_Cmd(0x0C);
 8000fc4:	200c      	movs	r0, #12
 8000fc6:	f7ff ff4f 	bl	8000e68 <LCD_Send_Cmd>
	
	/* SET Row1 and Col1 (1st Line) */
	LCD_Send_Cmd(0x80);
 8000fca:	2080      	movs	r0, #128	@ 0x80
 8000fcc:	f7ff ff4c 	bl	8000e68 <LCD_Send_Cmd>
	
	/*Clear Display*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff ff49 	bl	8000e68 <LCD_Send_Cmd>
	
	/* Wait for 5ms to ensure commands are processed */
	HAL_Delay(5);
 8000fd6:	2005      	movs	r0, #5
 8000fd8:	f001 fde2 	bl	8002ba0 <HAL_Delay>

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LCD_Send_String>:
 * @brief Send Strings to LCD
 * @param str: pointer to strings
 * @retval None
 */
void LCD_Send_String(char *str)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	while (*str)  
 8000fe8:	e006      	b.n	8000ff8 <LCD_Send_String+0x18>
	{
		LCD_Send_Data(*str++);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff88 	bl	8000f08 <LCD_Send_Data>
	while (*str)  
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f4      	bne.n	8000fea <LCD_Send_String+0xa>
	}
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <gps_data_extrac>:


const char* gps_rx_data_test;

void gps_data_extrac(struct gps_data_output *gps_data, char* gps_rx_data)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	/* Initialize GPS data handler*/
	lwgps_init(&hgps);
 8001016:	4835      	ldr	r0, [pc, #212]	@ (80010ec <gps_data_extrac+0xe0>)
 8001018:	f000 fec5 	bl	8001da6 <lwgps_init>

    /* Process all input data */
#if TESTMODE_SWITCH

    // Select GPS data example
	gps_rx_data_test = gps_rx_data_example_4;
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <gps_data_extrac+0xe4>)
 800101e:	4a35      	ldr	r2, [pc, #212]	@ (80010f4 <gps_data_extrac+0xe8>)
 8001020:	601a      	str	r2, [r3, #0]

	/* Use example data when TESTMODE is enabled */
    lwgps_process(&hgps, gps_rx_data_test, strlen(gps_rx_data_test));
 8001022:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <gps_data_extrac+0xe4>)
 8001024:	681c      	ldr	r4, [r3, #0]
 8001026:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <gps_data_extrac+0xe4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f91a 	bl	8000264 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4621      	mov	r1, r4
 8001036:	482d      	ldr	r0, [pc, #180]	@ (80010ec <gps_data_extrac+0xe0>)
 8001038:	f000 fec3 	bl	8001dc2 <lwgps_process>
    lwgps_process(&hgps, gps_rx_data, strlen(gps_rx_data));

#endif

    /* Pass the data to gps_data */
    gps_data->valid_status = hgps.is_valid;
 800103c:	4b2b      	ldr	r3, [pc, #172]	@ (80010ec <gps_data_extrac+0xe0>)
 800103e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	601a      	str	r2, [r3, #0]

    float_to_string(hgps.longitude, gps_data->longitude);
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <gps_data_extrac+0xe0>)
 800104a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd05 	bl	8000a60 <__aeabi_d2f>
 8001056:	4602      	mov	r2, r0
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3314      	adds	r3, #20
 800105c:	4618      	mov	r0, r3
 800105e:	ee00 2a10 	vmov	s0, r2
 8001062:	f000 f84f 	bl	8001104 <float_to_string>
    float_to_string(hgps.latitude, gps_data->latitude);
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <gps_data_extrac+0xe0>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fcf6 	bl	8000a60 <__aeabi_d2f>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	4618      	mov	r0, r3
 800107c:	ee00 2a10 	vmov	s0, r2
 8001080:	f000 f840 	bl	8001104 <float_to_string>
    float_to_string(hgps.altitude, gps_data->altitude);
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <gps_data_extrac+0xe0>)
 8001086:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fce7 	bl	8000a60 <__aeabi_d2f>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3324      	adds	r3, #36	@ 0x24
 8001098:	4618      	mov	r0, r3
 800109a:	ee00 2a10 	vmov	s0, r2
 800109e:	f000 f831 	bl	8001104 <float_to_string>

    truncate_to_6_decimal_places(gps_data->longitude);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3314      	adds	r3, #20
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f8cc 	bl	8001244 <truncate_to_6_decimal_places>
    truncate_to_6_decimal_places(gps_data->latitude);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3304      	adds	r3, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f8c7 	bl	8001244 <truncate_to_6_decimal_places>
    truncate_to_6_decimal_places(gps_data->altitude);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3324      	adds	r3, #36	@ 0x24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f8c2 	bl	8001244 <truncate_to_6_decimal_places>

    format_message("Lon", gps_data->longitude);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3314      	adds	r3, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <gps_data_extrac+0xec>)
 80010c8:	f000 f8d2 	bl	8001270 <format_message>
    format_message("Lat", gps_data->latitude);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3304      	adds	r3, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	480a      	ldr	r0, [pc, #40]	@ (80010fc <gps_data_extrac+0xf0>)
 80010d4:	f000 f8cc 	bl	8001270 <format_message>
    format_message("Alt", gps_data->altitude);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3324      	adds	r3, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <gps_data_extrac+0xf4>)
 80010e0:	f000 f8c6 	bl	8001270 <format_message>

}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	20000090 	.word	0x20000090
 80010f0:	20000150 	.word	0x20000150
 80010f4:	0800ac08 	.word	0x0800ac08
 80010f8:	0800a9f8 	.word	0x0800a9f8
 80010fc:	0800a9fc 	.word	0x0800a9fc
 8001100:	0800aa00 	.word	0x0800aa00

08001104 <float_to_string>:
 * \brief           GPS data float -> string
 *
 * \note
 */
void float_to_string(float value, char* str)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	@ 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	ed87 0a01 	vstr	s0, [r7, #4]
 800110e:	6038      	str	r0, [r7, #0]
    // Handle negative numbers
    if (value < 0) {
 8001110:	edd7 7a01 	vldr	s15, [r7, #4]
 8001114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	d50a      	bpl.n	8001134 <float_to_string+0x30>
        *str++ = '-';
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	603a      	str	r2, [r7, #0]
 8001124:	222d      	movs	r2, #45	@ 0x2d
 8001126:	701a      	strb	r2, [r3, #0]
        value = -value; // Get the absolute value
 8001128:	edd7 7a01 	vldr	s15, [r7, #4]
 800112c:	eef1 7a67 	vneg.f32	s15, s15
 8001130:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Get the integer part
    int int_part = (int)value;
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    value -= int_part; // Get the fractional part
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert the integer part to a string
    char* int_str = str;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	617b      	str	r3, [r7, #20]
    do {
        *str++ = (int_part % 10) + '0';
 800115c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <float_to_string+0x13c>)
 8001160:	fb83 1302 	smull	r1, r3, r3, r2
 8001164:	1099      	asrs	r1, r3, #2
 8001166:	17d3      	asrs	r3, r2, #31
 8001168:	1ac9      	subs	r1, r1, r3
 800116a:	460b      	mov	r3, r1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	1ad1      	subs	r1, r2, r3
 8001174:	b2ca      	uxtb	r2, r1
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	1c59      	adds	r1, r3, #1
 800117a:	6039      	str	r1, [r7, #0]
 800117c:	3230      	adds	r2, #48	@ 0x30
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
        int_part /= 10;
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	4a2e      	ldr	r2, [pc, #184]	@ (8001240 <float_to_string+0x13c>)
 8001186:	fb82 1203 	smull	r1, r2, r2, r3
 800118a:	1092      	asrs	r2, r2, #2
 800118c:	17db      	asrs	r3, r3, #31
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (int_part > 0);
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	2b00      	cmp	r3, #0
 8001196:	dce1      	bgt.n	800115c <float_to_string+0x58>

    // Reverse the integer part string
    char* start = int_str;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	623b      	str	r3, [r7, #32]
    char* end = str - 1;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
    while (start < end) {
 80011a2:	e00f      	b.n	80011c4 <float_to_string+0xc0>
        char temp = *start;
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	73fb      	strb	r3, [r7, #15]
        *start = *end;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	701a      	strb	r2, [r3, #0]
        *end = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	701a      	strb	r2, [r3, #0]
        start++;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	3301      	adds	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
        end--;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
    while (start < end) {
 80011c4:	6a3a      	ldr	r2, [r7, #32]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d3eb      	bcc.n	80011a4 <float_to_string+0xa0>
    }

    // Handle the fractional part: keep 6 decimal places
    *str++ = '.'; // Decimal point
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	222e      	movs	r2, #46	@ 0x2e
 80011d4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	e024      	b.n	8001226 <float_to_string+0x122>
        value *= 10; // Get each digit of the fractional part
 80011dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e8:	edc7 7a01 	vstr	s15, [r7, #4]
        int digit = (int)value; // Get the integer part
 80011ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f4:	ee17 3a90 	vmov	r3, s15
 80011f8:	613b      	str	r3, [r7, #16]
        *str++ = digit + '0'; // Convert to character and store
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	1c59      	adds	r1, r3, #1
 8001202:	6039      	str	r1, [r7, #0]
 8001204:	3230      	adds	r2, #48	@ 0x30
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
        value -= digit; // Remove the integer part, keep the new fractional part
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	ed97 7a01 	vldr	s14, [r7, #4]
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	edc7 7a01 	vstr	s15, [r7, #4]
    for (int i = 0; i < 6; i++) {
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	3301      	adds	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b05      	cmp	r3, #5
 800122a:	ddd7      	ble.n	80011dc <float_to_string+0xd8>
    }

    // End the string
    *str = '\0';
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	372c      	adds	r7, #44	@ 0x2c
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	66666667 	.word	0x66666667

08001244 <truncate_to_6_decimal_places>:
 * \brief           Keep 6 decimal places
 *
 * \note
 */
void truncate_to_6_decimal_places(char* str)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    // Find the position of the decimal point
    char* dot_pos = strchr(str, '.');
 800124c:	212e      	movs	r1, #46	@ 0x2e
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f009 fb54 	bl	800a8fc <strchr>
 8001254:	60f8      	str	r0, [r7, #12]
    if (dot_pos) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <truncate_to_6_decimal_places+0x24>
        // Keep only 6 decimal places
    	// Start deleting from the 7th character after the decimal point
        char* decimal_pos = dot_pos + 7;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3307      	adds	r3, #7
 8001260:	60bb      	str	r3, [r7, #8]
        *decimal_pos = '\0';  // Set the string terminator
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
    }
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <format_message>:
 * \brief           Format GPS data
 *
 * \note
 */
void format_message(char* gps_field, char* data)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0a0      	sub	sp, #128	@ 0x80
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
    // Determine the lengths of gps_field and data
    int data_len = strlen(data);
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7fe fff2 	bl	8000264 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	673b      	str	r3, [r7, #112]	@ 0x70
    int gps_field_len = strlen(gps_field);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7fe ffed 	bl	8000264 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Calculate how many spaces are needed between gps_field and data
    int space_count = 15 - (data_len + gps_field_len);
 800128e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001292:	4413      	add	r3, r2
 8001294:	f1c3 030f 	rsb	r3, r3, #15
 8001298:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Ensure space_count is not negative
    if (space_count < 0) {
 800129a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800129c:	2b00      	cmp	r3, #0
 800129e:	da01      	bge.n	80012a4 <format_message+0x34>
        space_count = 0; // If the combined length of gps_field and data exceeds 15, no spaces in between
 80012a0:	2300      	movs	r3, #0
 80012a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }

    // Create a buffer to hold the final formatted message
    char buffer[100]; // Assuming the buffer size is sufficient
    int index = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Copy gps_field to the buffer
    while (*gps_field) {
 80012a8:	e00a      	b.n	80012c0 <format_message+0x50>
        buffer[index++] = *gps_field++;
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	1c53      	adds	r3, r2, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012b2:	1c59      	adds	r1, r3, #1
 80012b4:	67b9      	str	r1, [r7, #120]	@ 0x78
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	3380      	adds	r3, #128	@ 0x80
 80012ba:	443b      	add	r3, r7
 80012bc:	f803 2c78 	strb.w	r2, [r3, #-120]
    while (*gps_field) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <format_message+0x3a>
    }

    // Add spaces between gps_field and data
    for (int i = 0; i < space_count; i++) {
 80012c8:	2300      	movs	r3, #0
 80012ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80012cc:	e00a      	b.n	80012e4 <format_message+0x74>
        buffer[index++] = ' ';
 80012ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80012d4:	3380      	adds	r3, #128	@ 0x80
 80012d6:	443b      	add	r3, r7
 80012d8:	2220      	movs	r2, #32
 80012da:	f803 2c78 	strb.w	r2, [r3, #-120]
    for (int i = 0; i < space_count; i++) {
 80012de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012e0:	3301      	adds	r3, #1
 80012e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80012e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80012e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <format_message+0x5e>
    }

    // Copy the original data into the rest of the buffer
    while (*data) {
 80012ec:	e00a      	b.n	8001304 <format_message+0x94>
        buffer[index++] = *data++;
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	1c53      	adds	r3, r2, #1
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012f6:	1c59      	adds	r1, r3, #1
 80012f8:	67b9      	str	r1, [r7, #120]	@ 0x78
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	3380      	adds	r3, #128	@ 0x80
 80012fe:	443b      	add	r3, r7
 8001300:	f803 2c78 	strb.w	r2, [r3, #-120]
    while (*data) {
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <format_message+0x7e>
    }

    // Null-terminate the final string
    buffer[index] = '\0';
 800130c:	f107 0208 	add.w	r2, r7, #8
 8001310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001312:	4413      	add	r3, r2
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]

    // Copy the formatted message back to the original data array
    strcpy(data - data_len, buffer);
 8001318:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800131a:	425b      	negs	r3, r3
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	4413      	add	r3, r2
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f009 fb52 	bl	800a9d0 <strcpy>

}
 800132c:	bf00      	nop
 800132e:	3780      	adds	r7, #128	@ 0x80
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <prv_parse_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3379      	adds	r3, #121	@ 0x79
 8001350:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8001352:	e002      	b.n	800135a <prv_parse_number+0x26>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <prv_parse_number+0x34>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b20      	cmp	r3, #32
 8001366:	d0f5      	beq.n	8001354 <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b2d      	cmp	r3, #45	@ 0x2d
 800136e:	d104      	bne.n	800137a <prv_parse_number+0x46>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <prv_parse_number+0x48>
 800137a:	2300      	movs	r3, #0
 800137c:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 800137e:	e00d      	b.n	800139c <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	461a      	mov	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3b30      	subs	r3, #48	@ 0x30
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <prv_parse_number+0x7e>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80013a8:	d903      	bls.n	80013b2 <prv_parse_number+0x7e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b39      	cmp	r3, #57	@ 0x39
 80013b0:	d9e6      	bls.n	8001380 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <prv_parse_number+0x8a>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	425b      	negs	r3, r3
 80013bc:	e000      	b.n	80013c0 <prv_parse_number+0x8c>
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <prv_parse_float_number>:
 *                  Security attacks with invalid input data may trigger 
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1, sign = (lwgps_float_t)1;
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <prv_parse_float_number+0x158>)
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001524 <prv_parse_float_number+0x158>)
 80013f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (text == NULL) {
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <prv_parse_float_number+0x3e>
        text = ghandle->p.term_str;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3379      	adds	r3, #121	@ 0x79
 8001400:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8001402:	e002      	b.n	800140a <prv_parse_float_number+0x3e>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <prv_parse_float_number+0x4c>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b20      	cmp	r3, #32
 8001416:	d0f5      	beq.n	8001404 <prv_parse_float_number+0x38>

    if (*text == '-') { /* Check sign */
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b2d      	cmp	r3, #45	@ 0x2d
 800141e:	d126      	bne.n	800146e <prv_parse_float_number+0xa2>
        sign = -1;
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <prv_parse_float_number+0x15c>)
 8001426:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ++text;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 8001430:	e01d      	b.n	800146e <prv_parse_float_number+0xa2>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b3d      	ldr	r3, [pc, #244]	@ (800152c <prv_parse_float_number+0x160>)
 8001438:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800143c:	f7ff f8d6 	bl	80005ec <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4614      	mov	r4, r2
 8001446:	461d      	mov	r5, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b30      	subs	r3, #48	@ 0x30
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f862 	bl	8000518 <__aeabi_i2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe ff10 	bl	8000280 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b2f      	cmp	r3, #47	@ 0x2f
 8001474:	d903      	bls.n	800147e <prv_parse_float_number+0xb2>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b39      	cmp	r3, #57	@ 0x39
 800147c:	d9d9      	bls.n	8001432 <prv_parse_float_number+0x66>
    }
    if (*text == '.') { /* Skip the dot character */
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b2e      	cmp	r3, #46	@ 0x2e
 8001484:	d12c      	bne.n	80014e0 <prv_parse_float_number+0x114>
        ++text;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 800148c:	e028      	b.n	80014e0 <prv_parse_float_number+0x114>
        value = value * (lwgps_float_t)10 + CTN(*text);
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b26      	ldr	r3, [pc, #152]	@ (800152c <prv_parse_float_number+0x160>)
 8001494:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001498:	f7ff f8a8 	bl	80005ec <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3b30      	subs	r3, #48	@ 0x30
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f834 	bl	8000518 <__aeabi_i2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe fee2 	bl	8000280 <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <prv_parse_float_number+0x160>)
 80014ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014ce:	f7ff f88d 	bl	80005ec <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80014e6:	d903      	bls.n	80014f0 <prv_parse_float_number+0x124>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b39      	cmp	r3, #57	@ 0x39
 80014ee:	d9ce      	bls.n	800148e <prv_parse_float_number+0xc2>
    }
    return sign * value / power;
 80014f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f8:	f7ff f878 	bl	80005ec <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001508:	f7ff f99a 	bl	8000840 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b17 	vmov	d7, r2, r3
}
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	eef0 0a67 	vmov.f32	s1, s15
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bdb0      	pop	{r4, r5, r7, pc}
 8001522:	bf00      	nop
 8001524:	3ff00000 	.word	0x3ff00000
 8001528:	bff00000 	.word	0xbff00000
 800152c:	40240000 	.word	0x40240000

08001530 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ff46 	bl	80013cc <prv_parse_float_number>
 8001540:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 8001544:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001548:	f7ff fa62 	bl	8000a10 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <prv_parse_lat_long+0x94>)
 8001550:	fb82 1203 	smull	r1, r2, r2, r3
 8001554:	1152      	asrs	r2, r2, #5
 8001556:	17db      	asrs	r3, r3, #31
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffdc 	bl	8000518 <__aeabi_i2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <prv_parse_lat_long+0x98>)
 800156e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001572:	f7ff f83b 	bl	80005ec <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800157e:	f7fe fe7d 	bl	800027c <__aeabi_dsub>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60));                 /* Calculate latitude/longitude */
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <prv_parse_lat_long+0x9c>)
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7ff f954 	bl	8000840 <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a0:	f7fe fe6e 	bl	8000280 <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 80015ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015b4:	eeb0 0a47 	vmov.f32	s0, s14
 80015b8:	eef0 0a67 	vmov.f32	s1, s15
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	51eb851f 	.word	0x51eb851f
 80015c8:	40590000 	.word	0x40590000
 80015cc:	404e0000 	.word	0x404e0000

080015d0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 80015d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d169      	bne.n	80016b8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3379      	adds	r3, #121	@ 0x79
 80015e8:	2206      	movs	r2, #6
 80015ea:	49bd      	ldr	r1, [pc, #756]	@ (80018e0 <prv_parse_term+0x310>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f009 f992 	bl	800a916 <strncmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <prv_parse_term+0x3c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3379      	adds	r3, #121	@ 0x79
 80015fc:	2206      	movs	r2, #6
 80015fe:	49b9      	ldr	r1, [pc, #740]	@ (80018e4 <prv_parse_term+0x314>)
 8001600:	4618      	mov	r0, r3
 8001602:	f009 f988 	bl	800a916 <strncmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001614:	e04e      	b.n	80016b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3379      	adds	r3, #121	@ 0x79
 800161a:	2206      	movs	r2, #6
 800161c:	49b2      	ldr	r1, [pc, #712]	@ (80018e8 <prv_parse_term+0x318>)
 800161e:	4618      	mov	r0, r3
 8001620:	f009 f979 	bl	800a916 <strncmp>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <prv_parse_term+0x6e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3379      	adds	r3, #121	@ 0x79
 800162e:	2206      	movs	r2, #6
 8001630:	49ae      	ldr	r1, [pc, #696]	@ (80018ec <prv_parse_term+0x31c>)
 8001632:	4618      	mov	r0, r3
 8001634:	f009 f96f 	bl	800a916 <strncmp>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d104      	bne.n	8001648 <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2202      	movs	r2, #2
 8001642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001646:	e035      	b.n	80016b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3379      	adds	r3, #121	@ 0x79
 800164c:	2206      	movs	r2, #6
 800164e:	49a8      	ldr	r1, [pc, #672]	@ (80018f0 <prv_parse_term+0x320>)
 8001650:	4618      	mov	r0, r3
 8001652:	f009 f960 	bl	800a916 <strncmp>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <prv_parse_term+0xa0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3379      	adds	r3, #121	@ 0x79
 8001660:	2206      	movs	r2, #6
 8001662:	49a4      	ldr	r1, [pc, #656]	@ (80018f4 <prv_parse_term+0x324>)
 8001664:	4618      	mov	r0, r3
 8001666:	f009 f956 	bl	800a916 <strncmp>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d104      	bne.n	800167a <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8001678:	e01c      	b.n	80016b4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3379      	adds	r3, #121	@ 0x79
 800167e:	2206      	movs	r2, #6
 8001680:	499d      	ldr	r1, [pc, #628]	@ (80018f8 <prv_parse_term+0x328>)
 8001682:	4618      	mov	r0, r3
 8001684:	f009 f947 	bl	800a916 <strncmp>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <prv_parse_term+0xd2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3379      	adds	r3, #121	@ 0x79
 8001692:	2206      	movs	r2, #6
 8001694:	4999      	ldr	r1, [pc, #612]	@ (80018fc <prv_parse_term+0x32c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f009 f93d 	bl	800a916 <strncmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d104      	bne.n	80016ac <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2204      	movs	r2, #4
 80016a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80016aa:	e003      	b.n	80016b4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        }
        return 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e241      	b.n	8001b3c <prv_parse_term+0x56c>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80016be:	2900      	cmp	r1, #0
 80016c0:	f000 823b 	beq.w	8001b3a <prv_parse_term+0x56a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80016ca:	2901      	cmp	r1, #1
 80016cc:	f040 80d9 	bne.w	8001882 <prv_parse_term+0x2b2>
        switch (ghandle->p.term_num) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80016d6:	3b01      	subs	r3, #1
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	f200 8223 	bhi.w	8001b24 <prv_parse_term+0x554>
 80016de:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <prv_parse_term+0x114>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	08001719 	.word	0x08001719
 80016e8:	08001793 	.word	0x08001793
 80016ec:	080017a9 	.word	0x080017a9
 80016f0:	080017d3 	.word	0x080017d3
 80016f4:	080017e9 	.word	0x080017e9
 80016f8:	08001813 	.word	0x08001813
 80016fc:	08001827 	.word	0x08001827
 8001700:	08001b25 	.word	0x08001b25
 8001704:	0800183b 	.word	0x0800183b
 8001708:	08001b25 	.word	0x08001b25
 800170c:	08001853 	.word	0x08001853
 8001710:	08001b25 	.word	0x08001b25
 8001714:	0800186b 	.word	0x0800186b
            case 1: /* Process UTC time */
                ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800171e:	3b30      	subs	r3, #48	@ 0x30
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3b30      	subs	r3, #48	@ 0x30
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
                ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001746:	3b30      	subs	r3, #48	@ 0x30
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800175a:	4413      	add	r3, r2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	3b30      	subs	r3, #48	@ 0x30
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
                ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800176e:	3b30      	subs	r3, #48	@ 0x30
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001782:	4413      	add	r3, r2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3b30      	subs	r3, #48	@ 0x30
 8001788:	b2da      	uxtb	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
                break;
 8001790:	e1d3      	b.n	8001b3a <prv_parse_term+0x56a>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fecc 	bl	8001530 <prv_parse_lat_long>
 8001798:	eeb0 7a40 	vmov.f32	s14, s0
 800179c:	eef0 7a60 	vmov.f32	s15, s1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80017a6:	e1c8      	b.n	8001b3a <prv_parse_term+0x56a>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80017ae:	2b53      	cmp	r3, #83	@ 0x53
 80017b0:	d005      	beq.n	80017be <prv_parse_term+0x1ee>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80017b8:	2b73      	cmp	r3, #115	@ 0x73
 80017ba:	f040 81b5 	bne.w	8001b28 <prv_parse_term+0x558>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80017c4:	4690      	mov	r8, r2
 80017c6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	e9c3 8924 	strd	r8, r9, [r3, #144]	@ 0x90
                }
                break;
 80017d0:	e1aa      	b.n	8001b28 <prv_parse_term+0x558>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff feac 	bl	8001530 <prv_parse_lat_long>
 80017d8:	eeb0 7a40 	vmov.f32	s14, s0
 80017dc:	eef0 7a60 	vmov.f32	s15, s1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80017e6:	e1a8      	b.n	8001b3a <prv_parse_term+0x56a>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80017ee:	2b57      	cmp	r3, #87	@ 0x57
 80017f0:	d005      	beq.n	80017fe <prv_parse_term+0x22e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80017f8:	2b77      	cmp	r3, #119	@ 0x77
 80017fa:	f040 8197 	bne.w	8001b2c <prv_parse_term+0x55c>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001804:	4614      	mov	r4, r2
 8001806:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e9c3 4526 	strd	r4, r5, [r3, #152]	@ 0x98
                }
                break;
 8001810:	e18c      	b.n	8001b2c <prv_parse_term+0x55c>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001812:	2100      	movs	r1, #0
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fd8d 	bl	8001334 <prv_parse_number>
 800181a:	4603      	mov	r3, r0
 800181c:	b2da      	uxtb	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
 8001824:	e189      	b.n	8001b3a <prv_parse_term+0x56a>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 8001826:	2100      	movs	r1, #0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fd83 	bl	8001334 <prv_parse_number>
 800182e:	4603      	mov	r3, r0
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
                break;
 8001838:	e17f      	b.n	8001b3a <prv_parse_term+0x56a>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 800183a:	2100      	movs	r1, #0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fdc5 	bl	80013cc <prv_parse_float_number>
 8001842:	eeb0 7a40 	vmov.f32	s14, s0
 8001846:	eef0 7a60 	vmov.f32	s15, s1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 8001850:	e173      	b.n	8001b3a <prv_parse_term+0x56a>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fdb9 	bl	80013cc <prv_parse_float_number>
 800185a:	eeb0 7a40 	vmov.f32	s14, s0
 800185e:	eef0 7a60 	vmov.f32	s15, s1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 8001868:	e167      	b.n	8001b3a <prv_parse_term+0x56a>
            case 13: /* Age of differential GPS correction data */
                ghandle->p.data.gga.dgps_age = prv_parse_float_number(ghandle, NULL);
 800186a:	2100      	movs	r1, #0
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fdad 	bl	80013cc <prv_parse_float_number>
 8001872:	eeb0 7a40 	vmov.f32	s14, s0
 8001876:	eef0 7a60 	vmov.f32	s15, s1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	ed83 7b2e 	vstr	d7, [r3, #184]	@ 0xb8
                break;
 8001880:	e15b      	b.n	8001b3a <prv_parse_term+0x56a>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 8001888:	2902      	cmp	r1, #2
 800188a:	f040 8083 	bne.w	8001994 <prv_parse_term+0x3c4>
        switch (ghandle->p.term_num) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001894:	3b02      	subs	r3, #2
 8001896:	2b0f      	cmp	r3, #15
 8001898:	d860      	bhi.n	800195c <prv_parse_term+0x38c>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <prv_parse_term+0x2d0>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	08001901 	.word	0x08001901
 80018a4:	0800195d 	.word	0x0800195d
 80018a8:	0800195d 	.word	0x0800195d
 80018ac:	0800195d 	.word	0x0800195d
 80018b0:	0800195d 	.word	0x0800195d
 80018b4:	0800195d 	.word	0x0800195d
 80018b8:	0800195d 	.word	0x0800195d
 80018bc:	0800195d 	.word	0x0800195d
 80018c0:	0800195d 	.word	0x0800195d
 80018c4:	0800195d 	.word	0x0800195d
 80018c8:	0800195d 	.word	0x0800195d
 80018cc:	0800195d 	.word	0x0800195d
 80018d0:	0800195d 	.word	0x0800195d
 80018d4:	08001915 	.word	0x08001915
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	08001945 	.word	0x08001945
 80018e0:	0800aa04 	.word	0x0800aa04
 80018e4:	0800aa0c 	.word	0x0800aa0c
 80018e8:	0800aa14 	.word	0x0800aa14
 80018ec:	0800aa1c 	.word	0x0800aa1c
 80018f0:	0800aa24 	.word	0x0800aa24
 80018f4:	0800aa2c 	.word	0x0800aa2c
 80018f8:	0800aa34 	.word	0x0800aa34
 80018fc:	0800aa3c 	.word	0x0800aa3c
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8001900:	2100      	movs	r1, #0
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fd16 	bl	8001334 <prv_parse_number>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8001912:	e112      	b.n	8001b3a <prv_parse_term+0x56a>
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 8001914:	2100      	movs	r1, #0
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fd58 	bl	80013cc <prv_parse_float_number>
 800191c:	eeb0 7a40 	vmov.f32	s14, s0
 8001920:	eef0 7a60 	vmov.f32	s15, s1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
 800192a:	e106      	b.n	8001b3a <prv_parse_term+0x56a>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fd4c 	bl	80013cc <prv_parse_float_number>
 8001934:	eeb0 7a40 	vmov.f32	s14, s0
 8001938:	eef0 7a60 	vmov.f32	s15, s1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
 8001942:	e0fa      	b.n	8001b3a <prv_parse_term+0x56a>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 8001944:	2100      	movs	r1, #0
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fd40 	bl	80013cc <prv_parse_float_number>
 800194c:	eeb0 7a40 	vmov.f32	s14, s0
 8001950:	eef0 7a60 	vmov.f32	s15, s1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 800195a:	e0ee      	b.n	8001b3a <prv_parse_term+0x56a>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001962:	2b02      	cmp	r3, #2
 8001964:	f240 80e4 	bls.w	8001b30 <prv_parse_term+0x560>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800196e:	2b0e      	cmp	r3, #14
 8001970:	f200 80de 	bhi.w	8001b30 <prv_parse_term+0x560>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001974:	2100      	movs	r1, #0
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fcdc 	bl	8001334 <prv_parse_number>
 800197c:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001984:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001986:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	460a      	mov	r2, r1
 800198e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                }
                break;
 8001992:	e0cd      	b.n	8001b30 <prv_parse_term+0x560>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 800199a:	2903      	cmp	r1, #3
 800199c:	d11b      	bne.n	80019d6 <prv_parse_term+0x406>
        switch (ghandle->p.term_num) {
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d002      	beq.n	80019ae <prv_parse_term+0x3de>
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d00a      	beq.n	80019c2 <prv_parse_term+0x3f2>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80019ac:	e0c5      	b.n	8001b3a <prv_parse_term+0x56a>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 80019ae:	2100      	movs	r1, #0
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fcbf 	bl	8001334 <prv_parse_number>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                break;
 80019c0:	e0bb      	b.n	8001b3a <prv_parse_term+0x56a>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 80019c2:	2100      	movs	r1, #0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fcb5 	bl	8001334 <prv_parse_number>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
                break;
 80019d4:	e0b1      	b.n	8001b3a <prv_parse_term+0x56a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f891 1078 	ldrb.w	r1, [r1, #120]	@ 0x78
 80019dc:	2904      	cmp	r1, #4
 80019de:	f040 80ac 	bne.w	8001b3a <prv_parse_term+0x56a>
        switch (ghandle->p.term_num) {
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f891 1087 	ldrb.w	r1, [r1, #135]	@ 0x87
 80019e8:	3902      	subs	r1, #2
 80019ea:	2909      	cmp	r1, #9
 80019ec:	f200 80a2 	bhi.w	8001b34 <prv_parse_term+0x564>
 80019f0:	a001      	add	r0, pc, #4	@ (adr r0, 80019f8 <prv_parse_term+0x428>)
 80019f2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80019f6:	bf00      	nop
 80019f8:	08001a21 	.word	0x08001a21
 80019fc:	08001b35 	.word	0x08001b35
 8001a00:	08001b35 	.word	0x08001b35
 8001a04:	08001b35 	.word	0x08001b35
 8001a08:	08001b35 	.word	0x08001b35
 8001a0c:	08001a3b 	.word	0x08001a3b
 8001a10:	08001a53 	.word	0x08001a53
 8001a14:	08001a6b 	.word	0x08001a6b
 8001a18:	08001ae5 	.word	0x08001ae5
 8001a1c:	08001afd 	.word	0x08001afd
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001a26:	2b41      	cmp	r3, #65	@ 0x41
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
 8001a38:	e07f      	b.n	8001b3a <prv_parse_term+0x56a>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fcc5 	bl	80013cc <prv_parse_float_number>
 8001a42:	eeb0 7a40 	vmov.f32	s14, s0
 8001a46:	eef0 7a60 	vmov.f32	s15, s1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001a50:	e073      	b.n	8001b3a <prv_parse_term+0x56a>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fcb9 	bl	80013cc <prv_parse_float_number>
 8001a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5e:	eef0 7a60 	vmov.f32	s15, s1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001a68:	e067      	b.n	8001b3a <prv_parse_term+0x56a>
            case 9: /* Process date */
                ghandle->p.data.rmc.date = (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001a70:	3b30      	subs	r3, #48	@ 0x30
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001a84:	4413      	add	r3, r2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3b30      	subs	r3, #48	@ 0x30
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                ghandle->p.data.rmc.month = (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001a98:	3b30      	subs	r3, #48	@ 0x30
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001aac:	4413      	add	r3, r2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b30      	subs	r3, #48	@ 0x30
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
                ghandle->p.data.rmc.year = (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8001ac0:	3b30      	subs	r3, #48	@ 0x30
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	3b30      	subs	r3, #48	@ 0x30
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
                break;
 8001ae2:	e02a      	b.n	8001b3a <prv_parse_term+0x56a>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fc70 	bl	80013cc <prv_parse_float_number>
 8001aec:	eeb0 7a40 	vmov.f32	s14, s0
 8001af0:	eef0 7a60 	vmov.f32	s15, s1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	ed83 7b2a 	vstr	d7, [r3, #168]	@ 0xa8
                break;
 8001afa:	e01e      	b.n	8001b3a <prv_parse_term+0x56a>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 8001b02:	2957      	cmp	r1, #87	@ 0x57
 8001b04:	d004      	beq.n	8001b10 <prv_parse_term+0x540>
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f891 1079 	ldrb.w	r1, [r1, #121]	@ 0x79
 8001b0c:	2977      	cmp	r1, #119	@ 0x77
 8001b0e:	d113      	bne.n	8001b38 <prv_parse_term+0x568>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	e9d1 012a 	ldrd	r0, r1, [r1, #168]	@ 0xa8
 8001b16:	4602      	mov	r2, r0
 8001b18:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
                }
                break;
 8001b22:	e009      	b.n	8001b38 <prv_parse_term+0x568>
            default: break;
 8001b24:	bf00      	nop
 8001b26:	e008      	b.n	8001b3a <prv_parse_term+0x56a>
                break;
 8001b28:	bf00      	nop
 8001b2a:	e006      	b.n	8001b3a <prv_parse_term+0x56a>
                break;
 8001b2c:	bf00      	nop
 8001b2e:	e004      	b.n	8001b3a <prv_parse_term+0x56a>
                break;
 8001b30:	bf00      	nop
 8001b32:	e002      	b.n	8001b3a <prv_parse_term+0x56a>
            default: break;
 8001b34:	bf00      	nop
 8001b36:	e000      	b.n	8001b3a <prv_parse_term+0x56a>
                break;
 8001b38:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b46:	bf00      	nop

08001b48 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b56:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b58:	d90a      	bls.n	8001b70 <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001b60:	2b39      	cmp	r3, #57	@ 0x39
 8001b62:	d805      	bhi.n	8001b70 <prv_check_crc+0x28>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	e024      	b.n	8001bba <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b76:	2b60      	cmp	r3, #96	@ 0x60
 8001b78:	d90c      	bls.n	8001b94 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001b80:	2b7a      	cmp	r3, #122	@ 0x7a
 8001b82:	d807      	bhi.n	8001b94 <prv_check_crc+0x4c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001b8a:	3b57      	subs	r3, #87	@ 0x57
 8001b8c:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	e012      	b.n	8001bba <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001b9a:	2b40      	cmp	r3, #64	@ 0x40
 8001b9c:	d90c      	bls.n	8001bb8 <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001ba4:	2b5a      	cmp	r3, #90	@ 0x5a
 8001ba6:	d807      	bhi.n	8001bb8 <prv_check_crc+0x70>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8001bae:	3b37      	subs	r3, #55	@ 0x37
 8001bb0:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	e000      	b.n	8001bba <prv_check_crc+0x72>
 8001bb8:	2200      	movs	r2, #0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001bc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8001bc2:	d90b      	bls.n	8001bdc <prv_check_crc+0x94>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001bca:	2b39      	cmp	r3, #57	@ 0x39
 8001bcc:	d806      	bhi.n	8001bdc <prv_check_crc+0x94>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e026      	b.n	8001c2a <prv_check_crc+0xe2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001be2:	2b60      	cmp	r3, #96	@ 0x60
 8001be4:	d90d      	bls.n	8001c02 <prv_check_crc+0xba>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001bec:	2b7a      	cmp	r3, #122	@ 0x7a
 8001bee:	d808      	bhi.n	8001c02 <prv_check_crc+0xba>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001bf6:	3b57      	subs	r3, #87	@ 0x57
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e013      	b.n	8001c2a <prv_check_crc+0xe2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c08:	2b40      	cmp	r3, #64	@ 0x40
 8001c0a:	d90d      	bls.n	8001c28 <prv_check_crc+0xe0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c12:	2b5a      	cmp	r3, #90	@ 0x5a
 8001c14:	d808      	bhi.n	8001c28 <prv_check_crc+0xe0>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8001c1c:	3b37      	subs	r3, #55	@ 0x37
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e000      	b.n	8001c2a <prv_check_crc+0xe2>
 8001c28:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d13c      	bne.n	8001cd8 <prv_copy_from_tmp_memory+0x8c>
        ghandle->latitude = ghandle->p.data.gga.latitude;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	e9c1 2300 	strd	r2, r3, [r1]
        ghandle->longitude = ghandle->p.data.gga.longitude;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	e9c1 2302 	strd	r2, r3, [r1, #8]
        ghandle->altitude = ghandle->p.data.gga.altitude;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
        ghandle->fix = ghandle->p.data.gga.fix;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        ghandle->minutes = ghandle->p.data.gga.minutes;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 20b3 	ldrb.w	r2, [r3, #179]	@ 0xb3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        ghandle->seconds = ghandle->p.data.gga.seconds;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        ghandle->dgps_age = ghandle->p.data.gga.dgps_age;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 8001cd6:	e061      	b.n	8001d9c <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d121      	bne.n	8001d26 <prv_copy_from_tmp_memory+0xda>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f103 0049 	add.w	r0, r3, #73	@ 0x49
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	33a9      	adds	r3, #169	@ 0xa9
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f008 fe48 	bl	800a9b4 <memcpy>
 8001d24:	e03a      	b.n	8001d9c <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d106      	bne.n	8001d3e <prv_copy_from_tmp_memory+0xf2>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 8001d3c:	e02e      	b.n	8001d9c <prv_copy_from_tmp_memory+0x150>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d129      	bne.n	8001d9c <prv_copy_from_tmp_memory+0x150>
        ghandle->course = ghandle->p.data.rmc.course;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        ghandle->speed = ghandle->p.data.rmc.speed;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        ghandle->variation = ghandle->p.data.rmc.variation;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
        ghandle->date = ghandle->p.data.rmc.date;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        ghandle->month = ghandle->p.data.rmc.month;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
        ghandle->year = ghandle->p.data.rmc.year;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 8001dae:	22c0      	movs	r2, #192	@ 0xc0
 8001db0:	2100      	movs	r1, #0
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f008 fdd1 	bl	800a95a <memset>
    return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001dd2:	e0ad      	b.n	8001f30 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b24      	cmp	r3, #36	@ 0x24
 8001dda:	d128      	bne.n	8001e2e <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3378      	adds	r3, #120	@ 0x78
 8001de0:	2248      	movs	r2, #72	@ 0x48
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f008 fdb8 	bl	800a95a <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001df0:	2b0b      	cmp	r3, #11
 8001df2:	f200 8097 	bhi.w	8001f24 <lwgps_process+0x162>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	440b      	add	r3, r1
 8001e06:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001e20:	461a      	mov	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001e2c:	e07a      	b.n	8001f24 <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e34:	d11d      	bne.n	8001e72 <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fbca 	bl	80015d0 <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4053      	eors	r3, r2
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001e70:	e058      	b.n	8001f24 <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e78:	d117      	bne.n	8001eaa <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff fba8 	bl	80015d0 <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
 8001ea8:	e03c      	b.n	8001f24 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b0d      	cmp	r3, #13
 8001eb0:	d109      	bne.n	8001ec6 <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff fe48 	bl	8001b48 <prv_check_crc>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d032      	beq.n	8001f24 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff fec4 	bl	8001c4c <prv_copy_from_tmp_memory>
 8001ec4:	e02e      	b.n	8001f24 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4053      	eors	r3, r2
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001eea:	2b0b      	cmp	r3, #11
 8001eec:	d81a      	bhi.n	8001f24 <lwgps_process+0x162>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	440b      	add	r3, r1
 8001efe:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f af4e 	bne.w	8001dd4 <lwgps_process+0x12>
        }
    }
    return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b090      	sub	sp, #64	@ 0x40
 8001f48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f4a:	f000 fde7 	bl	8002b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4e:	f000 f8eb 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f52:	f000 f9ab 	bl	80022ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f56:	f000 f951 	bl	80021fc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001f5a:	f000 f97d 	bl	8002258 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8001f5e:	4863      	ldr	r0, [pc, #396]	@ (80020ec <main+0x1a8>)
 8001f60:	f006 fa70 	bl	8008444 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8001f64:	4b62      	ldr	r3, [pc, #392]	@ (80020f0 <main+0x1ac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a61      	ldr	r2, [pc, #388]	@ (80020f0 <main+0x1ac>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8001f70:	f005 ffd6 	bl	8007f20 <SEGGER_SYSVIEW_Conf>

  /* Initialize LCD */
  LCD_Init();
 8001f74:	f7ff f816 	bl	8000fa4 <LCD_Init>

  /* Creating a binary semaphore */
  vSemaphoreCreateBinary(xBinarySemaphore);
 8001f78:	2203      	movs	r2, #3
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f003 fe45 	bl	8005c0c <xQueueGenericCreate>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a5b      	ldr	r2, [pc, #364]	@ (80020f4 <main+0x1b0>)
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b5a      	ldr	r3, [pc, #360]	@ (80020f4 <main+0x1b0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <main+0x5a>
 8001f90:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <main+0x1b0>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f003 fec3 	bl	8005d24 <xQueueGenericSend>

  /* Tasks Creation */
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	22c8      	movs	r2, #200	@ 0xc8
 8001fac:	4952      	ldr	r1, [pc, #328]	@ (80020f8 <main+0x1b4>)
 8001fae:	4853      	ldr	r0, [pc, #332]	@ (80020fc <main+0x1b8>)
 8001fb0:	f004 f9f0 	bl	8006394 <xTaskCreate>
 8001fb4:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d00b      	beq.n	8001fd4 <main+0x90>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	633b      	str	r3, [r7, #48]	@ 0x30
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <main+0x8c>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2302      	movs	r3, #2
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	22c8      	movs	r2, #200	@ 0xc8
 8001fe2:	4947      	ldr	r1, [pc, #284]	@ (8002100 <main+0x1bc>)
 8001fe4:	4847      	ldr	r0, [pc, #284]	@ (8002104 <main+0x1c0>)
 8001fe6:	f004 f9d5 	bl	8006394 <xTaskCreate>
 8001fea:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8001fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d00b      	beq.n	800200a <main+0xc6>
        __asm volatile
 8001ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	e7fd      	b.n	8002006 <main+0xc2>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2302      	movs	r3, #2
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	22c8      	movs	r2, #200	@ 0xc8
 8002018:	493b      	ldr	r1, [pc, #236]	@ (8002108 <main+0x1c4>)
 800201a:	483c      	ldr	r0, [pc, #240]	@ (800210c <main+0x1c8>)
 800201c:	f004 f9ba 	bl	8006394 <xTaskCreate>
 8002020:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8002022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002024:	2b01      	cmp	r3, #1
 8002026:	d00b      	beq.n	8002040 <main+0xfc>
        __asm volatile
 8002028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <main+0xf8>

  status = xTaskCreate(lcd_task_handler, "LCD_task", 256, NULL, 2, &task4_handle);
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	2302      	movs	r3, #2
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2300      	movs	r3, #0
 800204c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002050:	492f      	ldr	r1, [pc, #188]	@ (8002110 <main+0x1cc>)
 8002052:	4830      	ldr	r0, [pc, #192]	@ (8002114 <main+0x1d0>)
 8002054:	f004 f99e 	bl	8006394 <xTaskCreate>
 8002058:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 800205a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205c:	2b01      	cmp	r3, #1
 800205e:	d00b      	beq.n	8002078 <main+0x134>
        __asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <main+0x130>

  status = xTaskCreate(gps_data_receive_handler, "GPS_receive", 200, NULL, 2, &task5_handle);
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2302      	movs	r3, #2
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	22c8      	movs	r2, #200	@ 0xc8
 8002086:	4924      	ldr	r1, [pc, #144]	@ (8002118 <main+0x1d4>)
 8002088:	4824      	ldr	r0, [pc, #144]	@ (800211c <main+0x1d8>)
 800208a:	f004 f983 	bl	8006394 <xTaskCreate>
 800208e:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 8002090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002092:	2b01      	cmp	r3, #1
 8002094:	d00b      	beq.n	80020ae <main+0x16a>
        __asm volatile
 8002096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800209a:	f383 8811 	msr	BASEPRI, r3
 800209e:	f3bf 8f6f 	isb	sy
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	623b      	str	r3, [r7, #32]
    }
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	e7fd      	b.n	80020aa <main+0x166>

  status = xTaskCreate(gps_data_process_handler, "GPS_data_process", 200, NULL, 2, &task6_handle);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2302      	movs	r3, #2
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2300      	movs	r3, #0
 80020b8:	22c8      	movs	r2, #200	@ 0xc8
 80020ba:	4919      	ldr	r1, [pc, #100]	@ (8002120 <main+0x1dc>)
 80020bc:	4819      	ldr	r0, [pc, #100]	@ (8002124 <main+0x1e0>)
 80020be:	f004 f969 	bl	8006394 <xTaskCreate>
 80020c2:	6378      	str	r0, [r7, #52]	@ 0x34
  configASSERT(status == pdPASS);
 80020c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d00b      	beq.n	80020e2 <main+0x19e>
        __asm volatile
 80020ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ce:	f383 8811 	msr	BASEPRI, r3
 80020d2:	f3bf 8f6f 	isb	sy
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	61fb      	str	r3, [r7, #28]
    }
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	e7fd      	b.n	80020de <main+0x19a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80020e2:	f004 fbe9 	bl	80068b8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020e6:	bf00      	nop
 80020e8:	e7fd      	b.n	80020e6 <main+0x1a2>
 80020ea:	bf00      	nop
 80020ec:	0007a120 	.word	0x0007a120
 80020f0:	e0001000 	.word	0xe0001000
 80020f4:	20000324 	.word	0x20000324
 80020f8:	0800aa44 	.word	0x0800aa44
 80020fc:	08002549 	.word	0x08002549
 8002100:	0800aa54 	.word	0x0800aa54
 8002104:	080025d5 	.word	0x080025d5
 8002108:	0800aa64 	.word	0x0800aa64
 800210c:	08002599 	.word	0x08002599
 8002110:	0800aa74 	.word	0x0800aa74
 8002114:	08002625 	.word	0x08002625
 8002118:	0800aa80 	.word	0x0800aa80
 800211c:	080026bd 	.word	0x080026bd
 8002120:	0800aa8c 	.word	0x0800aa8c
 8002124:	0800271d 	.word	0x0800271d

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b094      	sub	sp, #80	@ 0x50
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	2230      	movs	r2, #48	@ 0x30
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f008 fc0f 	bl	800a95a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <SystemClock_Config+0xcc>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <SystemClock_Config+0xcc>)
 8002156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215a:	6413      	str	r3, [r2, #64]	@ 0x40
 800215c:	4b25      	ldr	r3, [pc, #148]	@ (80021f4 <SystemClock_Config+0xcc>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <SystemClock_Config+0xd0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a21      	ldr	r2, [pc, #132]	@ (80021f8 <SystemClock_Config+0xd0>)
 8002172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <SystemClock_Config+0xd0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002184:	2302      	movs	r3, #2
 8002186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002188:	2301      	movs	r3, #1
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800218c:	2310      	movs	r3, #16
 800218e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002190:	2302      	movs	r3, #2
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002194:	2300      	movs	r3, #0
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002198:	2308      	movs	r3, #8
 800219a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800219c:	23a8      	movs	r3, #168	@ 0xa8
 800219e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021a0:	2302      	movs	r3, #2
 80021a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a8:	f107 0320 	add.w	r3, r7, #32
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 fd69 	bl	8003c84 <HAL_RCC_OscConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021b8:	f000 fb1c 	bl	80027f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021bc:	230f      	movs	r3, #15
 80021be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c0:	2302      	movs	r3, #2
 80021c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	2105      	movs	r1, #5
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 ffc0 	bl	8004160 <HAL_RCC_ClockConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021e6:	f000 fb05 	bl	80027f4 <Error_Handler>
  }
}
 80021ea:	bf00      	nop
 80021ec:	3750      	adds	r7, #80	@ 0x50
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000

080021fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <MX_I2C1_Init+0x50>)
 8002202:	4a13      	ldr	r2, [pc, #76]	@ (8002250 <MX_I2C1_Init+0x54>)
 8002204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_I2C1_Init+0x50>)
 8002208:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <MX_I2C1_Init+0x58>)
 800220a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <MX_I2C1_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_I2C1_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <MX_I2C1_Init+0x50>)
 800221a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800221e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <MX_I2C1_Init+0x50>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_I2C1_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_I2C1_Init+0x50>)
 800223a:	f000 ffa9 	bl	8003190 <HAL_I2C_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002244:	f000 fad6 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000154 	.word	0x20000154
 8002250:	40005400 	.word	0x40005400
 8002254:	000186a0 	.word	0x000186a0

08002258 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800225c:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 800225e:	4a12      	ldr	r2, [pc, #72]	@ (80022a8 <MX_USART3_UART_Init+0x50>)
 8002260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 8002264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <MX_USART3_UART_Init+0x4c>)
 8002290:	f002 fbf6 	bl	8004a80 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800229a:	f000 faab 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200001a8 	.word	0x200001a8
 80022a8:	40004800 	.word	0x40004800

080022ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	4b98      	ldr	r3, [pc, #608]	@ (8002528 <MX_GPIO_Init+0x27c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a97      	ldr	r2, [pc, #604]	@ (8002528 <MX_GPIO_Init+0x27c>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b95      	ldr	r3, [pc, #596]	@ (8002528 <MX_GPIO_Init+0x27c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	4b91      	ldr	r3, [pc, #580]	@ (8002528 <MX_GPIO_Init+0x27c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a90      	ldr	r2, [pc, #576]	@ (8002528 <MX_GPIO_Init+0x27c>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002528 <MX_GPIO_Init+0x27c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a89      	ldr	r2, [pc, #548]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b87      	ldr	r3, [pc, #540]	@ (8002528 <MX_GPIO_Init+0x27c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b83      	ldr	r3, [pc, #524]	@ (8002528 <MX_GPIO_Init+0x27c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a82      	ldr	r2, [pc, #520]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b80      	ldr	r3, [pc, #512]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b7c      	ldr	r3, [pc, #496]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a7b      	ldr	r2, [pc, #492]	@ (8002528 <MX_GPIO_Init+0x27c>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b79      	ldr	r3, [pc, #484]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a74      	ldr	r2, [pc, #464]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b72      	ldr	r3, [pc, #456]	@ (8002528 <MX_GPIO_Init+0x27c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2108      	movs	r1, #8
 800236e:	486f      	ldr	r0, [pc, #444]	@ (800252c <MX_GPIO_Init+0x280>)
 8002370:	f000 feda 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	2101      	movs	r1, #1
 8002378:	486d      	ldr	r0, [pc, #436]	@ (8002530 <MX_GPIO_Init+0x284>)
 800237a:	f000 fed5 	bl	8003128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800237e:	2200      	movs	r2, #0
 8002380:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002384:	486b      	ldr	r0, [pc, #428]	@ (8002534 <MX_GPIO_Init+0x288>)
 8002386:	f000 fecf 	bl	8003128 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800238a:	2308      	movs	r3, #8
 800238c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4862      	ldr	r0, [pc, #392]	@ (800252c <MX_GPIO_Init+0x280>)
 80023a2:	f000 fd25 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	485c      	ldr	r0, [pc, #368]	@ (8002530 <MX_GPIO_Init+0x284>)
 80023be:	f000 fd17 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80023c2:	2308      	movs	r3, #8
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d2:	2305      	movs	r3, #5
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	4854      	ldr	r0, [pc, #336]	@ (8002530 <MX_GPIO_Init+0x284>)
 80023de:	f000 fd07 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023e2:	2301      	movs	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023e6:	4b54      	ldr	r3, [pc, #336]	@ (8002538 <MX_GPIO_Init+0x28c>)
 80023e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f107 031c 	add.w	r3, r7, #28
 80023f2:	4619      	mov	r1, r3
 80023f4:	4851      	ldr	r0, [pc, #324]	@ (800253c <MX_GPIO_Init+0x290>)
 80023f6:	f000 fcfb 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80023fa:	2310      	movs	r3, #16
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800240a:	2306      	movs	r3, #6
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	4619      	mov	r1, r3
 8002414:	4849      	ldr	r0, [pc, #292]	@ (800253c <MX_GPIO_Init+0x290>)
 8002416:	f000 fceb 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800241a:	23e0      	movs	r3, #224	@ 0xe0
 800241c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800242a:	2305      	movs	r3, #5
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4841      	ldr	r0, [pc, #260]	@ (800253c <MX_GPIO_Init+0x290>)
 8002436:	f000 fcdb 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800243a:	2304      	movs	r3, #4
 800243c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	483c      	ldr	r0, [pc, #240]	@ (8002540 <MX_GPIO_Init+0x294>)
 800244e:	f000 fccf 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002464:	2305      	movs	r3, #5
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	4619      	mov	r1, r3
 800246e:	4834      	ldr	r0, [pc, #208]	@ (8002540 <MX_GPIO_Init+0x294>)
 8002470:	f000 fcbe 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002474:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002478:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	4829      	ldr	r0, [pc, #164]	@ (8002534 <MX_GPIO_Init+0x288>)
 800248e:	f000 fcaf 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002492:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024a4:	2306      	movs	r3, #6
 80024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	4820      	ldr	r0, [pc, #128]	@ (8002530 <MX_GPIO_Init+0x284>)
 80024b0:	f000 fc9e 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80024b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	481c      	ldr	r0, [pc, #112]	@ (800253c <MX_GPIO_Init+0x290>)
 80024ca:	f000 fc91 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80024ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80024d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024e0:	230a      	movs	r3, #10
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4814      	ldr	r0, [pc, #80]	@ (800253c <MX_GPIO_Init+0x290>)
 80024ec:	f000 fc80 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024f0:	2320      	movs	r3, #32
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	480c      	ldr	r0, [pc, #48]	@ (8002534 <MX_GPIO_Init+0x288>)
 8002504:	f000 fc74 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002508:	2302      	movs	r3, #2
 800250a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <MX_GPIO_Init+0x298>)
 800250e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	4804      	ldr	r0, [pc, #16]	@ (800252c <MX_GPIO_Init+0x280>)
 800251c:	f000 fc68 	bl	8002df0 <HAL_GPIO_Init>

}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	@ 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	40021000 	.word	0x40021000
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	10110000 	.word	0x10110000
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	10120000 	.word	0x10120000

08002548 <led_green_handler>:

/* USER CODE BEGIN 4 */

// Green LED
static void led_green_handler(void* parameters)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8002550:	f004 fabe 	bl	8006ad0 <xTaskGetTickCount>
 8002554:	4603      	mov	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		if (gps_data.valid_status == 1) {
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <led_green_handler+0x44>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <led_green_handler+0x2a>
		    SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8002560:	480b      	ldr	r0, [pc, #44]	@ (8002590 <led_green_handler+0x48>)
 8002562:	f008 f92d 	bl	800a7c0 <SEGGER_SYSVIEW_PrintfTarget>
		    HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8002566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800256a:	480a      	ldr	r0, [pc, #40]	@ (8002594 <led_green_handler+0x4c>)
 800256c:	f000 fdf5 	bl	800315a <HAL_GPIO_TogglePin>
 8002570:	e005      	b.n	800257e <led_green_handler+0x36>
		} else {
		    HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_RESET); // Green LED off
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002578:	4806      	ldr	r0, [pc, #24]	@ (8002594 <led_green_handler+0x4c>)
 800257a:	f000 fdd5 	bl	8003128 <HAL_GPIO_WritePin>
		}

        vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(200)); // 400ms
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	21c8      	movs	r1, #200	@ 0xc8
 8002584:	4618      	mov	r0, r3
 8002586:	f004 f913 	bl	80067b0 <xTaskDelayUntil>
		if (gps_data.valid_status == 1) {
 800258a:	e7e5      	b.n	8002558 <led_green_handler+0x10>
 800258c:	200002f0 	.word	0x200002f0
 8002590:	0800aaa0 	.word	0x0800aaa0
 8002594:	40020c00 	.word	0x40020c00

08002598 <led_orange_handler>:
	}
}

// Orange LED
static void led_orange_handler(void* parameters)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80025a0:	f004 fa96 	bl	8006ad0 <xTaskGetTickCount>
 80025a4:	4603      	mov	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80025a8:	4808      	ldr	r0, [pc, #32]	@ (80025cc <led_orange_handler+0x34>)
 80025aa:	f008 f909 	bl	800a7c0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 80025ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025b2:	4807      	ldr	r0, [pc, #28]	@ (80025d0 <led_orange_handler+0x38>)
 80025b4:	f000 fdd1 	bl	800315a <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(600)); // 400ms
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 f8f5 	bl	80067b0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80025c6:	bf00      	nop
 80025c8:	e7ee      	b.n	80025a8 <led_orange_handler+0x10>
 80025ca:	bf00      	nop
 80025cc:	0800aab4 	.word	0x0800aab4
 80025d0:	40020c00 	.word	0x40020c00

080025d4 <led_red_handler>:
	}
}

// Red LED
static void led_red_handler(void* parameters)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80025dc:	f004 fa78 	bl	8006ad0 <xTaskGetTickCount>
 80025e0:	4603      	mov	r3, r0
 80025e2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		if (gps_data.valid_status != 1) {
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <led_red_handler+0x44>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d008      	beq.n	80025fe <led_red_handler+0x2a>
		    SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80025ec:	480b      	ldr	r0, [pc, #44]	@ (800261c <led_red_handler+0x48>)
 80025ee:	f008 f8e7 	bl	800a7c0 <SEGGER_SYSVIEW_PrintfTarget>
		    HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80025f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025f6:	480a      	ldr	r0, [pc, #40]	@ (8002620 <led_red_handler+0x4c>)
 80025f8:	f000 fdaf 	bl	800315a <HAL_GPIO_TogglePin>
 80025fc:	e005      	b.n	800260a <led_red_handler+0x36>
		} else {
		    HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_RESET); // Red LED off
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002604:	4806      	ldr	r0, [pc, #24]	@ (8002620 <led_red_handler+0x4c>)
 8002606:	f000 fd8f 	bl	8003128 <HAL_GPIO_WritePin>
		}

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(200)); // 400ms
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	21c8      	movs	r1, #200	@ 0xc8
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f8cd 	bl	80067b0 <xTaskDelayUntil>
		if (gps_data.valid_status != 1) {
 8002616:	e7e5      	b.n	80025e4 <led_red_handler+0x10>
 8002618:	200002f0 	.word	0x200002f0
 800261c:	0800aac8 	.word	0x0800aac8
 8002620:	40020c00 	.word	0x40020c00

08002624 <lcd_task_handler>:


#define TEST_MSG 0
// LCD screen
static void lcd_task_handler(void* parameters)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 800262c:	f004 fa50 	bl	8006ad0 <xTaskGetTickCount>
 8002630:	4603      	mov	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LCD screen output.");
 8002634:	481a      	ldr	r0, [pc, #104]	@ (80026a0 <lcd_task_handler+0x7c>)
 8002636:	f008 f8c3 	bl	800a7c0 <SEGGER_SYSVIEW_PrintfTarget>

		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <lcd_task_handler+0x80>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fc7e 	bl	8005f44 <xQueueSemaphoreTake>
#if TEST_MSG
		//LCD_Send_String(gps_raw_data);
		LCD_Display_Long_Message(gps_raw_data);

#else
		if (gps_data.valid_status == 1) {
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <lcd_task_handler+0x84>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d109      	bne.n	8002664 <lcd_task_handler+0x40>
		    LCD_Send_String(gps_data.longitude);
 8002650:	4816      	ldr	r0, [pc, #88]	@ (80026ac <lcd_task_handler+0x88>)
 8002652:	f7fe fcc5 	bl	8000fe0 <LCD_Send_String>
		    LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 8002656:	20c0      	movs	r0, #192	@ 0xc0
 8002658:	f7fe fc06 	bl	8000e68 <LCD_Send_Cmd>
		    LCD_Send_String(gps_data.latitude);
 800265c:	4814      	ldr	r0, [pc, #80]	@ (80026b0 <lcd_task_handler+0x8c>)
 800265e:	f7fe fcbf 	bl	8000fe0 <LCD_Send_String>
 8002662:	e008      	b.n	8002676 <lcd_task_handler+0x52>

		} else {
			// GPS data not available
			LCD_Send_String("GPS Data");
 8002664:	4813      	ldr	r0, [pc, #76]	@ (80026b4 <lcd_task_handler+0x90>)
 8002666:	f7fe fcbb 	bl	8000fe0 <LCD_Send_String>
			LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 800266a:	20c0      	movs	r0, #192	@ 0xc0
 800266c:	f7fe fbfc 	bl	8000e68 <LCD_Send_Cmd>
			LCD_Send_String("not available.");
 8002670:	4811      	ldr	r0, [pc, #68]	@ (80026b8 <lcd_task_handler+0x94>)
 8002672:	f7fe fcb5 	bl	8000fe0 <LCD_Send_String>
		}
#endif

		// Clear the gps_raw_data
		clear_GPS_buffer();
 8002676:	f000 f89f 	bl	80027b8 <clear_GPS_buffer>

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // 1000ms
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002682:	4618      	mov	r0, r3
 8002684:	f004 f894 	bl	80067b0 <xTaskDelayUntil>

		xSemaphoreGive(xBinarySemaphore);
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <lcd_task_handler+0x80>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	2300      	movs	r3, #0
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	f003 fb47 	bl	8005d24 <xQueueGenericSend>

		vTaskDelete(NULL);
 8002696:	2000      	movs	r0, #0
 8002698:	f003 ffe0 	bl	800665c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("LCD screen output.");
 800269c:	e7ca      	b.n	8002634 <lcd_task_handler+0x10>
 800269e:	bf00      	nop
 80026a0:	0800aadc 	.word	0x0800aadc
 80026a4:	20000324 	.word	0x20000324
 80026a8:	200002f0 	.word	0x200002f0
 80026ac:	20000304 	.word	0x20000304
 80026b0:	200002f4 	.word	0x200002f4
 80026b4:	0800aaf0 	.word	0x0800aaf0
 80026b8:	0800aafc 	.word	0x0800aafc

080026bc <gps_data_receive_handler>:
	}
}

// GPS data receive
static void gps_data_receive_handler(void* parameters)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    TickType_t last_wakeup_time;
    last_wakeup_time = xTaskGetTickCount();
 80026c4:	f004 fa04 	bl	8006ad0 <xTaskGetTickCount>
 80026c8:	4603      	mov	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        SEGGER_SYSVIEW_PrintfTarget("GPS data receive.");
 80026cc:	480f      	ldr	r0, [pc, #60]	@ (800270c <gps_data_receive_handler+0x50>)
 80026ce:	f008 f877 	bl	800a7c0 <SEGGER_SYSVIEW_PrintfTarget>

        xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <gps_data_receive_handler+0x54>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fc32 	bl	8005f44 <xQueueSemaphoreTake>

        // Enable UART interrupt reception
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_char, 1);
 80026e0:	2201      	movs	r2, #1
 80026e2:	490c      	ldr	r1, [pc, #48]	@ (8002714 <gps_data_receive_handler+0x58>)
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <gps_data_receive_handler+0x5c>)
 80026e6:	f002 fa18 	bl	8004b1a <HAL_UART_Receive_IT>

        xSemaphoreGive(xBinarySemaphore);
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <gps_data_receive_handler+0x54>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	f003 fb16 	bl	8005d24 <xQueueGenericSend>

        vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // 1000ms
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002700:	4618      	mov	r0, r3
 8002702:	f004 f855 	bl	80067b0 <xTaskDelayUntil>
        SEGGER_SYSVIEW_PrintfTarget("GPS data receive.");
 8002706:	bf00      	nop
 8002708:	e7e0      	b.n	80026cc <gps_data_receive_handler+0x10>
 800270a:	bf00      	nop
 800270c:	0800ab0c 	.word	0x0800ab0c
 8002710:	20000324 	.word	0x20000324
 8002714:	200002ec 	.word	0x200002ec
 8002718:	200001a8 	.word	0x200001a8

0800271c <gps_data_process_handler>:
    }
}

//GPS data process
static void gps_data_process_handler(void* parameters)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8002724:	f004 f9d4 	bl	8006ad0 <xTaskGetTickCount>
 8002728:	4603      	mov	r3, r0
 800272a:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("GPS data process.");
 800272c:	4808      	ldr	r0, [pc, #32]	@ (8002750 <gps_data_process_handler+0x34>)
 800272e:	f008 f847 	bl	800a7c0 <SEGGER_SYSVIEW_PrintfTarget>

		gps_data_struct *gps_data_prt = &gps_data;
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <gps_data_process_handler+0x38>)
 8002734:	60fb      	str	r3, [r7, #12]

		// Extraction the GPS data.
		gps_data_extrac(gps_data_prt, gps_raw_data);
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <gps_data_process_handler+0x3c>)
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7fe fc67 	bl	800100c <gps_data_extrac>

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400)); // 400ms
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002746:	4618      	mov	r0, r3
 8002748:	f004 f832 	bl	80067b0 <xTaskDelayUntil>
	{
 800274c:	bf00      	nop
 800274e:	e7ed      	b.n	800272c <gps_data_process_handler+0x10>
 8002750:	0800ab20 	.word	0x0800ab20
 8002754:	200002f0 	.word	0x200002f0
 8002758:	200001e8 	.word	0x200001e8

0800275c <HAL_UART_RxCpltCallback>:
}


/* Callback for UART receive interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0e      	ldr	r2, [pc, #56]	@ (80027a4 <HAL_UART_RxCpltCallback+0x48>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d115      	bne.n	800279a <HAL_UART_RxCpltCallback+0x3e>
		if (gps_raw_index < GPS_DATA_LENGTH) {
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <HAL_UART_RxCpltCallback+0x4c>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	2bff      	cmp	r3, #255	@ 0xff
 8002776:	d80b      	bhi.n	8002790 <HAL_UART_RxCpltCallback+0x34>
		    gps_raw_data[gps_raw_index++] = rx_char;
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_UART_RxCpltCallback+0x4c>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	b291      	uxth	r1, r2
 8002782:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <HAL_UART_RxCpltCallback+0x4c>)
 8002784:	8011      	strh	r1, [r2, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_UART_RxCpltCallback+0x50>)
 800278a:	7819      	ldrb	r1, [r3, #0]
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_UART_RxCpltCallback+0x54>)
 800278e:	5499      	strb	r1, [r3, r2]
		}
	    //gps_raw_data[gps_raw_index] = '\0'; // End with '\0'

	    // Receive next byte
	    HAL_UART_Receive_IT(&huart3, &rx_char, 1);
 8002790:	2201      	movs	r2, #1
 8002792:	4906      	ldr	r1, [pc, #24]	@ (80027ac <HAL_UART_RxCpltCallback+0x50>)
 8002794:	4807      	ldr	r0, [pc, #28]	@ (80027b4 <HAL_UART_RxCpltCallback+0x58>)
 8002796:	f002 f9c0 	bl	8004b1a <HAL_UART_Receive_IT>
    }
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40004800 	.word	0x40004800
 80027a8:	200002ea 	.word	0x200002ea
 80027ac:	200002ec 	.word	0x200002ec
 80027b0:	200001e8 	.word	0x200001e8
 80027b4:	200001a8 	.word	0x200001a8

080027b8 <clear_GPS_buffer>:

/* Clear GPS data buffer */
void clear_GPS_buffer(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
    // memset(gps_raw_data, 0, sizeof(gps_raw_data));
    gps_raw_index = 0;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <clear_GPS_buffer+0x14>)
 80027be:	2200      	movs	r2, #0
 80027c0:	801a      	strh	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	200002ea 	.word	0x200002ea

080027d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027e2:	f000 f9bd 	bl	8002b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40001000 	.word	0x40001000

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_MspInit+0x4c>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	4a0f      	ldr	r2, [pc, #60]	@ (8002850 <HAL_MspInit+0x4c>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002818:	6453      	str	r3, [r2, #68]	@ 0x44
 800281a:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <HAL_MspInit+0x4c>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_MspInit+0x4c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a08      	ldr	r2, [pc, #32]	@ (8002850 <HAL_MspInit+0x4c>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_MspInit+0x4c>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8002842:	f004 ffab 	bl	800779c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	@ 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <HAL_I2C_MspInit+0x84>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d12b      	bne.n	80028ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <HAL_I2C_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a17      	ldr	r2, [pc, #92]	@ (80028dc <HAL_I2C_MspInit+0x88>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <HAL_I2C_MspInit+0x88>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002892:	23c0      	movs	r3, #192	@ 0xc0
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002896:	2312      	movs	r3, #18
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028a2:	2304      	movs	r3, #4
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <HAL_I2C_MspInit+0x8c>)
 80028ae:	f000 fa9f 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_I2C_MspInit+0x88>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	4a08      	ldr	r2, [pc, #32]	@ (80028dc <HAL_I2C_MspInit+0x88>)
 80028bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_I2C_MspInit+0x88>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	@ 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40005400 	.word	0x40005400
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020400 	.word	0x40020400

080028e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <HAL_UART_MspInit+0x94>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d134      	bne.n	8002970 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <HAL_UART_MspInit+0x98>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	4a1b      	ldr	r2, [pc, #108]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002914:	6413      	str	r3, [r2, #64]	@ 0x40
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4a14      	ldr	r2, [pc, #80]	@ (800297c <HAL_UART_MspInit+0x98>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800293e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002950:	2307      	movs	r3, #7
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4809      	ldr	r0, [pc, #36]	@ (8002980 <HAL_UART_MspInit+0x9c>)
 800295c:	f000 fa48 	bl	8002df0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2027      	movs	r0, #39	@ 0x27
 8002966:	f000 f9f7 	bl	8002d58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800296a:	2027      	movs	r0, #39	@ 0x27
 800296c:	f000 fa10 	bl	8002d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	@ 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40004800 	.word	0x40004800
 800297c:	40023800 	.word	0x40023800
 8002980:	40020c00 	.word	0x40020c00

08002984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08c      	sub	sp, #48	@ 0x30
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002994:	2200      	movs	r2, #0
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	2036      	movs	r0, #54	@ 0x36
 800299a:	f000 f9dd 	bl	8002d58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800299e:	2036      	movs	r0, #54	@ 0x36
 80029a0:	f000 f9f6 	bl	8002d90 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a28 <HAL_InitTick+0xa4>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002a28 <HAL_InitTick+0xa4>)
 80029ae:	f043 0310 	orr.w	r3, r3, #16
 80029b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a28 <HAL_InitTick+0xa4>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029c0:	f107 0210 	add.w	r2, r7, #16
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 fde8 	bl	80045a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029d0:	f001 fdbe 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80029d4:	4603      	mov	r3, r0
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <HAL_InitTick+0xa8>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	3b01      	subs	r3, #1
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_InitTick+0xac>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	@ (8002a34 <HAL_InitTick+0xb0>)
 80029ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_InitTick+0xac>)
 80029f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a30 <HAL_InitTick+0xac>)
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <HAL_InitTick+0xac>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a02:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_InitTick+0xac>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a08:	4809      	ldr	r0, [pc, #36]	@ (8002a30 <HAL_InitTick+0xac>)
 8002a0a:	f001 fdfb 	bl	8004604 <HAL_TIM_Base_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a14:	4806      	ldr	r0, [pc, #24]	@ (8002a30 <HAL_InitTick+0xac>)
 8002a16:	f001 fe2a 	bl	800466e <HAL_TIM_Base_Start_IT>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	e000      	b.n	8002a20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3730      	adds	r7, #48	@ 0x30
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	431bde83 	.word	0x431bde83
 8002a30:	20000328 	.word	0x20000328
 8002a34:	40001000 	.word	0x40001000

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4a:	bf00      	nop
 8002a4c:	e7fd      	b.n	8002a4a <HardFault_Handler+0x4>

08002a4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <MemManage_Handler+0x4>

08002a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a5a:	bf00      	nop
 8002a5c:	e7fd      	b.n	8002a5a <BusFault_Handler+0x4>

08002a5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a62:	bf00      	nop
 8002a64:	e7fd      	b.n	8002a62 <UsageFault_Handler+0x4>

08002a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <USART3_IRQHandler+0x10>)
 8002a7a:	f002 f8a3 	bl	8004bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200001a8 	.word	0x200001a8

08002a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <TIM6_DAC_IRQHandler+0x10>)
 8002a8e:	f001 fe12 	bl	80046b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000328 	.word	0x20000328

08002a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <SystemInit+0x28>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <SystemInit+0x28>)
 8002aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <SystemInit+0x28>)
 8002ab2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ab6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ace:	e003      	b.n	8002ad8 <LoopCopyDataInit>

08002ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ad6:	3104      	adds	r1, #4

08002ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ad8:	480b      	ldr	r0, [pc, #44]	@ (8002b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ada:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ae0:	d3f6      	bcc.n	8002ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ae4:	e002      	b.n	8002aec <LoopFillZerobss>

08002ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ae8:	f842 3b04 	str.w	r3, [r2], #4

08002aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002af0:	d3f9      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002af2:	f7ff ffd3 	bl	8002a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af6:	f007 ff39 	bl	800a96c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afa:	f7ff fa23 	bl	8001f44 <main>
  bx  lr    
 8002afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b04:	0800adc8 	.word	0x0800adc8
  ldr  r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b0c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002b10:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8002b14:	2001ab18 	.word	0x2001ab18

08002b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC_IRQHandler>
	...

08002b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b20:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <HAL_Init+0x40>)
 8002b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <HAL_Init+0x40>)
 8002b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_Init+0x40>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b44:	2003      	movs	r0, #3
 8002b46:	f000 f8fc 	bl	8002d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff ff1a 	bl	8002984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b50:	f7ff fe58 	bl	8002804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023c00 	.word	0x40023c00

08002b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_IncTick+0x20>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_IncTick+0x24>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <HAL_IncTick+0x24>)
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000008 	.word	0x20000008
 8002b84:	20000368 	.word	0x20000368

08002b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <HAL_GetTick+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000368 	.word	0x20000368

08002ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff ffee 	bl	8002b88 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bb8:	d005      	beq.n	8002bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bba:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <HAL_Delay+0x44>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bc6:	bf00      	nop
 8002bc8:	f7ff ffde 	bl	8002b88 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f7      	bhi.n	8002bc8 <HAL_Delay+0x28>
  {
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000008 	.word	0x20000008

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff4c 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6a:	f7ff ff61 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	6978      	ldr	r0, [r7, #20]
 8002d76:	f7ff ffb1 	bl	8002cdc <NVIC_EncodePriority>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff80 	bl	8002c88 <__NVIC_SetPriority>
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff54 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d004      	beq.n	8002dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2280      	movs	r2, #128	@ 0x80
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00c      	b.n	8002de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	e16b      	b.n	80030e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	f040 815a 	bne.w	80030de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d00b      	beq.n	8002e4a <HAL_GPIO_Init+0x5a>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e3e:	2b11      	cmp	r3, #17
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b12      	cmp	r3, #18
 8002e48:	d130      	bne.n	8002eac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	2203      	movs	r2, #3
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e80:	2201      	movs	r2, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 0201 	and.w	r2, r3, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0xfc>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b12      	cmp	r3, #18
 8002eea:	d123      	bne.n	8002f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	08da      	lsrs	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	220f      	movs	r2, #15
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	08da      	lsrs	r2, r3, #3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3208      	adds	r2, #8
 8002f2e:	69b9      	ldr	r1, [r7, #24]
 8002f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0203 	and.w	r2, r3, #3
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80b4 	beq.w	80030de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b60      	ldr	r3, [pc, #384]	@ (80030fc <HAL_GPIO_Init+0x30c>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	4a5f      	ldr	r2, [pc, #380]	@ (80030fc <HAL_GPIO_Init+0x30c>)
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f86:	4b5d      	ldr	r3, [pc, #372]	@ (80030fc <HAL_GPIO_Init+0x30c>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f92:	4a5b      	ldr	r2, [pc, #364]	@ (8003100 <HAL_GPIO_Init+0x310>)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_GPIO_Init+0x314>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02b      	beq.n	8003016 <HAL_GPIO_Init+0x226>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a51      	ldr	r2, [pc, #324]	@ (8003108 <HAL_GPIO_Init+0x318>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d025      	beq.n	8003012 <HAL_GPIO_Init+0x222>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a50      	ldr	r2, [pc, #320]	@ (800310c <HAL_GPIO_Init+0x31c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <HAL_GPIO_Init+0x21e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8003110 <HAL_GPIO_Init+0x320>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d019      	beq.n	800300a <HAL_GPIO_Init+0x21a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4e      	ldr	r2, [pc, #312]	@ (8003114 <HAL_GPIO_Init+0x324>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_GPIO_Init+0x216>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8003118 <HAL_GPIO_Init+0x328>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00d      	beq.n	8003002 <HAL_GPIO_Init+0x212>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4c      	ldr	r2, [pc, #304]	@ (800311c <HAL_GPIO_Init+0x32c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d007      	beq.n	8002ffe <HAL_GPIO_Init+0x20e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8003120 <HAL_GPIO_Init+0x330>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_GPIO_Init+0x20a>
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	e00e      	b.n	8003018 <HAL_GPIO_Init+0x228>
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	e00c      	b.n	8003018 <HAL_GPIO_Init+0x228>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e00a      	b.n	8003018 <HAL_GPIO_Init+0x228>
 8003002:	2305      	movs	r3, #5
 8003004:	e008      	b.n	8003018 <HAL_GPIO_Init+0x228>
 8003006:	2304      	movs	r3, #4
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x228>
 800300a:	2303      	movs	r3, #3
 800300c:	e004      	b.n	8003018 <HAL_GPIO_Init+0x228>
 800300e:	2302      	movs	r3, #2
 8003010:	e002      	b.n	8003018 <HAL_GPIO_Init+0x228>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_GPIO_Init+0x228>
 8003016:	2300      	movs	r3, #0
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f002 0203 	and.w	r2, r2, #3
 800301e:	0092      	lsls	r2, r2, #2
 8003020:	4093      	lsls	r3, r2
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003028:	4935      	ldr	r1, [pc, #212]	@ (8003100 <HAL_GPIO_Init+0x310>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_GPIO_Init+0x334>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800305a:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <HAL_GPIO_Init+0x334>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003060:	4b30      	ldr	r3, [pc, #192]	@ (8003124 <HAL_GPIO_Init+0x334>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003084:	4a27      	ldr	r2, [pc, #156]	@ (8003124 <HAL_GPIO_Init+0x334>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308a:	4b26      	ldr	r3, [pc, #152]	@ (8003124 <HAL_GPIO_Init+0x334>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_GPIO_Init+0x334>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_GPIO_Init+0x334>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d8:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <HAL_GPIO_Init+0x334>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3301      	adds	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	f67f ae90 	bls.w	8002e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3724      	adds	r7, #36	@ 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40013800 	.word	0x40013800
 8003104:	40020000 	.word	0x40020000
 8003108:	40020400 	.word	0x40020400
 800310c:	40020800 	.word	0x40020800
 8003110:	40020c00 	.word	0x40020c00
 8003114:	40021000 	.word	0x40021000
 8003118:	40021400 	.word	0x40021400
 800311c:	40021800 	.word	0x40021800
 8003120:	40021c00 	.word	0x40021c00
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	401a      	ands	r2, r3
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	429a      	cmp	r2, r3
 8003172:	d104      	bne.n	800317e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	041a      	lsls	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800317c:	e002      	b.n	8003184 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e12b      	b.n	80033fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fb4c 	bl	8002854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	@ 0x24
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f4:	f001 f9ac 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80031f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a81      	ldr	r2, [pc, #516]	@ (8003404 <HAL_I2C_Init+0x274>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d807      	bhi.n	8003214 <HAL_I2C_Init+0x84>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a80      	ldr	r2, [pc, #512]	@ (8003408 <HAL_I2C_Init+0x278>)
 8003208:	4293      	cmp	r3, r2
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e006      	b.n	8003222 <HAL_I2C_Init+0x92>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a7d      	ldr	r2, [pc, #500]	@ (800340c <HAL_I2C_Init+0x27c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	bf94      	ite	ls
 800321c:	2301      	movls	r3, #1
 800321e:	2300      	movhi	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0e7      	b.n	80033fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a78      	ldr	r2, [pc, #480]	@ (8003410 <HAL_I2C_Init+0x280>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9b      	lsrs	r3, r3, #18
 8003234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a6a      	ldr	r2, [pc, #424]	@ (8003404 <HAL_I2C_Init+0x274>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d802      	bhi.n	8003264 <HAL_I2C_Init+0xd4>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3301      	adds	r3, #1
 8003262:	e009      	b.n	8003278 <HAL_I2C_Init+0xe8>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	4a69      	ldr	r2, [pc, #420]	@ (8003414 <HAL_I2C_Init+0x284>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	3301      	adds	r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800328a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	495c      	ldr	r1, [pc, #368]	@ (8003404 <HAL_I2C_Init+0x274>)
 8003294:	428b      	cmp	r3, r1
 8003296:	d819      	bhi.n	80032cc <HAL_I2C_Init+0x13c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e59      	subs	r1, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032ac:	400b      	ands	r3, r1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_I2C_Init+0x138>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e59      	subs	r1, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	e051      	b.n	800336c <HAL_I2C_Init+0x1dc>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e04f      	b.n	800336c <HAL_I2C_Init+0x1dc>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d111      	bne.n	80032f8 <HAL_I2C_Init+0x168>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e58      	subs	r0, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	440b      	add	r3, r1
 80032e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e012      	b.n	800331e <HAL_I2C_Init+0x18e>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	0099      	lsls	r1, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	fbb0 f3f3 	udiv	r3, r0, r3
 800330e:	3301      	adds	r3, #1
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x196>
 8003322:	2301      	movs	r3, #1
 8003324:	e022      	b.n	800336c <HAL_I2C_Init+0x1dc>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <HAL_I2C_Init+0x1bc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1e58      	subs	r0, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	440b      	add	r3, r1
 800333c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334a:	e00f      	b.n	800336c <HAL_I2C_Init+0x1dc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	0099      	lsls	r1, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	6809      	ldr	r1, [r1, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800339a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6911      	ldr	r1, [r2, #16]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	000186a0 	.word	0x000186a0
 8003408:	001e847f 	.word	0x001e847f
 800340c:	003d08ff 	.word	0x003d08ff
 8003410:	431bde83 	.word	0x431bde83
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	460b      	mov	r3, r1
 8003426:	817b      	strh	r3, [r7, #10]
 8003428:	4613      	mov	r3, r2
 800342a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff fbac 	bl	8002b88 <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	f040 80e0 	bne.w	8003600 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2319      	movs	r3, #25
 8003446:	2201      	movs	r2, #1
 8003448:	4970      	ldr	r1, [pc, #448]	@ (800360c <HAL_I2C_Master_Transmit+0x1f4>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa92 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
 8003458:	e0d3      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2C_Master_Transmit+0x50>
 8003464:	2302      	movs	r3, #2
 8003466:	e0cc      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d007      	beq.n	800348e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800349c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2221      	movs	r2, #33	@ 0x21
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2210      	movs	r2, #16
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	893a      	ldrh	r2, [r7, #8]
 80034be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a50      	ldr	r2, [pc, #320]	@ (8003610 <HAL_I2C_Master_Transmit+0x1f8>)
 80034ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d0:	8979      	ldrh	r1, [r7, #10]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f9ca 	bl	8003870 <I2C_MasterRequestWrite>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e08d      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034fc:	e066      	b.n	80035cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fb0c 	bl	8003b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06b      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d11b      	bne.n	80035a0 <HAL_I2C_Master_Transmit+0x188>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d017      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	6a39      	ldr	r1, [r7, #32]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fafc 	bl	8003ba2 <I2C_WaitOnBTFFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d107      	bne.n	80035c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e01a      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d194      	bne.n	80034fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	00100002 	.word	0x00100002
 8003610:	ffff0000 	.word	0xffff0000

08003614 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	@ 0x28
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7ff fab0 	bl	8002b88 <HAL_GetTick>
 8003628:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	f040 8110 	bne.w	800385c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2319      	movs	r3, #25
 8003642:	2201      	movs	r2, #1
 8003644:	4988      	ldr	r1, [pc, #544]	@ (8003868 <HAL_I2C_IsDeviceReady+0x254>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f994 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	e103      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_I2C_IsDeviceReady+0x50>
 8003660:	2302      	movs	r3, #2
 8003662:	e0fc      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d007      	beq.n	800368a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2224      	movs	r2, #36	@ 0x24
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a70      	ldr	r2, [pc, #448]	@ (800386c <HAL_I2C_IsDeviceReady+0x258>)
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f952 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0b6      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036fe:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003700:	f7ff fa42 	bl	8002b88 <HAL_GetTick>
 8003704:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003734:	e025      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7ff fa27 	bl	8002b88 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <HAL_I2C_IsDeviceReady+0x138>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22a0      	movs	r2, #160	@ 0xa0
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	bf0c      	ite	eq
 8003762:	2301      	moveq	r3, #1
 8003764:	2300      	movne	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2ba0      	cmp	r3, #160	@ 0xa0
 800378c:	d005      	beq.n	800379a <HAL_I2C_IsDeviceReady+0x186>
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_I2C_IsDeviceReady+0x186>
 8003794:	7dbb      	ldrb	r3, [r7, #22]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0cd      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d129      	bne.n	8003804 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037be:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2319      	movs	r3, #25
 80037dc:	2201      	movs	r2, #1
 80037de:	4922      	ldr	r1, [pc, #136]	@ (8003868 <HAL_I2C_IsDeviceReady+0x254>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f8c7 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e036      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e02c      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003812:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800381c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2319      	movs	r3, #25
 8003824:	2201      	movs	r2, #1
 8003826:	4910      	ldr	r1, [pc, #64]	@ (8003868 <HAL_I2C_IsDeviceReady+0x254>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f8a3 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e012      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	3301      	adds	r3, #1
 800383c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	f4ff af33 	bcc.w	80036ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	00100002 	.word	0x00100002
 800386c:	ffff0000 	.word	0xffff0000

08003870 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d006      	beq.n	800389a <I2C_MasterRequestWrite+0x2a>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d003      	beq.n	800389a <I2C_MasterRequestWrite+0x2a>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003898:	d108      	bne.n	80038ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e00b      	b.n	80038c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	2b12      	cmp	r3, #18
 80038b2:	d107      	bne.n	80038c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f84f 	bl	8003974 <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e035      	b.n	8003962 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038fe:	d108      	bne.n	8003912 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003900:	897b      	ldrh	r3, [r7, #10]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800390e:	611a      	str	r2, [r3, #16]
 8003910:	e01b      	b.n	800394a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	11db      	asrs	r3, r3, #7
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 0306 	and.w	r3, r3, #6
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f063 030f 	orn	r3, r3, #15
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	490f      	ldr	r1, [pc, #60]	@ (800396c <I2C_MasterRequestWrite+0xfc>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f876 	bl	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e010      	b.n	8003962 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003940:	897b      	ldrh	r3, [r7, #10]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4908      	ldr	r1, [pc, #32]	@ (8003970 <I2C_MasterRequestWrite+0x100>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f866 	bl	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	00010008 	.word	0x00010008
 8003970:	00010002 	.word	0x00010002

08003974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	e025      	b.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7ff f8fb 	bl	8002b88 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e023      	b.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10d      	bne.n	80039f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	e00c      	b.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0b6      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a30:	e051      	b.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a40:	d123      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e046      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a90:	d021      	beq.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7ff f879 	bl	8002b88 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e020      	b.n	8003b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e00b      	b.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d18d      	bne.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2c:	e02d      	b.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f878 	bl	8003c24 <I2C_IsAcknowledgeFailed>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e02d      	b.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b44:	d021      	beq.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7ff f81f 	bl	8002b88 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f043 0220 	orr.w	r2, r3, #32
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b94:	2b80      	cmp	r3, #128	@ 0x80
 8003b96:	d1ca      	bne.n	8003b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bae:	e02d      	b.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f837 	bl	8003c24 <I2C_IsAcknowledgeFailed>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e02d      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bc6:	d021      	beq.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc8:	f7fe ffde 	bl	8002b88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e007      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d1ca      	bne.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3a:	d11b      	bne.n	8003c74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0204 	orr.w	r2, r3, #4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e25e      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b82      	ldr	r3, [pc, #520]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e239      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b76      	ldr	r3, [pc, #472]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a75      	ldr	r2, [pc, #468]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b70      	ldr	r3, [pc, #448]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b69      	ldr	r3, [pc, #420]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe ff24 	bl	8002b88 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fe ff20 	bl	8002b88 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	@ 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1fe      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe ff10 	bl	8002b88 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe ff0c 	bl	8002b88 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1ea      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b44      	ldr	r3, [pc, #272]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1be      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4937      	ldr	r1, [pc, #220]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fec5 	bl	8002b88 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fe fec1 	bl	8002b88 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e19f      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4925      	ldr	r1, [pc, #148]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fea4 	bl	8002b88 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe fea0 	bl	8002b88 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e17e      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fe84 	bl	8002b88 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fe fe80 	bl	8002b88 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e15e      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e01b      	b.n	8003edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe fe6d 	bl	8002b88 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fe69 	bl	8002b88 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d907      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e147      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ea      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b81      	ldr	r3, [pc, #516]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b7d      	ldr	r3, [pc, #500]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a7c      	ldr	r2, [pc, #496]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b77      	ldr	r3, [pc, #476]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b74      	ldr	r3, [pc, #464]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fe29 	bl	8002b88 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe fe25 	bl	8002b88 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e103      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
 8003f60:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a63      	ldr	r2, [pc, #396]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
 8003f76:	4b5f      	ldr	r3, [pc, #380]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b5c      	ldr	r3, [pc, #368]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a5b      	ldr	r2, [pc, #364]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f90:	4b58      	ldr	r3, [pc, #352]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a57      	ldr	r2, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a54      	ldr	r2, [pc, #336]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe fdea 	bl	8002b88 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fde6 	bl	8002b88 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0c2      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b49      	ldr	r3, [pc, #292]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fdd4 	bl	8002b88 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fdd0 	bl	8002b88 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0ac      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	4a38      	ldr	r2, [pc, #224]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8098 	beq.w	8004152 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004022:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d05c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d141      	bne.n	80040ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b31      	ldr	r3, [pc, #196]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe fda4 	bl	8002b88 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fda0 	bl	8002b88 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e07e      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	491b      	ldr	r1, [pc, #108]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe fd79 	bl	8002b88 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe fd75 	bl	8002b88 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e053      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x416>
 80040b8:	e04b      	b.n	8004152 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fd62 	bl	8002b88 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fd5e 	bl	8002b88 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e03c      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x444>
 80040e6:	e034      	b.n	8004152 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e02f      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004100:	4b16      	ldr	r3, [pc, #88]	@ (800415c <HAL_RCC_OscConfig+0x4d8>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	429a      	cmp	r2, r3
 8004112:	d11c      	bne.n	800414e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d115      	bne.n	800414e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800412e:	4293      	cmp	r3, r2
 8004130:	d10d      	bne.n	800414e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0cc      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b68      	ldr	r3, [pc, #416]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d90c      	bls.n	800419c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b65      	ldr	r3, [pc, #404]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b63      	ldr	r3, [pc, #396]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b8      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b4:	4b59      	ldr	r3, [pc, #356]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a58      	ldr	r2, [pc, #352]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041cc:	4b53      	ldr	r3, [pc, #332]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a52      	ldr	r2, [pc, #328]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b50      	ldr	r3, [pc, #320]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	494d      	ldr	r1, [pc, #308]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d044      	beq.n	8004280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b47      	ldr	r3, [pc, #284]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d119      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e07f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d003      	beq.n	800421e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	2b03      	cmp	r3, #3
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b3f      	ldr	r3, [pc, #252]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e06f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b3b      	ldr	r3, [pc, #236]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e067      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b37      	ldr	r3, [pc, #220]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4934      	ldr	r1, [pc, #208]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fe fc9a 	bl	8002b88 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fe fc96 	bl	8002b88 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e04f      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b2b      	ldr	r3, [pc, #172]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d20c      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b20      	ldr	r3, [pc, #128]	@ (8004318 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e032      	b.n	800430e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b19      	ldr	r3, [pc, #100]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4916      	ldr	r1, [pc, #88]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b12      	ldr	r3, [pc, #72]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490e      	ldr	r1, [pc, #56]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042e6:	f000 f821 	bl	800432c <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490a      	ldr	r1, [pc, #40]	@ (8004320 <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a09      	ldr	r2, [pc, #36]	@ (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fb3c 	bl	8002984 <HAL_InitTick>

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40023c00 	.word	0x40023c00
 800431c:	40023800 	.word	0x40023800
 8004320:	0800ad78 	.word	0x0800ad78
 8004324:	20000000 	.word	0x20000000
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800432c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004330:	b094      	sub	sp, #80	@ 0x50
 8004332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	647b      	str	r3, [r7, #68]	@ 0x44
 8004338:	2300      	movs	r3, #0
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800433c:	2300      	movs	r3, #0
 800433e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004344:	4b79      	ldr	r3, [pc, #484]	@ (800452c <HAL_RCC_GetSysClockFreq+0x200>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	2b08      	cmp	r3, #8
 800434e:	d00d      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x40>
 8004350:	2b08      	cmp	r3, #8
 8004352:	f200 80e1 	bhi.w	8004518 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x34>
 800435a:	2b04      	cmp	r3, #4
 800435c:	d003      	beq.n	8004366 <HAL_RCC_GetSysClockFreq+0x3a>
 800435e:	e0db      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004360:	4b73      	ldr	r3, [pc, #460]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x204>)
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004364:	e0db      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004366:	4b73      	ldr	r3, [pc, #460]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x208>)
 8004368:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800436a:	e0d8      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800436c:	4b6f      	ldr	r3, [pc, #444]	@ (800452c <HAL_RCC_GetSysClockFreq+0x200>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004376:	4b6d      	ldr	r3, [pc, #436]	@ (800452c <HAL_RCC_GetSysClockFreq+0x200>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d063      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004382:	4b6a      	ldr	r3, [pc, #424]	@ (800452c <HAL_RCC_GetSysClockFreq+0x200>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	2200      	movs	r2, #0
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800438c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004394:	633b      	str	r3, [r7, #48]	@ 0x30
 8004396:	2300      	movs	r3, #0
 8004398:	637b      	str	r3, [r7, #52]	@ 0x34
 800439a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	0159      	lsls	r1, r3, #5
 80043ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b0:	0150      	lsls	r0, r2, #5
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4621      	mov	r1, r4
 80043b8:	1a51      	subs	r1, r2, r1
 80043ba:	6139      	str	r1, [r7, #16]
 80043bc:	4629      	mov	r1, r5
 80043be:	eb63 0301 	sbc.w	r3, r3, r1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d0:	4659      	mov	r1, fp
 80043d2:	018b      	lsls	r3, r1, #6
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043da:	4651      	mov	r1, sl
 80043dc:	018a      	lsls	r2, r1, #6
 80043de:	4651      	mov	r1, sl
 80043e0:	ebb2 0801 	subs.w	r8, r2, r1
 80043e4:	4659      	mov	r1, fp
 80043e6:	eb63 0901 	sbc.w	r9, r3, r1
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4623      	mov	r3, r4
 8004404:	eb18 0303 	adds.w	r3, r8, r3
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	462b      	mov	r3, r5
 800440c:	eb49 0303 	adc.w	r3, r9, r3
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800441e:	4629      	mov	r1, r5
 8004420:	024b      	lsls	r3, r1, #9
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004428:	4621      	mov	r1, r4
 800442a:	024a      	lsls	r2, r1, #9
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004432:	2200      	movs	r2, #0
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004438:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800443c:	f7fc fb60 	bl	8000b00 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004448:	e058      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4b38      	ldr	r3, [pc, #224]	@ (800452c <HAL_RCC_GetSysClockFreq+0x200>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	2200      	movs	r2, #0
 8004452:	4618      	mov	r0, r3
 8004454:	4611      	mov	r1, r2
 8004456:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	2300      	movs	r3, #0
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004460:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	f04f 0000 	mov.w	r0, #0
 800446c:	f04f 0100 	mov.w	r1, #0
 8004470:	0159      	lsls	r1, r3, #5
 8004472:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004476:	0150      	lsls	r0, r2, #5
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4641      	mov	r1, r8
 800447e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004482:	4649      	mov	r1, r9
 8004484:	eb63 0b01 	sbc.w	fp, r3, r1
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004494:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004498:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800449c:	ebb2 040a 	subs.w	r4, r2, sl
 80044a0:	eb63 050b 	sbc.w	r5, r3, fp
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	00eb      	lsls	r3, r5, #3
 80044ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b2:	00e2      	lsls	r2, r4, #3
 80044b4:	4614      	mov	r4, r2
 80044b6:	461d      	mov	r5, r3
 80044b8:	4643      	mov	r3, r8
 80044ba:	18e3      	adds	r3, r4, r3
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	464b      	mov	r3, r9
 80044c0:	eb45 0303 	adc.w	r3, r5, r3
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d2:	4629      	mov	r1, r5
 80044d4:	028b      	lsls	r3, r1, #10
 80044d6:	4621      	mov	r1, r4
 80044d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044dc:	4621      	mov	r1, r4
 80044de:	028a      	lsls	r2, r1, #10
 80044e0:	4610      	mov	r0, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e6:	2200      	movs	r2, #0
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	61fa      	str	r2, [r7, #28]
 80044ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f0:	f7fc fb06 	bl	8000b00 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4613      	mov	r3, r2
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	3301      	adds	r3, #1
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800450c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800450e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004516:	e002      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004518:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x204>)
 800451a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800451c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004520:	4618      	mov	r0, r3
 8004522:	3750      	adds	r7, #80	@ 0x50
 8004524:	46bd      	mov	sp, r7
 8004526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	00f42400 	.word	0x00f42400
 8004534:	007a1200 	.word	0x007a1200

08004538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	@ (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000000 	.word	0x20000000

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004554:	f7ff fff0 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0a9b      	lsrs	r3, r3, #10
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4903      	ldr	r1, [pc, #12]	@ (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	0800ad88 	.word	0x0800ad88

08004578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800457c:	f7ff ffdc 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0b5b      	lsrs	r3, r3, #13
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <HAL_RCC_GetPCLK2Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	0800ad88 	.word	0x0800ad88

080045a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	220f      	movs	r2, #15
 80045ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b0:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <HAL_RCC_GetClockConfig+0x5c>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0203 	and.w	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045bc:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <HAL_RCC_GetClockConfig+0x5c>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045c8:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <HAL_RCC_GetClockConfig+0x5c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045d4:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <HAL_RCC_GetClockConfig+0x5c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	08db      	lsrs	r3, r3, #3
 80045da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <HAL_RCC_GetClockConfig+0x60>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	601a      	str	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	40023c00 	.word	0x40023c00

08004604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e01d      	b.n	8004652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f815 	bl	800465a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 f968 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b06      	cmp	r3, #6
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d122      	bne.n	8004712 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d11b      	bne.n	8004712 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0202 	mvn.w	r2, #2
 80046e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8ee 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 80046fe:	e005      	b.n	800470c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8e0 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8f1 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d122      	bne.n	8004766 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d11b      	bne.n	8004766 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f06f 0204 	mvn.w	r2, #4
 8004736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8c4 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 8004752:	e005      	b.n	8004760 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8b6 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8c7 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d122      	bne.n	80047ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b08      	cmp	r3, #8
 8004780:	d11b      	bne.n	80047ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f06f 0208 	mvn.w	r2, #8
 800478a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2204      	movs	r2, #4
 8004790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f89a 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 80047a6:	e005      	b.n	80047b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f88c 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f89d 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d122      	bne.n	800480e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d11b      	bne.n	800480e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f06f 0210 	mvn.w	r2, #16
 80047de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2208      	movs	r2, #8
 80047e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f870 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 80047fa:	e005      	b.n	8004808 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f862 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f873 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10e      	bne.n	800483a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f06f 0201 	mvn.w	r2, #1
 8004832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fd ffcb 	bl	80027d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b80      	cmp	r3, #128	@ 0x80
 8004846:	d10e      	bne.n	8004866 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004852:	2b80      	cmp	r3, #128	@ 0x80
 8004854:	d107      	bne.n	8004866 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f903 	bl	8004a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b40      	cmp	r3, #64	@ 0x40
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b40      	cmp	r3, #64	@ 0x40
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f838 	bl	8004902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0220 	mvn.w	r2, #32
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8cd 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a40      	ldr	r2, [pc, #256]	@ (8004a2c <TIM_Base_SetConfig+0x114>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3d      	ldr	r2, [pc, #244]	@ (8004a30 <TIM_Base_SetConfig+0x118>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3c      	ldr	r2, [pc, #240]	@ (8004a34 <TIM_Base_SetConfig+0x11c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a38 <TIM_Base_SetConfig+0x120>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3a      	ldr	r2, [pc, #232]	@ (8004a3c <TIM_Base_SetConfig+0x124>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d108      	bne.n	800496a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a2c <TIM_Base_SetConfig+0x114>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d02b      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d027      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a30 <TIM_Base_SetConfig+0x118>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d023      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2b      	ldr	r2, [pc, #172]	@ (8004a34 <TIM_Base_SetConfig+0x11c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01f      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <TIM_Base_SetConfig+0x120>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01b      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a29      	ldr	r2, [pc, #164]	@ (8004a3c <TIM_Base_SetConfig+0x124>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d017      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a28      	ldr	r2, [pc, #160]	@ (8004a40 <TIM_Base_SetConfig+0x128>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a27      	ldr	r2, [pc, #156]	@ (8004a44 <TIM_Base_SetConfig+0x12c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a26      	ldr	r2, [pc, #152]	@ (8004a48 <TIM_Base_SetConfig+0x130>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a25      	ldr	r2, [pc, #148]	@ (8004a4c <TIM_Base_SetConfig+0x134>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a24      	ldr	r2, [pc, #144]	@ (8004a50 <TIM_Base_SetConfig+0x138>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <TIM_Base_SetConfig+0x13c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d108      	bne.n	80049dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <TIM_Base_SetConfig+0x114>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0xf8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <TIM_Base_SetConfig+0x124>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40001800 	.word	0x40001800
 8004a50:	40001c00 	.word	0x40001c00
 8004a54:	40002000 	.word	0x40002000

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e03f      	b.n	8004b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd ff1c 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	@ 0x24
 8004ab0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fab3 	bl	8005030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d140      	bne.n	8004bb6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Receive_IT+0x26>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e039      	b.n	8004bb8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Receive_IT+0x38>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e032      	b.n	8004bb8 <HAL_UART_Receive_IT+0x9e>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	88fa      	ldrh	r2, [r7, #6]
 8004b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2222      	movs	r2, #34	@ 0x22
 8004b76:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b90:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0220 	orr.w	r2, r2, #32
 8004bb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004bb6:	2302      	movs	r3, #2
  }
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_UART_IRQHandler+0x52>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f98c 	bl	8004f2c <UART_Receive_IT>
      return;
 8004c14:	e0d0      	b.n	8004db8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80b0 	beq.w	8004d7e <HAL_UART_IRQHandler+0x1ba>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_UART_IRQHandler+0x70>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a5 	beq.w	8004d7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_UART_IRQHandler+0x90>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_UART_IRQHandler+0xb0>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	f043 0202 	orr.w	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd0>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8c:	f043 0204 	orr.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00f      	beq.n	8004cbe <HAL_UART_IRQHandler+0xfa>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_UART_IRQHandler+0xee>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb6:	f043 0208 	orr.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d077      	beq.n	8004db6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x11c>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f926 	bl	8004f2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <HAL_UART_IRQHandler+0x144>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d031      	beq.n	8004d6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f86f 	bl	8004dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d123      	bne.n	8004d64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d38:	4a21      	ldr	r2, [pc, #132]	@ (8004dc0 <HAL_UART_IRQHandler+0x1fc>)
 8004d3a:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe f833 	bl	8002dac <HAL_DMA_Abort_IT>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d016      	beq.n	8004d7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d56:	4610      	mov	r0, r2
 8004d58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5a:	e00e      	b.n	8004d7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f83b 	bl	8004dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d62:	e00a      	b.n	8004d7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f837 	bl	8004dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d6a:	e006      	b.n	8004d7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f833 	bl	8004dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8004d78:	e01d      	b.n	8004db6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7a:	bf00      	nop
    return;
 8004d7c:	e01b      	b.n	8004db6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1d6>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f85c 	bl	8004e50 <UART_Transmit_IT>
    return;
 8004d98:	e00e      	b.n	8004db8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_UART_IRQHandler+0x1f4>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8a4 	bl	8004efc <UART_EndTransmit_IT>
    return;
 8004db4:	e000      	b.n	8004db8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004db6:	bf00      	nop
  }
}
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08004e29 	.word	0x08004e29

08004dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8004e02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff ffc8 	bl	8004dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b21      	cmp	r3, #33	@ 0x21
 8004e62:	d144      	bne.n	8004eee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6c:	d11a      	bne.n	8004ea4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e82:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d105      	bne.n	8004e98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]
 8004e96:	e00e      	b.n	8004eb6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]
 8004ea2:	e008      	b.n	8004eb6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6211      	str	r1, [r2, #32]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ed8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ee8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff ff51 	bl	8004dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b22      	cmp	r3, #34	@ 0x22
 8004f3e:	d171      	bne.n	8005024 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f48:	d123      	bne.n	8004f92 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10e      	bne.n	8004f76 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	1c9a      	adds	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f74:	e029      	b.n	8004fca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f90:	e01b      	b.n	8004fca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6858      	ldr	r0, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	1c59      	adds	r1, r3, #1
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6291      	str	r1, [r2, #40]	@ 0x28
 8004faa:	b2c2      	uxtb	r2, r0
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e00c      	b.n	8004fca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	1c58      	adds	r0, r3, #1
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	6288      	str	r0, [r1, #40]	@ 0x28
 8004fc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d120      	bne.n	8005020 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0220 	bic.w	r2, r2, #32
 8004fec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ffc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd fba0 	bl	800275c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e002      	b.n	8005026 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e000      	b.n	8005026 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005034:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005038:	af00      	add	r7, sp, #0
 800503a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800503e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800504a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800504e:	68d9      	ldr	r1, [r3, #12]
 8005050:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	ea40 0301 	orr.w	r3, r0, r1
 800505a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800505c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
 800506a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	431a      	orrs	r2, r3
 8005072:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 800507e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800508a:	f021 010c 	bic.w	r1, r1, #12
 800508e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8005098:	430b      	orrs	r3, r1
 800509a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800509c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	ea40 0301 	orr.w	r3, r0, r1
 80050b8:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c4:	f040 824a 	bne.w	800555c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b96      	ldr	r3, [pc, #600]	@ (8005328 <UART_SetConfig+0x2f8>)
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d006      	beq.n	80050e2 <UART_SetConfig+0xb2>
 80050d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b94      	ldr	r3, [pc, #592]	@ (800532c <UART_SetConfig+0x2fc>)
 80050dc:	429a      	cmp	r2, r3
 80050de:	f040 8129 	bne.w	8005334 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e2:	f7ff fa49 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 80050e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80050f4:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 80050f8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 80050fc:	4622      	mov	r2, r4
 80050fe:	462b      	mov	r3, r5
 8005100:	1891      	adds	r1, r2, r2
 8005102:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005106:	415b      	adcs	r3, r3
 8005108:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800510c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005110:	4621      	mov	r1, r4
 8005112:	1851      	adds	r1, r2, r1
 8005114:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8005118:	4629      	mov	r1, r5
 800511a:	414b      	adcs	r3, r1
 800511c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 800512c:	4649      	mov	r1, r9
 800512e:	00cb      	lsls	r3, r1, #3
 8005130:	4641      	mov	r1, r8
 8005132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005136:	4641      	mov	r1, r8
 8005138:	00ca      	lsls	r2, r1, #3
 800513a:	4610      	mov	r0, r2
 800513c:	4619      	mov	r1, r3
 800513e:	4603      	mov	r3, r0
 8005140:	4622      	mov	r2, r4
 8005142:	189b      	adds	r3, r3, r2
 8005144:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8005148:	462b      	mov	r3, r5
 800514a:	460a      	mov	r2, r1
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8005154:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005160:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8005164:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8005168:	460b      	mov	r3, r1
 800516a:	18db      	adds	r3, r3, r3
 800516c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005170:	4613      	mov	r3, r2
 8005172:	eb42 0303 	adc.w	r3, r2, r3
 8005176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800517a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800517e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8005182:	f7fb fcbd 	bl	8000b00 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4b69      	ldr	r3, [pc, #420]	@ (8005330 <UART_SetConfig+0x300>)
 800518c:	fba3 2302 	umull	r2, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	011c      	lsls	r4, r3, #4
 8005194:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005198:	2200      	movs	r2, #0
 800519a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800519e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80051a2:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 80051a6:	4642      	mov	r2, r8
 80051a8:	464b      	mov	r3, r9
 80051aa:	1891      	adds	r1, r2, r2
 80051ac:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80051b0:	415b      	adcs	r3, r3
 80051b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051b6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80051ba:	4641      	mov	r1, r8
 80051bc:	1851      	adds	r1, r2, r1
 80051be:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80051c2:	4649      	mov	r1, r9
 80051c4:	414b      	adcs	r3, r1
 80051c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 80051d6:	4659      	mov	r1, fp
 80051d8:	00cb      	lsls	r3, r1, #3
 80051da:	4651      	mov	r1, sl
 80051dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051e0:	4651      	mov	r1, sl
 80051e2:	00ca      	lsls	r2, r1, #3
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	4603      	mov	r3, r0
 80051ea:	4642      	mov	r2, r8
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80051f2:	464b      	mov	r3, r9
 80051f4:	460a      	mov	r2, r1
 80051f6:	eb42 0303 	adc.w	r3, r2, r3
 80051fa:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80051fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800520a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 800520e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8005212:	460b      	mov	r3, r1
 8005214:	18db      	adds	r3, r3, r3
 8005216:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800521a:	4613      	mov	r3, r2
 800521c:	eb42 0303 	adc.w	r3, r2, r3
 8005220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005224:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005228:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 800522c:	f7fb fc68 	bl	8000b00 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4611      	mov	r1, r2
 8005236:	4b3e      	ldr	r3, [pc, #248]	@ (8005330 <UART_SetConfig+0x300>)
 8005238:	fba3 2301 	umull	r2, r3, r3, r1
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	2264      	movs	r2, #100	@ 0x64
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	1acb      	subs	r3, r1, r3
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800524c:	4b38      	ldr	r3, [pc, #224]	@ (8005330 <UART_SetConfig+0x300>)
 800524e:	fba3 2302 	umull	r2, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800525a:	441c      	add	r4, r3
 800525c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005266:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800526a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 800526e:	4642      	mov	r2, r8
 8005270:	464b      	mov	r3, r9
 8005272:	1891      	adds	r1, r2, r2
 8005274:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005278:	415b      	adcs	r3, r3
 800527a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800527e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005282:	4641      	mov	r1, r8
 8005284:	1851      	adds	r1, r2, r1
 8005286:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800528a:	4649      	mov	r1, r9
 800528c:	414b      	adcs	r3, r1
 800528e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 800529e:	4659      	mov	r1, fp
 80052a0:	00cb      	lsls	r3, r1, #3
 80052a2:	4651      	mov	r1, sl
 80052a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052a8:	4651      	mov	r1, sl
 80052aa:	00ca      	lsls	r2, r1, #3
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	4642      	mov	r2, r8
 80052b4:	189b      	adds	r3, r3, r2
 80052b6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80052ba:	464b      	mov	r3, r9
 80052bc:	460a      	mov	r2, r1
 80052be:	eb42 0303 	adc.w	r3, r2, r3
 80052c2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80052c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80052d2:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80052d6:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 80052da:	460b      	mov	r3, r1
 80052dc:	18db      	adds	r3, r3, r3
 80052de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052e2:	4613      	mov	r3, r2
 80052e4:	eb42 0303 	adc.w	r3, r2, r3
 80052e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80052f0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 80052f4:	f7fb fc04 	bl	8000b00 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <UART_SetConfig+0x300>)
 80052fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2164      	movs	r1, #100	@ 0x64
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	3332      	adds	r3, #50	@ 0x32
 8005310:	4a07      	ldr	r2, [pc, #28]	@ (8005330 <UART_SetConfig+0x300>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	f003 0207 	and.w	r2, r3, #7
 800531c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4422      	add	r2, r4
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	e34a      	b.n	80059be <UART_SetConfig+0x98e>
 8005328:	40011000 	.word	0x40011000
 800532c:	40011400 	.word	0x40011400
 8005330:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005334:	f7ff f90c 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005338:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800533c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8005346:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 800534a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800534e:	4622      	mov	r2, r4
 8005350:	462b      	mov	r3, r5
 8005352:	1891      	adds	r1, r2, r2
 8005354:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8005358:	415b      	adcs	r3, r3
 800535a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800535e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005362:	4621      	mov	r1, r4
 8005364:	eb12 0a01 	adds.w	sl, r2, r1
 8005368:	4629      	mov	r1, r5
 800536a:	eb43 0b01 	adc.w	fp, r3, r1
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800537a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800537e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005382:	4692      	mov	sl, r2
 8005384:	469b      	mov	fp, r3
 8005386:	4623      	mov	r3, r4
 8005388:	eb1a 0303 	adds.w	r3, sl, r3
 800538c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005390:	462b      	mov	r3, r5
 8005392:	eb4b 0303 	adc.w	r3, fp, r3
 8005396:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800539a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80053a6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80053aa:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 80053ae:	460b      	mov	r3, r1
 80053b0:	18db      	adds	r3, r3, r3
 80053b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b6:	4613      	mov	r3, r2
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80053c4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 80053c8:	f7fb fb9a 	bl	8000b00 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b61      	ldr	r3, [pc, #388]	@ (8005558 <UART_SetConfig+0x528>)
 80053d2:	fba3 2302 	umull	r2, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	011c      	lsls	r4, r3, #4
 80053da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80053e4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 80053e8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80053f4:	415b      	adcs	r3, r3
 80053f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80053fc:	4641      	mov	r1, r8
 80053fe:	1851      	adds	r1, r2, r1
 8005400:	6739      	str	r1, [r7, #112]	@ 0x70
 8005402:	4649      	mov	r1, r9
 8005404:	414b      	adcs	r3, r1
 8005406:	677b      	str	r3, [r7, #116]	@ 0x74
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 8005414:	4659      	mov	r1, fp
 8005416:	00cb      	lsls	r3, r1, #3
 8005418:	4651      	mov	r1, sl
 800541a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800541e:	4651      	mov	r1, sl
 8005420:	00ca      	lsls	r2, r1, #3
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	4603      	mov	r3, r0
 8005428:	4642      	mov	r2, r8
 800542a:	189b      	adds	r3, r3, r2
 800542c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8005430:	464b      	mov	r3, r9
 8005432:	460a      	mov	r2, r1
 8005434:	eb42 0303 	adc.w	r3, r2, r3
 8005438:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800543c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005448:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800544c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 8005450:	460b      	mov	r3, r1
 8005452:	18db      	adds	r3, r3, r3
 8005454:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005456:	4613      	mov	r3, r2
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800545e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005462:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8005466:	f7fb fb4b 	bl	8000b00 <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4611      	mov	r1, r2
 8005470:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <UART_SetConfig+0x528>)
 8005472:	fba3 2301 	umull	r2, r3, r3, r1
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2264      	movs	r2, #100	@ 0x64
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	1acb      	subs	r3, r1, r3
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005486:	4b34      	ldr	r3, [pc, #208]	@ (8005558 <UART_SetConfig+0x528>)
 8005488:	fba3 2302 	umull	r2, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005494:	441c      	add	r4, r3
 8005496:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80054a0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80054a4:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	6639      	str	r1, [r7, #96]	@ 0x60
 80054b0:	415b      	adcs	r3, r3
 80054b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80054b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80054b8:	4641      	mov	r1, r8
 80054ba:	1851      	adds	r1, r2, r1
 80054bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054be:	4649      	mov	r1, r9
 80054c0:	414b      	adcs	r3, r1
 80054c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80054d0:	4659      	mov	r1, fp
 80054d2:	00cb      	lsls	r3, r1, #3
 80054d4:	4651      	mov	r1, sl
 80054d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054da:	4651      	mov	r1, sl
 80054dc:	00ca      	lsls	r2, r1, #3
 80054de:	4610      	mov	r0, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	4642      	mov	r2, r8
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80054ec:	464b      	mov	r3, r9
 80054ee:	460a      	mov	r2, r1
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80054f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8005504:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8005508:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 800550c:	460b      	mov	r3, r1
 800550e:	18db      	adds	r3, r3, r3
 8005510:	653b      	str	r3, [r7, #80]	@ 0x50
 8005512:	4613      	mov	r3, r2
 8005514:	eb42 0303 	adc.w	r3, r2, r3
 8005518:	657b      	str	r3, [r7, #84]	@ 0x54
 800551a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800551e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8005522:	f7fb faed 	bl	8000b00 <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4b0b      	ldr	r3, [pc, #44]	@ (8005558 <UART_SetConfig+0x528>)
 800552c:	fba3 1302 	umull	r1, r3, r3, r2
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	2164      	movs	r1, #100	@ 0x64
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3332      	adds	r3, #50	@ 0x32
 800553e:	4a06      	ldr	r2, [pc, #24]	@ (8005558 <UART_SetConfig+0x528>)
 8005540:	fba2 2303 	umull	r2, r3, r2, r3
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	f003 0207 	and.w	r2, r3, #7
 800554a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4422      	add	r2, r4
 8005552:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005554:	e233      	b.n	80059be <UART_SetConfig+0x98e>
 8005556:	bf00      	nop
 8005558:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800555c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b8d      	ldr	r3, [pc, #564]	@ (8005798 <UART_SetConfig+0x768>)
 8005564:	429a      	cmp	r2, r3
 8005566:	d006      	beq.n	8005576 <UART_SetConfig+0x546>
 8005568:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b8b      	ldr	r3, [pc, #556]	@ (800579c <UART_SetConfig+0x76c>)
 8005570:	429a      	cmp	r2, r3
 8005572:	f040 8117 	bne.w	80057a4 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005576:	f7fe ffff 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 800557a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800557e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8005588:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800558c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	1891      	adds	r1, r2, r2
 8005596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005598:	415b      	adcs	r3, r3
 800559a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055a0:	4621      	mov	r1, r4
 80055a2:	eb12 0801 	adds.w	r8, r2, r1
 80055a6:	4629      	mov	r1, r5
 80055a8:	eb43 0901 	adc.w	r9, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055c0:	4690      	mov	r8, r2
 80055c2:	4699      	mov	r9, r3
 80055c4:	4623      	mov	r3, r4
 80055c6:	eb18 0303 	adds.w	r3, r8, r3
 80055ca:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80055ce:	462b      	mov	r3, r5
 80055d0:	eb49 0303 	adc.w	r3, r9, r3
 80055d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80055d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80055e4:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 80055f4:	4629      	mov	r1, r5
 80055f6:	008b      	lsls	r3, r1, #2
 80055f8:	4621      	mov	r1, r4
 80055fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fe:	4621      	mov	r1, r4
 8005600:	008a      	lsls	r2, r1, #2
 8005602:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8005606:	f7fb fa7b 	bl	8000b00 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4b64      	ldr	r3, [pc, #400]	@ (80057a0 <UART_SetConfig+0x770>)
 8005610:	fba3 2302 	umull	r2, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	011c      	lsls	r4, r3, #4
 8005618:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005622:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8005626:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 800562a:	4642      	mov	r2, r8
 800562c:	464b      	mov	r3, r9
 800562e:	1891      	adds	r1, r2, r2
 8005630:	6439      	str	r1, [r7, #64]	@ 0x40
 8005632:	415b      	adcs	r3, r3
 8005634:	647b      	str	r3, [r7, #68]	@ 0x44
 8005636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800563a:	4641      	mov	r1, r8
 800563c:	1851      	adds	r1, r2, r1
 800563e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005640:	4649      	mov	r1, r9
 8005642:	414b      	adcs	r3, r1
 8005644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 8005652:	4659      	mov	r1, fp
 8005654:	00cb      	lsls	r3, r1, #3
 8005656:	4651      	mov	r1, sl
 8005658:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565c:	4651      	mov	r1, sl
 800565e:	00ca      	lsls	r2, r1, #3
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	4603      	mov	r3, r0
 8005666:	4642      	mov	r2, r8
 8005668:	189b      	adds	r3, r3, r2
 800566a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800566e:	464b      	mov	r3, r9
 8005670:	460a      	mov	r2, r1
 8005672:	eb42 0303 	adc.w	r3, r2, r3
 8005676:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800567a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005686:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8005696:	4649      	mov	r1, r9
 8005698:	008b      	lsls	r3, r1, #2
 800569a:	4641      	mov	r1, r8
 800569c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a0:	4641      	mov	r1, r8
 80056a2:	008a      	lsls	r2, r1, #2
 80056a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80056a8:	f7fb fa2a 	bl	8000b00 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4611      	mov	r1, r2
 80056b2:	4b3b      	ldr	r3, [pc, #236]	@ (80057a0 <UART_SetConfig+0x770>)
 80056b4:	fba3 2301 	umull	r2, r3, r3, r1
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2264      	movs	r2, #100	@ 0x64
 80056bc:	fb02 f303 	mul.w	r3, r2, r3
 80056c0:	1acb      	subs	r3, r1, r3
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	3332      	adds	r3, #50	@ 0x32
 80056c6:	4a36      	ldr	r2, [pc, #216]	@ (80057a0 <UART_SetConfig+0x770>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d2:	441c      	add	r4, r3
 80056d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80056de:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80056e2:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 80056e6:	4642      	mov	r2, r8
 80056e8:	464b      	mov	r3, r9
 80056ea:	1891      	adds	r1, r2, r2
 80056ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80056ee:	415b      	adcs	r3, r3
 80056f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80056f6:	4641      	mov	r1, r8
 80056f8:	1851      	adds	r1, r2, r1
 80056fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80056fc:	4649      	mov	r1, r9
 80056fe:	414b      	adcs	r3, r1
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 800570e:	4659      	mov	r1, fp
 8005710:	00cb      	lsls	r3, r1, #3
 8005712:	4651      	mov	r1, sl
 8005714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005718:	4651      	mov	r1, sl
 800571a:	00ca      	lsls	r2, r1, #3
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	4603      	mov	r3, r0
 8005722:	4642      	mov	r2, r8
 8005724:	189b      	adds	r3, r3, r2
 8005726:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800572a:	464b      	mov	r3, r9
 800572c:	460a      	mov	r2, r1
 800572e:	eb42 0303 	adc.w	r3, r2, r3
 8005732:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005736:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005742:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 8005752:	4649      	mov	r1, r9
 8005754:	008b      	lsls	r3, r1, #2
 8005756:	4641      	mov	r1, r8
 8005758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575c:	4641      	mov	r1, r8
 800575e:	008a      	lsls	r2, r1, #2
 8005760:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8005764:	f7fb f9cc 	bl	8000b00 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <UART_SetConfig+0x770>)
 800576e:	fba3 1302 	umull	r1, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2164      	movs	r1, #100	@ 0x64
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	3332      	adds	r3, #50	@ 0x32
 8005780:	4a07      	ldr	r2, [pc, #28]	@ (80057a0 <UART_SetConfig+0x770>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4422      	add	r2, r4
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	e112      	b.n	80059be <UART_SetConfig+0x98e>
 8005798:	40011000 	.word	0x40011000
 800579c:	40011400 	.word	0x40011400
 80057a0:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fe fed4 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80057a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057b6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80057ba:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 80057be:	4642      	mov	r2, r8
 80057c0:	464b      	mov	r3, r9
 80057c2:	1891      	adds	r1, r2, r2
 80057c4:	6239      	str	r1, [r7, #32]
 80057c6:	415b      	adcs	r3, r3
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ce:	4641      	mov	r1, r8
 80057d0:	1854      	adds	r4, r2, r1
 80057d2:	4649      	mov	r1, r9
 80057d4:	eb43 0501 	adc.w	r5, r3, r1
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	00eb      	lsls	r3, r5, #3
 80057e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057e6:	00e2      	lsls	r2, r4, #3
 80057e8:	4614      	mov	r4, r2
 80057ea:	461d      	mov	r5, r3
 80057ec:	4643      	mov	r3, r8
 80057ee:	18e3      	adds	r3, r4, r3
 80057f0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80057f4:	464b      	mov	r3, r9
 80057f6:	eb45 0303 	adc.w	r3, r5, r3
 80057fa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80057fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800580a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800581a:	4629      	mov	r1, r5
 800581c:	008b      	lsls	r3, r1, #2
 800581e:	4621      	mov	r1, r4
 8005820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005824:	4621      	mov	r1, r4
 8005826:	008a      	lsls	r2, r1, #2
 8005828:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800582c:	f7fb f968 	bl	8000b00 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4b65      	ldr	r3, [pc, #404]	@ (80059cc <UART_SetConfig+0x99c>)
 8005836:	fba3 2302 	umull	r2, r3, r3, r2
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	011c      	lsls	r4, r3, #4
 800583e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005842:	2200      	movs	r2, #0
 8005844:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005848:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800584c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	1891      	adds	r1, r2, r2
 8005856:	61b9      	str	r1, [r7, #24]
 8005858:	415b      	adcs	r3, r3
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005860:	4641      	mov	r1, r8
 8005862:	1851      	adds	r1, r2, r1
 8005864:	6139      	str	r1, [r7, #16]
 8005866:	4649      	mov	r1, r9
 8005868:	414b      	adcs	r3, r1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005878:	4659      	mov	r1, fp
 800587a:	00cb      	lsls	r3, r1, #3
 800587c:	4651      	mov	r1, sl
 800587e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005882:	4651      	mov	r1, sl
 8005884:	00ca      	lsls	r2, r1, #3
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	4603      	mov	r3, r0
 800588c:	4642      	mov	r2, r8
 800588e:	189b      	adds	r3, r3, r2
 8005890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005894:	464b      	mov	r3, r9
 8005896:	460a      	mov	r2, r1
 8005898:	eb42 0303 	adc.w	r3, r2, r3
 800589c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058ac:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 80058bc:	4649      	mov	r1, r9
 80058be:	008b      	lsls	r3, r1, #2
 80058c0:	4641      	mov	r1, r8
 80058c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c6:	4641      	mov	r1, r8
 80058c8:	008a      	lsls	r2, r1, #2
 80058ca:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80058ce:	f7fb f917 	bl	8000b00 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	4b3c      	ldr	r3, [pc, #240]	@ (80059cc <UART_SetConfig+0x99c>)
 80058da:	fba3 2301 	umull	r2, r3, r3, r1
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2264      	movs	r2, #100	@ 0x64
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	3332      	adds	r3, #50	@ 0x32
 80058ec:	4a37      	ldr	r2, [pc, #220]	@ (80059cc <UART_SetConfig+0x99c>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f8:	441c      	add	r4, r3
 80058fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005904:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005908:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	1891      	adds	r1, r2, r2
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	415b      	adcs	r3, r3
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800591c:	4641      	mov	r1, r8
 800591e:	1851      	adds	r1, r2, r1
 8005920:	6039      	str	r1, [r7, #0]
 8005922:	4649      	mov	r1, r9
 8005924:	414b      	adcs	r3, r1
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005934:	4659      	mov	r1, fp
 8005936:	00cb      	lsls	r3, r1, #3
 8005938:	4651      	mov	r1, sl
 800593a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593e:	4651      	mov	r1, sl
 8005940:	00ca      	lsls	r2, r1, #3
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	4603      	mov	r3, r0
 8005948:	4642      	mov	r2, r8
 800594a:	189b      	adds	r3, r3, r2
 800594c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005950:	464b      	mov	r3, r9
 8005952:	460a      	mov	r2, r1
 8005954:	eb42 0303 	adc.w	r3, r2, r3
 8005958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800595c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005968:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005978:	4649      	mov	r1, r9
 800597a:	008b      	lsls	r3, r1, #2
 800597c:	4641      	mov	r1, r8
 800597e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005982:	4641      	mov	r1, r8
 8005984:	008a      	lsls	r2, r1, #2
 8005986:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800598a:	f7fb f8b9 	bl	8000b00 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <UART_SetConfig+0x99c>)
 8005994:	fba3 1302 	umull	r1, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2164      	movs	r1, #100	@ 0x64
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	3332      	adds	r3, #50	@ 0x32
 80059a6:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <UART_SetConfig+0x99c>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	f003 020f 	and.w	r2, r3, #15
 80059b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4422      	add	r2, r4
 80059ba:	609a      	str	r2, [r3, #8]
}
 80059bc:	e7ff      	b.n	80059be <UART_SetConfig+0x98e>
 80059be:	bf00      	nop
 80059c0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	51eb851f 	.word	0x51eb851f

080059d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f103 0208 	add.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f103 0208 	add.w	r2, r3, #8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f103 0208 	add.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a88:	d103      	bne.n	8005a92 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e00c      	b.n	8005aac <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3308      	adds	r3, #8
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e002      	b.n	8005aa0 <vListInsert+0x2e>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d2f6      	bcs.n	8005a9a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	601a      	str	r2, [r3, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6892      	ldr	r2, [r2, #8]
 8005afa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6852      	ldr	r2, [r2, #4]
 8005b04:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d103      	bne.n	8005b18 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <xQueueGenericReset+0x2c>
        __asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60bb      	str	r3, [r7, #8]
    }
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005b64:	f001 fe9a 	bl	800789c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b70:	68f9      	ldr	r1, [r7, #12]
 8005b72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	3b01      	subs	r3, #1
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b9a:	fb01 f303 	mul.w	r3, r1, r3
 8005b9e:	441a      	add	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	22ff      	movs	r2, #255	@ 0xff
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	@ 0xff
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d114      	bne.n	8005be4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01a      	beq.n	8005bf8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f8f2 	bl	8006db0 <xTaskRemoveFromEventList>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d012      	beq.n	8005bf8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <xQueueGenericReset+0xd0>)
 8005bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	e009      	b.n	8005bf8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3310      	adds	r3, #16
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff fef1 	bl	80059d0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3324      	adds	r3, #36	@ 0x24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff feec 	bl	80059d0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005bf8:	f001 fe82 	bl	8007900 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005bfc:	2301      	movs	r3, #1
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08c      	sub	sp, #48	@ 0x30
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <xQueueGenericCreate+0x2c>
        __asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61bb      	str	r3, [r7, #24]
    }
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <xQueueGenericCreate+0x4a>
 8005c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d101      	bne.n	8005c5a <xQueueGenericCreate+0x4e>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueGenericCreate+0x50>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xQueueGenericCreate+0x6c>
        __asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	617b      	str	r3, [r7, #20]
    }
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005c7e:	d90b      	bls.n	8005c98 <xQueueGenericCreate+0x8c>
        __asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	613b      	str	r3, [r7, #16]
    }
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	e7fd      	b.n	8005c94 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	3350      	adds	r3, #80	@ 0x50
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 ff2f 	bl	8007b00 <pvPortMalloc>
 8005ca2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3350      	adds	r3, #80	@ 0x50
 8005cb2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cb4:	79fa      	ldrb	r2, [r7, #7]
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f805 	bl	8005cd0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
    }
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	@ 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d103      	bne.n	8005cec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cfe:	2101      	movs	r1, #1
 8005d00:	69b8      	ldr	r0, [r7, #24]
 8005d02:	f7ff ff19 	bl	8005b38 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	78fa      	ldrb	r2, [r7, #3]
 8005d0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	2073      	movs	r0, #115	@ 0x73
 8005d16:	f003 fed9 	bl	8009acc <SEGGER_SYSVIEW_RecordU32x3>
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08e      	sub	sp, #56	@ 0x38
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d32:	2300      	movs	r3, #0
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <xQueueGenericSend+0x34>
        __asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	623b      	str	r3, [r7, #32]
    }
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	e7fd      	b.n	8005d54 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <xQueueGenericSend+0x42>
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <xQueueGenericSend+0x46>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueGenericSend+0x48>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <xQueueGenericSend+0x64>
        __asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	61fb      	str	r3, [r7, #28]
    }
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d103      	bne.n	8005d96 <xQueueGenericSend+0x72>
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <xQueueGenericSend+0x76>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <xQueueGenericSend+0x78>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <xQueueGenericSend+0x94>
        __asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61bb      	str	r3, [r7, #24]
    }
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005db8:	f001 fd70 	bl	800789c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <xQueueGenericSend+0xaa>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d136      	bne.n	8005e3c <xQueueGenericSend+0x118>
            {
                traceQUEUE_SEND( pxQueue );
 8005dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f004 fc09 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	460b      	mov	r3, r1
 8005de0:	4601      	mov	r1, r0
 8005de2:	205a      	movs	r0, #90	@ 0x5a
 8005de4:	f003 fee8 	bl	8009bb8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dee:	f000 f9e7 	bl	80061c0 <prvCopyDataToQueue>
 8005df2:	6278      	str	r0, [r7, #36]	@ 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfe:	3324      	adds	r3, #36	@ 0x24
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 ffd5 	bl	8006db0 <xTaskRemoveFromEventList>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <xQueueGenericSend+0x110>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f40 <xQueueGenericSend+0x21c>)
 8005e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	e00a      	b.n	8005e34 <xQueueGenericSend+0x110>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <xQueueGenericSend+0x110>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005e24:	4b46      	ldr	r3, [pc, #280]	@ (8005f40 <xQueueGenericSend+0x21c>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005e34:	f001 fd64 	bl	8007900 <vPortExitCritical>
                return pdPASS;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e07d      	b.n	8005f38 <xQueueGenericSend+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d110      	bne.n	8005e64 <xQueueGenericSend+0x140>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005e42:	f001 fd5d 	bl	8007900 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f004 fbcd 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	460b      	mov	r3, r1
 8005e58:	4601      	mov	r1, r0
 8005e5a:	205a      	movs	r0, #90	@ 0x5a
 8005e5c:	f003 feac 	bl	8009bb8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	e069      	b.n	8005f38 <xQueueGenericSend+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <xQueueGenericSend+0x154>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005e6a:	f107 0310 	add.w	r3, r7, #16
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 f806 	bl	8006e80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005e78:	f001 fd42 	bl	8007900 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005e7c:	f000 fd78 	bl	8006970 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005e80:	f001 fd0c 	bl	800789c <vPortEnterCritical>
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e90:	d103      	bne.n	8005e9a <xQueueGenericSend+0x176>
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ea6:	d103      	bne.n	8005eb0 <xQueueGenericSend+0x18c>
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eb0:	f001 fd26 	bl	8007900 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eb4:	1d3a      	adds	r2, r7, #4
 8005eb6:	f107 0310 	add.w	r3, r7, #16
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fff5 	bl	8006eac <xTaskCheckForTimeOut>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d124      	bne.n	8005f12 <xQueueGenericSend+0x1ee>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eca:	f000 fa4b 	bl	8006364 <prvIsQueueFull>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d018      	beq.n	8005f06 <xQueueGenericSend+0x1e2>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	3310      	adds	r3, #16
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 ff41 	bl	8006d64 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee4:	f000 f9d6 	bl	8006294 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005ee8:	f000 fd50 	bl	800698c <xTaskResumeAll>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f47f af62 	bne.w	8005db8 <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 8005ef4:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <xQueueGenericSend+0x21c>)
 8005ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	e758      	b.n	8005db8 <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f08:	f000 f9c4 	bl	8006294 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005f0c:	f000 fd3e 	bl	800698c <xTaskResumeAll>
 8005f10:	e752      	b.n	8005db8 <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f14:	f000 f9be 	bl	8006294 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005f18:	f000 fd38 	bl	800698c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f004 fb62 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4601      	mov	r1, r0
 8005f30:	205a      	movs	r0, #90	@ 0x5a
 8005f32:	f003 fe41 	bl	8009bb8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005f36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3730      	adds	r7, #48	@ 0x30
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b08f      	sub	sp, #60	@ 0x3c
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61bb      	str	r3, [r7, #24]
    }
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	617b      	str	r3, [r7, #20]
    }
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	e7fd      	b.n	8005f94 <xQueueSemaphoreTake+0x50>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f98:	f001 fc80 	bl	800789c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d034      	beq.n	8006012 <xQueueSemaphoreTake+0xce>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f004 fb1c 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	f004 fb18 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	9100      	str	r1, [sp, #0]
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	205c      	movs	r0, #92	@ 0x5c
 8005fc4:	f003 fdf8 	bl	8009bb8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <xQueueSemaphoreTake+0x9e>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005fd8:	f001 fa24 	bl	8007424 <pvTaskIncrementMutexHeldCount>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00f      	beq.n	800600a <xQueueSemaphoreTake+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	3310      	adds	r3, #16
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fede 	bl	8006db0 <xTaskRemoveFromEventList>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <xQueueSemaphoreTake+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005ffa:	4b64      	ldr	r3, [pc, #400]	@ (800618c <xQueueSemaphoreTake+0x248>)
 8005ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800600a:	f001 fc79 	bl	8007900 <vPortExitCritical>
                return pdPASS;
 800600e:	2301      	movs	r3, #1
 8006010:	e0b8      	b.n	8006184 <xQueueSemaphoreTake+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d122      	bne.n	800605e <xQueueSemaphoreTake+0x11a>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <xQueueSemaphoreTake+0xf2>
        __asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	613b      	str	r3, [r7, #16]
    }
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <xQueueSemaphoreTake+0xee>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006036:	f001 fc63 	bl	8007900 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	4618      	mov	r0, r3
 800603e:	f004 fad3 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8006042:	4604      	mov	r4, r0
 8006044:	2000      	movs	r0, #0
 8006046:	f004 facf 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 800604a:	4602      	mov	r2, r0
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2101      	movs	r1, #1
 8006050:	9100      	str	r1, [sp, #0]
 8006052:	4621      	mov	r1, r4
 8006054:	205c      	movs	r0, #92	@ 0x5c
 8006056:	f003 fdaf 	bl	8009bb8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800605a:	2300      	movs	r3, #0
 800605c:	e092      	b.n	8006184 <xQueueSemaphoreTake+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <xQueueSemaphoreTake+0x12e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ff09 	bl	8006e80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800606e:	2301      	movs	r3, #1
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006072:	f001 fc45 	bl	8007900 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006076:	f000 fc7b 	bl	8006970 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800607a:	f001 fc0f 	bl	800789c <vPortEnterCritical>
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006084:	b25b      	sxtb	r3, r3
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800608a:	d103      	bne.n	8006094 <xQueueSemaphoreTake+0x150>
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800609a:	b25b      	sxtb	r3, r3
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060a0:	d103      	bne.n	80060aa <xQueueSemaphoreTake+0x166>
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060aa:	f001 fc29 	bl	8007900 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ae:	463a      	mov	r2, r7
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fef8 	bl	8006eac <xTaskCheckForTimeOut>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d132      	bne.n	8006128 <xQueueSemaphoreTake+0x1e4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060c4:	f000 f938 	bl	8006338 <prvIsQueueEmpty>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d026      	beq.n	800611c <xQueueSemaphoreTake+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <xQueueSemaphoreTake+0x1a6>
                        {
                            taskENTER_CRITICAL();
 80060d6:	f001 fbe1 	bl	800789c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f80a 	bl	80070f8 <xTaskPriorityInherit>
 80060e4:	62b8      	str	r0, [r7, #40]	@ 0x28
                            }
                            taskEXIT_CRITICAL();
 80060e6:	f001 fc0b 	bl	8007900 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	3324      	adds	r3, #36	@ 0x24
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fe36 	bl	8006d64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80060f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060fa:	f000 f8cb 	bl	8006294 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80060fe:	f000 fc45 	bl	800698c <xTaskResumeAll>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	f47f af47 	bne.w	8005f98 <xQueueSemaphoreTake+0x54>
                {
                    portYIELD_WITHIN_API();
 800610a:	4b20      	ldr	r3, [pc, #128]	@ (800618c <xQueueSemaphoreTake+0x248>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	e73d      	b.n	8005f98 <xQueueSemaphoreTake+0x54>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800611c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800611e:	f000 f8b9 	bl	8006294 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006122:	f000 fc33 	bl	800698c <xTaskResumeAll>
 8006126:	e737      	b.n	8005f98 <xQueueSemaphoreTake+0x54>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006128:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800612a:	f000 f8b3 	bl	8006294 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800612e:	f000 fc2d 	bl	800698c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006134:	f000 f900 	bl	8006338 <prvIsQueueEmpty>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	f43f af2c 	beq.w	8005f98 <xQueueSemaphoreTake+0x54>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <xQueueSemaphoreTake+0x21e>
                        {
                            taskENTER_CRITICAL();
 8006146:	f001 fba9 	bl	800789c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800614a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800614c:	f000 f820 	bl	8006190 <prvGetDisinheritPriorityAfterTimeout>
 8006150:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	69f9      	ldr	r1, [r7, #28]
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f8c9 	bl	80072f0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800615e:	f001 fbcf 	bl	8007900 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	4618      	mov	r0, r3
 8006166:	f004 fa3f 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 800616a:	4604      	mov	r4, r0
 800616c:	2000      	movs	r0, #0
 800616e:	f004 fa3b 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2101      	movs	r1, #1
 8006178:	9100      	str	r1, [sp, #0]
 800617a:	4621      	mov	r1, r4
 800617c:	205c      	movs	r0, #92	@ 0x5c
 800617e:	f003 fd1b 	bl	8009bb8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006182:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006184:	4618      	mov	r0, r3
 8006186:	3734      	adds	r7, #52	@ 0x34
 8006188:	46bd      	mov	sp, r7
 800618a:	bd90      	pop	{r4, r7, pc}
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d006      	beq.n	80061ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1c3 0305 	rsb	r3, r3, #5
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e001      	b.n	80061b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80061b2:	68fb      	ldr	r3, [r7, #12]
    }
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d14d      	bne.n	8006282 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fffe 	bl	80071ec <xTaskPriorityDisinherit>
 80061f0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	e043      	b.n	8006282 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d119      	bne.n	8006234 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6858      	ldr	r0, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006208:	461a      	mov	r2, r3
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	f004 fbd2 	bl	800a9b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	441a      	add	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	d32b      	bcc.n	8006282 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	e026      	b.n	8006282 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68d8      	ldr	r0, [r3, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	461a      	mov	r2, r3
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	f004 fbb8 	bl	800a9b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	425b      	negs	r3, r3
 800624e:	441a      	add	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d207      	bcs.n	8006270 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006268:	425b      	negs	r3, r3
 800626a:	441a      	add	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d105      	bne.n	8006282 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3b01      	subs	r3, #1
 8006280:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800628a:	697b      	ldr	r3, [r7, #20]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800629c:	f001 fafe 	bl	800789c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80062a8:	e011      	b.n	80062ce <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d012      	beq.n	80062d8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3324      	adds	r3, #36	@ 0x24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fd7a 	bl	8006db0 <xTaskRemoveFromEventList>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80062c2:	f000 fe5b 	bl	8006f7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80062ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dce9      	bgt.n	80062aa <prvUnlockQueue+0x16>
 80062d6:	e000      	b.n	80062da <prvUnlockQueue+0x46>
                        break;
 80062d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	22ff      	movs	r2, #255	@ 0xff
 80062de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80062e2:	f001 fb0d 	bl	8007900 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80062e6:	f001 fad9 	bl	800789c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80062f2:	e011      	b.n	8006318 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d012      	beq.n	8006322 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3310      	adds	r3, #16
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fd55 	bl	8006db0 <xTaskRemoveFromEventList>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800630c:	f000 fe36 	bl	8006f7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	3b01      	subs	r3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800631c:	2b00      	cmp	r3, #0
 800631e:	dce9      	bgt.n	80062f4 <prvUnlockQueue+0x60>
 8006320:	e000      	b.n	8006324 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006322:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	22ff      	movs	r2, #255	@ 0xff
 8006328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800632c:	f001 fae8 	bl	8007900 <vPortExitCritical>
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006340:	f001 faac 	bl	800789c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e001      	b.n	8006356 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006356:	f001 fad3 	bl	8007900 <vPortExitCritical>

    return xReturn;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800636c:	f001 fa96 	bl	800789c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006378:	429a      	cmp	r2, r3
 800637a:	d102      	bne.n	8006382 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e001      	b.n	8006386 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006386:	f001 fabb 	bl	8007900 <vPortExitCritical>

    return xReturn;
 800638a:	68fb      	ldr	r3, [r7, #12]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006394:	b580      	push	{r7, lr}
 8006396:	b08c      	sub	sp, #48	@ 0x30
 8006398:	af04      	add	r7, sp, #16
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063a4:	88fb      	ldrh	r3, [r7, #6]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fba9 	bl	8007b00 <pvPortMalloc>
 80063ae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063b6:	2058      	movs	r0, #88	@ 0x58
 80063b8:	f001 fba2 	bl	8007b00 <pvPortMalloc>
 80063bc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80063ca:	e005      	b.n	80063d8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80063cc:	6978      	ldr	r0, [r7, #20]
 80063ce:	f001 fc79 	bl	8007cc4 <vPortFree>
 80063d2:	e001      	b.n	80063d8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d013      	beq.n	8006406 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	2300      	movs	r3, #0
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f80e 	bl	8006416 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80063fa:	69f8      	ldr	r0, [r7, #28]
 80063fc:	f000 f8a2 	bl	8006544 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006400:	2301      	movs	r3, #1
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e002      	b.n	800640c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800640a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800640c:	69bb      	ldr	r3, [r7, #24]
    }
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
 8006422:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	461a      	mov	r2, r3
 800642e:	21a5      	movs	r1, #165	@ 0xa5
 8006430:	f004 fa93 	bl	800a95a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800643e:	3b01      	subs	r3, #1
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f023 0307 	bic.w	r3, r3, #7
 800644c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	617b      	str	r3, [r7, #20]
    }
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01f      	beq.n	80064b6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	e012      	b.n	80064a2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	7819      	ldrb	r1, [r3, #0]
 8006484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	3334      	adds	r3, #52	@ 0x34
 800648c:	460a      	mov	r2, r1
 800648e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b09      	cmp	r3, #9
 80064a6:	d9e9      	bls.n	800647c <prvInitialiseNewTask+0x66>
 80064a8:	e000      	b.n	80064ac <prvInitialiseNewTask+0x96>
            {
                break;
 80064aa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80064b4:	e003      	b.n	80064be <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d901      	bls.n	80064c8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064c4:	2304      	movs	r3, #4
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064d2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	2200      	movs	r2, #0
 80064d8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fa96 	bl	8005a10 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	3318      	adds	r3, #24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff fa91 	bl	8005a10 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	f1c3 0205 	rsb	r2, r3, #5
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006502:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	3350      	adds	r3, #80	@ 0x50
 8006508:	2204      	movs	r2, #4
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f004 fa24 	bl	800a95a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	3354      	adds	r3, #84	@ 0x54
 8006516:	2201      	movs	r2, #1
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f004 fa1d 	bl	800a95a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	69b8      	ldr	r0, [r7, #24]
 8006526:	f001 f809 	bl	800753c <pxPortInitialiseStack>
 800652a:	4602      	mov	r2, r0
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800653a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800653c:	bf00      	nop
 800653e:	3720      	adds	r7, #32
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006544:	b5b0      	push	{r4, r5, r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af02      	add	r7, sp, #8
 800654a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800654c:	f001 f9a6 	bl	800789c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <prvAddNewTaskToReadyList+0xfc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a3a      	ldr	r2, [pc, #232]	@ (8006640 <prvAddNewTaskToReadyList+0xfc>)
 8006558:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800655a:	4b3a      	ldr	r3, [pc, #232]	@ (8006644 <prvAddNewTaskToReadyList+0x100>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006562:	4a38      	ldr	r2, [pc, #224]	@ (8006644 <prvAddNewTaskToReadyList+0x100>)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006568:	4b35      	ldr	r3, [pc, #212]	@ (8006640 <prvAddNewTaskToReadyList+0xfc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d110      	bne.n	8006592 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006570:	f000 fd28 	bl	8006fc4 <prvInitialiseTaskLists>
 8006574:	e00d      	b.n	8006592 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006576:	4b34      	ldr	r3, [pc, #208]	@ (8006648 <prvAddNewTaskToReadyList+0x104>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800657e:	4b31      	ldr	r3, [pc, #196]	@ (8006644 <prvAddNewTaskToReadyList+0x100>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006588:	429a      	cmp	r2, r3
 800658a:	d802      	bhi.n	8006592 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800658c:	4a2d      	ldr	r2, [pc, #180]	@ (8006644 <prvAddNewTaskToReadyList+0x100>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006592:	4b2e      	ldr	r3, [pc, #184]	@ (800664c <prvAddNewTaskToReadyList+0x108>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	4a2c      	ldr	r2, [pc, #176]	@ (800664c <prvAddNewTaskToReadyList+0x108>)
 800659a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800659c:	4b2b      	ldr	r3, [pc, #172]	@ (800664c <prvAddNewTaskToReadyList+0x108>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <prvAddNewTaskToReadyList+0x94>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f003 fef5 	bl	800a39c <SEGGER_SYSVIEW_OnTaskCreate>
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c2:	461d      	mov	r5, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461c      	mov	r4, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ce:	1ae3      	subs	r3, r4, r3
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	462b      	mov	r3, r5
 80065d4:	f001 fd46 	bl	8008064 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4618      	mov	r0, r3
 80065dc:	f003 ff62 	bl	800a4a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	4b19      	ldr	r3, [pc, #100]	@ (8006650 <prvAddNewTaskToReadyList+0x10c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	4a18      	ldr	r2, [pc, #96]	@ (8006650 <prvAddNewTaskToReadyList+0x10c>)
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4a15      	ldr	r2, [pc, #84]	@ (8006654 <prvAddNewTaskToReadyList+0x110>)
 8006600:	441a      	add	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7ff fa0e 	bl	8005a2a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800660e:	f001 f977 	bl	8007900 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <prvAddNewTaskToReadyList+0x104>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00e      	beq.n	8006638 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800661a:	4b0a      	ldr	r3, [pc, #40]	@ (8006644 <prvAddNewTaskToReadyList+0x100>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	429a      	cmp	r2, r3
 8006626:	d207      	bcs.n	8006638 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006628:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <prvAddNewTaskToReadyList+0x114>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bdb0      	pop	{r4, r5, r7, pc}
 8006640:	20000444 	.word	0x20000444
 8006644:	2000036c 	.word	0x2000036c
 8006648:	20000450 	.word	0x20000450
 800664c:	20000460 	.word	0x20000460
 8006650:	2000044c 	.word	0x2000044c
 8006654:	20000370 	.word	0x20000370
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8006664:	f001 f91a 	bl	800789c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d102      	bne.n	8006674 <vTaskDelete+0x18>
 800666e:	4b46      	ldr	r3, [pc, #280]	@ (8006788 <vTaskDelete+0x12c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	e000      	b.n	8006676 <vTaskDelete+0x1a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3304      	adds	r3, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fa31 	bl	8005ae4 <uxListRemove>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d115      	bne.n	80066b4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668c:	493f      	ldr	r1, [pc, #252]	@ (800678c <vTaskDelete+0x130>)
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <vTaskDelete+0x58>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	2201      	movs	r2, #1
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	43da      	mvns	r2, r3
 80066aa:	4b39      	ldr	r3, [pc, #228]	@ (8006790 <vTaskDelete+0x134>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4013      	ands	r3, r2
 80066b0:	4a37      	ldr	r2, [pc, #220]	@ (8006790 <vTaskDelete+0x134>)
 80066b2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3318      	adds	r3, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fa0f 	bl	8005ae4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80066c6:	4b33      	ldr	r3, [pc, #204]	@ (8006794 <vTaskDelete+0x138>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	4a31      	ldr	r2, [pc, #196]	@ (8006794 <vTaskDelete+0x138>)
 80066ce:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80066d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006788 <vTaskDelete+0x12c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d118      	bne.n	800670c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	482d      	ldr	r0, [pc, #180]	@ (8006798 <vTaskDelete+0x13c>)
 80066e2:	f7ff f9a2 	bl	8005a2a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80066e6:	4b2d      	ldr	r3, [pc, #180]	@ (800679c <vTaskDelete+0x140>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	4a2b      	ldr	r2, [pc, #172]	@ (800679c <vTaskDelete+0x140>)
 80066ee:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f003 ff78 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 80066f8:	4603      	mov	r3, r0
 80066fa:	4619      	mov	r1, r3
 80066fc:	2022      	movs	r0, #34	@ 0x22
 80066fe:	f003 f94f 	bl	80099a0 <SEGGER_SYSVIEW_RecordU32>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4618      	mov	r0, r3
 8006706:	f001 fd15 	bl	8008134 <SYSVIEW_DeleteTask>
 800670a:	e016      	b.n	800673a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800670c:	4b24      	ldr	r3, [pc, #144]	@ (80067a0 <vTaskDelete+0x144>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	4a23      	ldr	r2, [pc, #140]	@ (80067a0 <vTaskDelete+0x144>)
 8006714:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4618      	mov	r0, r3
 800671a:	f003 ff65 	bl	800a5e8 <SEGGER_SYSVIEW_ShrinkId>
 800671e:	4603      	mov	r3, r0
 8006720:	4619      	mov	r1, r3
 8006722:	2022      	movs	r0, #34	@ 0x22
 8006724:	f003 f93c 	bl	80099a0 <SEGGER_SYSVIEW_RecordU32>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fd02 	bl	8008134 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fcb5 	bl	80070a0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8006736:	f000 fcc3 	bl	80070c0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800673a:	f001 f8e1 	bl	8007900 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800673e:	4b19      	ldr	r3, [pc, #100]	@ (80067a4 <vTaskDelete+0x148>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01c      	beq.n	8006780 <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 8006746:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <vTaskDelete+0x12c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	429a      	cmp	r2, r3
 800674e:	d117      	bne.n	8006780 <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8006750:	4b15      	ldr	r3, [pc, #84]	@ (80067a8 <vTaskDelete+0x14c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <vTaskDelete+0x114>
        __asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60bb      	str	r3, [r7, #8]
    }
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8006770:	4b0e      	ldr	r3, [pc, #56]	@ (80067ac <vTaskDelete+0x150>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	2000036c 	.word	0x2000036c
 800678c:	20000370 	.word	0x20000370
 8006790:	2000044c 	.word	0x2000044c
 8006794:	20000460 	.word	0x20000460
 8006798:	20000418 	.word	0x20000418
 800679c:	2000042c 	.word	0x2000042c
 80067a0:	20000444 	.word	0x20000444
 80067a4:	20000450 	.word	0x20000450
 80067a8:	2000046c 	.word	0x2000046c
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	@ 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <xTaskDelayUntil+0x2c>
        __asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	617b      	str	r3, [r7, #20]
    }
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <xTaskDelayUntil+0x4a>
        __asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	613b      	str	r3, [r7, #16]
    }
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 80067fa:	4b2c      	ldr	r3, [pc, #176]	@ (80068ac <xTaskDelayUntil+0xfc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <xTaskDelayUntil+0x6a>
        __asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60fb      	str	r3, [r7, #12]
    }
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	e7fd      	b.n	8006816 <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 800681a:	f000 f8a9 	bl	8006970 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800681e:	4b24      	ldr	r3, [pc, #144]	@ (80068b0 <xTaskDelayUntil+0x100>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	4413      	add	r3, r2
 800682c:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	429a      	cmp	r2, r3
 8006836:	d20b      	bcs.n	8006850 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	429a      	cmp	r2, r3
 8006840:	d211      	bcs.n	8006866 <xTaskDelayUntil+0xb6>
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	429a      	cmp	r2, r3
 8006848:	d90d      	bls.n	8006866 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
 800684e:	e00a      	b.n	8006866 <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	429a      	cmp	r2, r3
 8006858:	d303      	bcc.n	8006862 <xTaskDelayUntil+0xb2>
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	429a      	cmp	r2, r3
 8006860:	d901      	bls.n	8006866 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <xTaskDelayUntil+0xd6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8006872:	2024      	movs	r0, #36	@ 0x24
 8006874:	f003 f876 	bl	8009964 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fde3 	bl	800744c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8006886:	f000 f881 	bl	800698c <xTaskResumeAll>
 800688a:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d107      	bne.n	80068a2 <xTaskDelayUntil+0xf2>
        {
            portYIELD_WITHIN_API();
 8006892:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <xTaskDelayUntil+0x104>)
 8006894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80068a4:	4618      	mov	r0, r3
 80068a6:	3728      	adds	r7, #40	@ 0x28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	2000046c 	.word	0x2000046c
 80068b0:	20000448 	.word	0x20000448
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80068be:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <vTaskStartScheduler+0x98>)
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	2300      	movs	r3, #0
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	2300      	movs	r3, #0
 80068c8:	2282      	movs	r2, #130	@ 0x82
 80068ca:	4922      	ldr	r1, [pc, #136]	@ (8006954 <vTaskStartScheduler+0x9c>)
 80068cc:	4822      	ldr	r0, [pc, #136]	@ (8006958 <vTaskStartScheduler+0xa0>)
 80068ce:	f7ff fd61 	bl	8006394 <xTaskCreate>
 80068d2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d124      	bne.n	8006924 <vTaskStartScheduler+0x6c>
        __asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60bb      	str	r3, [r7, #8]
    }
 80068ec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80068ee:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <vTaskStartScheduler+0xa4>)
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80068f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006960 <vTaskStartScheduler+0xa8>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068fc:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <vTaskStartScheduler+0xac>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006902:	4b19      	ldr	r3, [pc, #100]	@ (8006968 <vTaskStartScheduler+0xb0>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	4b12      	ldr	r3, [pc, #72]	@ (8006950 <vTaskStartScheduler+0x98>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d102      	bne.n	8006914 <vTaskStartScheduler+0x5c>
 800690e:	f003 fd29 	bl	800a364 <SEGGER_SYSVIEW_OnIdle>
 8006912:	e004      	b.n	800691e <vTaskStartScheduler+0x66>
 8006914:	4b14      	ldr	r3, [pc, #80]	@ (8006968 <vTaskStartScheduler+0xb0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f003 fd81 	bl	800a420 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800691e:	f000 fe99 	bl	8007654 <xPortStartScheduler>
 8006922:	e00f      	b.n	8006944 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800692a:	d10b      	bne.n	8006944 <vTaskStartScheduler+0x8c>
        __asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	607b      	str	r3, [r7, #4]
    }
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006944:	4b09      	ldr	r3, [pc, #36]	@ (800696c <vTaskStartScheduler+0xb4>)
 8006946:	681b      	ldr	r3, [r3, #0]
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000468 	.word	0x20000468
 8006954:	0800ab34 	.word	0x0800ab34
 8006958:	08006f95 	.word	0x08006f95
 800695c:	20000464 	.word	0x20000464
 8006960:	20000450 	.word	0x20000450
 8006964:	20000448 	.word	0x20000448
 8006968:	2000036c 	.word	0x2000036c
 800696c:	2000000c 	.word	0x2000000c

08006970 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006974:	4b04      	ldr	r3, [pc, #16]	@ (8006988 <vTaskSuspendAll+0x18>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	4a03      	ldr	r2, [pc, #12]	@ (8006988 <vTaskSuspendAll+0x18>)
 800697c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800697e:	bf00      	nop
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	2000046c 	.word	0x2000046c

0800698c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800699a:	4b44      	ldr	r3, [pc, #272]	@ (8006aac <xTaskResumeAll+0x120>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <xTaskResumeAll+0x2e>
        __asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	603b      	str	r3, [r7, #0]
    }
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	e7fd      	b.n	80069b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80069ba:	f000 ff6f 	bl	800789c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80069be:	4b3b      	ldr	r3, [pc, #236]	@ (8006aac <xTaskResumeAll+0x120>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	4a39      	ldr	r2, [pc, #228]	@ (8006aac <xTaskResumeAll+0x120>)
 80069c6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c8:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <xTaskResumeAll+0x120>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d165      	bne.n	8006a9c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069d0:	4b37      	ldr	r3, [pc, #220]	@ (8006ab0 <xTaskResumeAll+0x124>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d061      	beq.n	8006a9c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d8:	e032      	b.n	8006a40 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069da:	4b36      	ldr	r3, [pc, #216]	@ (8006ab4 <xTaskResumeAll+0x128>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3318      	adds	r3, #24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f87c 	bl	8005ae4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff f877 	bl	8005ae4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f003 fd53 	bl	800a4a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	2201      	movs	r2, #1
 8006a04:	409a      	lsls	r2, r3
 8006a06:	4b2c      	ldr	r3, [pc, #176]	@ (8006ab8 <xTaskResumeAll+0x12c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab8 <xTaskResumeAll+0x12c>)
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4a27      	ldr	r2, [pc, #156]	@ (8006abc <xTaskResumeAll+0x130>)
 8006a1e:	441a      	add	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7fe ffff 	bl	8005a2a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a30:	4b23      	ldr	r3, [pc, #140]	@ (8006ac0 <xTaskResumeAll+0x134>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d302      	bcc.n	8006a40 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8006a3a:	4b22      	ldr	r3, [pc, #136]	@ (8006ac4 <xTaskResumeAll+0x138>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a40:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab4 <xTaskResumeAll+0x128>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1c8      	bne.n	80069da <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006a4e:	f000 fb37 	bl	80070c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a52:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <xTaskResumeAll+0x13c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d010      	beq.n	8006a80 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006a5e:	f000 f859 	bl	8006b14 <xTaskIncrementTick>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8006a68:	4b16      	ldr	r3, [pc, #88]	@ (8006ac4 <xTaskResumeAll+0x138>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f1      	bne.n	8006a5e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8006a7a:	4b13      	ldr	r3, [pc, #76]	@ (8006ac8 <xTaskResumeAll+0x13c>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006a80:	4b10      	ldr	r3, [pc, #64]	@ (8006ac4 <xTaskResumeAll+0x138>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006acc <xTaskResumeAll+0x140>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006a9c:	f000 ff30 	bl	8007900 <vPortExitCritical>

    return xAlreadyYielded;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	2000046c 	.word	0x2000046c
 8006ab0:	20000444 	.word	0x20000444
 8006ab4:	20000404 	.word	0x20000404
 8006ab8:	2000044c 	.word	0x2000044c
 8006abc:	20000370 	.word	0x20000370
 8006ac0:	2000036c 	.word	0x2000036c
 8006ac4:	20000458 	.word	0x20000458
 8006ac8:	20000454 	.word	0x20000454
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <xTaskGetTickCount+0x1c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006adc:	687b      	ldr	r3, [r7, #4]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20000448 	.word	0x20000448

08006af0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af6:	f000 ffc1 	bl	8007a7c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006afa:	2300      	movs	r3, #0
 8006afc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006afe:	4b04      	ldr	r3, [pc, #16]	@ (8006b10 <xTaskGetTickCountFromISR+0x20>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006b04:	683b      	ldr	r3, [r7, #0]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000448 	.word	0x20000448

08006b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1e:	4b51      	ldr	r3, [pc, #324]	@ (8006c64 <xTaskIncrementTick+0x150>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 8093 	bne.w	8006c4e <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b28:	4b4f      	ldr	r3, [pc, #316]	@ (8006c68 <xTaskIncrementTick+0x154>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006b30:	4a4d      	ldr	r2, [pc, #308]	@ (8006c68 <xTaskIncrementTick+0x154>)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d121      	bne.n	8006b80 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c6c <xTaskIncrementTick+0x158>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <xTaskIncrementTick+0x4a>
        __asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
    }
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <xTaskIncrementTick+0x46>
 8006b5e:	4b43      	ldr	r3, [pc, #268]	@ (8006c6c <xTaskIncrementTick+0x158>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	4b42      	ldr	r3, [pc, #264]	@ (8006c70 <xTaskIncrementTick+0x15c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a40      	ldr	r2, [pc, #256]	@ (8006c6c <xTaskIncrementTick+0x158>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	4a40      	ldr	r2, [pc, #256]	@ (8006c70 <xTaskIncrementTick+0x15c>)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	4b40      	ldr	r3, [pc, #256]	@ (8006c74 <xTaskIncrementTick+0x160>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	4a3e      	ldr	r2, [pc, #248]	@ (8006c74 <xTaskIncrementTick+0x160>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	f000 faa0 	bl	80070c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006b80:	4b3d      	ldr	r3, [pc, #244]	@ (8006c78 <xTaskIncrementTick+0x164>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d34c      	bcc.n	8006c24 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b8a:	4b38      	ldr	r3, [pc, #224]	@ (8006c6c <xTaskIncrementTick+0x158>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b94:	4b38      	ldr	r3, [pc, #224]	@ (8006c78 <xTaskIncrementTick+0x164>)
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b9a:	601a      	str	r2, [r3, #0]
                    break;
 8006b9c:	e042      	b.n	8006c24 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9e:	4b33      	ldr	r3, [pc, #204]	@ (8006c6c <xTaskIncrementTick+0x158>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d203      	bcs.n	8006bbe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006bb6:	4a30      	ldr	r2, [pc, #192]	@ (8006c78 <xTaskIncrementTick+0x164>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bbc:	e032      	b.n	8006c24 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe ff8e 	bl	8005ae4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	3318      	adds	r3, #24
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe ff85 	bl	8005ae4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f003 fc61 	bl	800a4a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	2201      	movs	r2, #1
 8006be8:	409a      	lsls	r2, r3
 8006bea:	4b24      	ldr	r3, [pc, #144]	@ (8006c7c <xTaskIncrementTick+0x168>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	4a22      	ldr	r2, [pc, #136]	@ (8006c7c <xTaskIncrementTick+0x168>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4a1f      	ldr	r2, [pc, #124]	@ (8006c80 <xTaskIncrementTick+0x16c>)
 8006c02:	441a      	add	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fe ff0d 	bl	8005a2a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	4b1b      	ldr	r3, [pc, #108]	@ (8006c84 <xTaskIncrementTick+0x170>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d3b5      	bcc.n	8006b8a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c22:	e7b2      	b.n	8006b8a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c24:	4b17      	ldr	r3, [pc, #92]	@ (8006c84 <xTaskIncrementTick+0x170>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2a:	4915      	ldr	r1, [pc, #84]	@ (8006c80 <xTaskIncrementTick+0x16c>)
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d901      	bls.n	8006c40 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006c40:	4b11      	ldr	r3, [pc, #68]	@ (8006c88 <xTaskIncrementTick+0x174>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e004      	b.n	8006c58 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c8c <xTaskIncrementTick+0x178>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <xTaskIncrementTick+0x178>)
 8006c56:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006c58:	697b      	ldr	r3, [r7, #20]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	2000046c 	.word	0x2000046c
 8006c68:	20000448 	.word	0x20000448
 8006c6c:	200003fc 	.word	0x200003fc
 8006c70:	20000400 	.word	0x20000400
 8006c74:	2000045c 	.word	0x2000045c
 8006c78:	20000464 	.word	0x20000464
 8006c7c:	2000044c 	.word	0x2000044c
 8006c80:	20000370 	.word	0x20000370
 8006c84:	2000036c 	.word	0x2000036c
 8006c88:	20000458 	.word	0x20000458
 8006c8c:	20000454 	.word	0x20000454

08006c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c96:	4b2d      	ldr	r3, [pc, #180]	@ (8006d4c <vTaskSwitchContext+0xbc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d50 <vTaskSwitchContext+0xc0>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006ca4:	e04e      	b.n	8006d44 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8006ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8006d50 <vTaskSwitchContext+0xc0>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cac:	4b29      	ldr	r3, [pc, #164]	@ (8006d54 <vTaskSwitchContext+0xc4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	fab3 f383 	clz	r3, r3
 8006cb8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	f1c3 031f 	rsb	r3, r3, #31
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	4925      	ldr	r1, [pc, #148]	@ (8006d58 <vTaskSwitchContext+0xc8>)
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <vTaskSwitchContext+0x5e>
        __asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	607b      	str	r3, [r7, #4]
    }
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <vTaskSwitchContext+0x5a>
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a17      	ldr	r2, [pc, #92]	@ (8006d58 <vTaskSwitchContext+0xc8>)
 8006cfa:	4413      	add	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d104      	bne.n	8006d1e <vTaskSwitchContext+0x8e>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4a0d      	ldr	r2, [pc, #52]	@ (8006d5c <vTaskSwitchContext+0xcc>)
 8006d26:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006d28:	4b0c      	ldr	r3, [pc, #48]	@ (8006d5c <vTaskSwitchContext+0xcc>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <vTaskSwitchContext+0xd0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d102      	bne.n	8006d3a <vTaskSwitchContext+0xaa>
 8006d34:	f003 fb16 	bl	800a364 <SEGGER_SYSVIEW_OnIdle>
}
 8006d38:	e004      	b.n	8006d44 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8006d3a:	4b08      	ldr	r3, [pc, #32]	@ (8006d5c <vTaskSwitchContext+0xcc>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f003 fb6e 	bl	800a420 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006d44:	bf00      	nop
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	2000046c 	.word	0x2000046c
 8006d50:	20000458 	.word	0x20000458
 8006d54:	2000044c 	.word	0x2000044c
 8006d58:	20000370 	.word	0x20000370
 8006d5c:	2000036c 	.word	0x2000036c
 8006d60:	20000468 	.word	0x20000468

08006d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10b      	bne.n	8006d8c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
    }
 8006d86:	bf00      	nop
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d8c:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <vTaskPlaceOnEventList+0x48>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3318      	adds	r3, #24
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fe fe6c 	bl	8005a72 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	6838      	ldr	r0, [r7, #0]
 8006d9e:	f000 fb55 	bl	800744c <prvAddCurrentTaskToDelayedList>
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000036c 	.word	0x2000036c

08006db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
    }
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	3318      	adds	r3, #24
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fe7e 	bl	8005ae4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e68 <xTaskRemoveFromEventList+0xb8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d120      	bne.n	8006e32 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fe75 	bl	8005ae4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f003 fb51 	bl	800a4a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	2201      	movs	r2, #1
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	4b18      	ldr	r3, [pc, #96]	@ (8006e6c <xTaskRemoveFromEventList+0xbc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <xTaskRemoveFromEventList+0xbc>)
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a13      	ldr	r2, [pc, #76]	@ (8006e70 <xTaskRemoveFromEventList+0xc0>)
 8006e22:	441a      	add	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fe fdfd 	bl	8005a2a <vListInsertEnd>
 8006e30:	e005      	b.n	8006e3e <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3318      	adds	r3, #24
 8006e36:	4619      	mov	r1, r3
 8006e38:	480e      	ldr	r0, [pc, #56]	@ (8006e74 <xTaskRemoveFromEventList+0xc4>)
 8006e3a:	f7fe fdf6 	bl	8005a2a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <xTaskRemoveFromEventList+0xc8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d905      	bls.n	8006e58 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006e50:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <xTaskRemoveFromEventList+0xcc>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e001      	b.n	8006e5c <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006e5c:	697b      	ldr	r3, [r7, #20]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000046c 	.word	0x2000046c
 8006e6c:	2000044c 	.word	0x2000044c
 8006e70:	20000370 	.word	0x20000370
 8006e74:	20000404 	.word	0x20000404
 8006e78:	2000036c 	.word	0x2000036c
 8006e7c:	20000458 	.word	0x20000458

08006e80 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e88:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <vTaskInternalSetTimeOutState+0x24>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <vTaskInternalSetTimeOutState+0x28>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	2000045c 	.word	0x2000045c
 8006ea8:	20000448 	.word	0x20000448

08006eac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	613b      	str	r3, [r7, #16]
    }
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60fb      	str	r3, [r7, #12]
    }
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006ef2:	f000 fcd3 	bl	800789c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f74 <xTaskCheckForTimeOut+0xc8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f0e:	d102      	bne.n	8006f16 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e026      	b.n	8006f64 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b17      	ldr	r3, [pc, #92]	@ (8006f78 <xTaskCheckForTimeOut+0xcc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d00a      	beq.n	8006f38 <xTaskCheckForTimeOut+0x8c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d305      	bcc.n	8006f38 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e015      	b.n	8006f64 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d20b      	bcs.n	8006f5a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff ff96 	bl	8006e80 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e004      	b.n	8006f64 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006f64:	f000 fccc 	bl	8007900 <vPortExitCritical>

    return xReturn;
 8006f68:	69fb      	ldr	r3, [r7, #28]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000448 	.word	0x20000448
 8006f78:	2000045c 	.word	0x2000045c

08006f7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006f80:	4b03      	ldr	r3, [pc, #12]	@ (8006f90 <vTaskMissedYield+0x14>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000458 	.word	0x20000458

08006f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006f9c:	f000 f852 	bl	8007044 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <prvIdleTask+0x28>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d9f9      	bls.n	8006f9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <prvIdleTask+0x2c>)
 8006faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006fb8:	e7f0      	b.n	8006f9c <prvIdleTask+0x8>
 8006fba:	bf00      	nop
 8006fbc:	20000370 	.word	0x20000370
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fca:	2300      	movs	r3, #0
 8006fcc:	607b      	str	r3, [r7, #4]
 8006fce:	e00c      	b.n	8006fea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4a12      	ldr	r2, [pc, #72]	@ (8007024 <prvInitialiseTaskLists+0x60>)
 8006fdc:	4413      	add	r3, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fcf6 	bl	80059d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	607b      	str	r3, [r7, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d9ef      	bls.n	8006fd0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006ff0:	480d      	ldr	r0, [pc, #52]	@ (8007028 <prvInitialiseTaskLists+0x64>)
 8006ff2:	f7fe fced 	bl	80059d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006ff6:	480d      	ldr	r0, [pc, #52]	@ (800702c <prvInitialiseTaskLists+0x68>)
 8006ff8:	f7fe fcea 	bl	80059d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006ffc:	480c      	ldr	r0, [pc, #48]	@ (8007030 <prvInitialiseTaskLists+0x6c>)
 8006ffe:	f7fe fce7 	bl	80059d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007002:	480c      	ldr	r0, [pc, #48]	@ (8007034 <prvInitialiseTaskLists+0x70>)
 8007004:	f7fe fce4 	bl	80059d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007008:	480b      	ldr	r0, [pc, #44]	@ (8007038 <prvInitialiseTaskLists+0x74>)
 800700a:	f7fe fce1 	bl	80059d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800700e:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <prvInitialiseTaskLists+0x78>)
 8007010:	4a05      	ldr	r2, [pc, #20]	@ (8007028 <prvInitialiseTaskLists+0x64>)
 8007012:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007014:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <prvInitialiseTaskLists+0x7c>)
 8007016:	4a05      	ldr	r2, [pc, #20]	@ (800702c <prvInitialiseTaskLists+0x68>)
 8007018:	601a      	str	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000370 	.word	0x20000370
 8007028:	200003d4 	.word	0x200003d4
 800702c:	200003e8 	.word	0x200003e8
 8007030:	20000404 	.word	0x20000404
 8007034:	20000418 	.word	0x20000418
 8007038:	20000430 	.word	0x20000430
 800703c:	200003fc 	.word	0x200003fc
 8007040:	20000400 	.word	0x20000400

08007044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800704a:	e019      	b.n	8007080 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800704c:	f000 fc26 	bl	800789c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007050:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <prvCheckTasksWaitingTermination+0x50>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3304      	adds	r3, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe fd41 	bl	8005ae4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <prvCheckTasksWaitingTermination+0x54>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3b01      	subs	r3, #1
 8007068:	4a0b      	ldr	r2, [pc, #44]	@ (8007098 <prvCheckTasksWaitingTermination+0x54>)
 800706a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800706c:	4b0b      	ldr	r3, [pc, #44]	@ (800709c <prvCheckTasksWaitingTermination+0x58>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3b01      	subs	r3, #1
 8007072:	4a0a      	ldr	r2, [pc, #40]	@ (800709c <prvCheckTasksWaitingTermination+0x58>)
 8007074:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007076:	f000 fc43 	bl	8007900 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f810 	bl	80070a0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007080:	4b06      	ldr	r3, [pc, #24]	@ (800709c <prvCheckTasksWaitingTermination+0x58>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e1      	bne.n	800704c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000418 	.word	0x20000418
 8007098:	20000444 	.word	0x20000444
 800709c:	2000042c 	.word	0x2000042c

080070a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fe09 	bl	8007cc4 <vPortFree>
                vPortFree( pxTCB );
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fe06 	bl	8007cc4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c4:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <prvResetNextTaskUnblockTime+0x30>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d104      	bne.n	80070d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <prvResetNextTaskUnblockTime+0x34>)
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80070d6:	e005      	b.n	80070e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <prvResetNextTaskUnblockTime+0x30>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a04      	ldr	r2, [pc, #16]	@ (80070f4 <prvResetNextTaskUnblockTime+0x34>)
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	200003fc 	.word	0x200003fc
 80070f4:	20000464 	.word	0x20000464

080070f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d063      	beq.n	80071d6 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007112:	4b33      	ldr	r3, [pc, #204]	@ (80071e0 <xTaskPriorityInherit+0xe8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	429a      	cmp	r2, r3
 800711a:	d253      	bcs.n	80071c4 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	db06      	blt.n	8007132 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007124:	4b2e      	ldr	r3, [pc, #184]	@ (80071e0 <xTaskPriorityInherit+0xe8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	f1c3 0205 	rsb	r2, r3, #5
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6959      	ldr	r1, [r3, #20]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a28      	ldr	r2, [pc, #160]	@ (80071e4 <xTaskPriorityInherit+0xec>)
 8007144:	4413      	add	r3, r2
 8007146:	4299      	cmp	r1, r3
 8007148:	d12f      	bne.n	80071aa <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3304      	adds	r3, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fcc8 	bl	8005ae4 <uxListRemove>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715e:	2201      	movs	r2, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	43da      	mvns	r2, r3
 8007166:	4b20      	ldr	r3, [pc, #128]	@ (80071e8 <xTaskPriorityInherit+0xf0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	4a1e      	ldr	r2, [pc, #120]	@ (80071e8 <xTaskPriorityInherit+0xf0>)
 800716e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007170:	4b1b      	ldr	r3, [pc, #108]	@ (80071e0 <xTaskPriorityInherit+0xe8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	2201      	movs	r2, #1
 8007180:	409a      	lsls	r2, r3
 8007182:	4b19      	ldr	r3, [pc, #100]	@ (80071e8 <xTaskPriorityInherit+0xf0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4313      	orrs	r3, r2
 8007188:	4a17      	ldr	r2, [pc, #92]	@ (80071e8 <xTaskPriorityInherit+0xf0>)
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4a12      	ldr	r2, [pc, #72]	@ (80071e4 <xTaskPriorityInherit+0xec>)
 800719a:	441a      	add	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fc41 	bl	8005a2a <vListInsertEnd>
 80071a8:	e004      	b.n	80071b4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071aa:	4b0d      	ldr	r3, [pc, #52]	@ (80071e0 <xTaskPriorityInherit+0xe8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4619      	mov	r1, r3
 80071b8:	2049      	movs	r0, #73	@ 0x49
 80071ba:	f002 fbf1 	bl	80099a0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	e008      	b.n	80071d6 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071c8:	4b05      	ldr	r3, [pc, #20]	@ (80071e0 <xTaskPriorityInherit+0xe8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d201      	bcs.n	80071d6 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80071d6:	68fb      	ldr	r3, [r7, #12]
    }
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	2000036c 	.word	0x2000036c
 80071e4:	20000370 	.word	0x20000370
 80071e8:	2000044c 	.word	0x2000044c

080071ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d06a      	beq.n	80072d8 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007202:	4b38      	ldr	r3, [pc, #224]	@ (80072e4 <xTaskPriorityDisinherit+0xf8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	429a      	cmp	r2, r3
 800720a:	d00b      	beq.n	8007224 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
    }
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60bb      	str	r3, [r7, #8]
    }
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007248:	1e5a      	subs	r2, r3, #1
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007256:	429a      	cmp	r2, r3
 8007258:	d03e      	beq.n	80072d8 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d13a      	bne.n	80072d8 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fc3c 	bl	8005ae4 <uxListRemove>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	2201      	movs	r2, #1
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	43da      	mvns	r2, r3
 800727e:	4b1a      	ldr	r3, [pc, #104]	@ (80072e8 <xTaskPriorityDisinherit+0xfc>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4013      	ands	r3, r2
 8007284:	4a18      	ldr	r2, [pc, #96]	@ (80072e8 <xTaskPriorityDisinherit+0xfc>)
 8007286:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4619      	mov	r1, r3
 800728c:	204a      	movs	r0, #74	@ 0x4a
 800728e:	f002 fb87 	bl	80099a0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	f1c3 0205 	rsb	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	4b0e      	ldr	r3, [pc, #56]	@ (80072e8 <xTaskPriorityDisinherit+0xfc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	4a0c      	ldr	r2, [pc, #48]	@ (80072e8 <xTaskPriorityDisinherit+0xfc>)
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4a09      	ldr	r2, [pc, #36]	@ (80072ec <xTaskPriorityDisinherit+0x100>)
 80072c6:	441a      	add	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7fe fbab 	bl	8005a2a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80072d8:	697b      	ldr	r3, [r7, #20]
    }
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	2000036c 	.word	0x2000036c
 80072e8:	2000044c 	.word	0x2000044c
 80072ec:	20000370 	.word	0x20000370

080072f0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8083 	beq.w	8007410 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60fb      	str	r3, [r7, #12]
    }
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	e7fd      	b.n	8007326 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d902      	bls.n	800733a <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	e002      	b.n	8007340 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800733e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	429a      	cmp	r2, r3
 8007348:	d062      	beq.n	8007410 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	429a      	cmp	r2, r3
 8007352:	d15d      	bne.n	8007410 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007354:	4b30      	ldr	r3, [pc, #192]	@ (8007418 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	429a      	cmp	r2, r3
 800735c:	d10b      	bne.n	8007376 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60bb      	str	r3, [r7, #8]
    }
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4619      	mov	r1, r3
 800737a:	204a      	movs	r0, #74	@ 0x4a
 800737c:	f002 fb10 	bl	80099a0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	db04      	blt.n	800739e <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f1c3 0205 	rsb	r2, r3, #5
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	6959      	ldr	r1, [r3, #20]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4a1b      	ldr	r2, [pc, #108]	@ (800741c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80073ae:	4413      	add	r3, r2
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d12d      	bne.n	8007410 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fb93 	bl	8005ae4 <uxListRemove>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c8:	2201      	movs	r2, #1
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43da      	mvns	r2, r3
 80073d0:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4013      	ands	r3, r2
 80073d6:	4a12      	ldr	r2, [pc, #72]	@ (8007420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80073d8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	4618      	mov	r0, r3
 80073de:	f003 f861 	bl	800a4a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e6:	2201      	movs	r2, #1
 80073e8:	409a      	lsls	r2, r3
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007420 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a06      	ldr	r2, [pc, #24]	@ (800741c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007402:	441a      	add	r2, r3
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7fe fb0d 	bl	8005a2a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007410:	bf00      	nop
 8007412:	3720      	adds	r7, #32
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	2000036c 	.word	0x2000036c
 800741c:	20000370 	.word	0x20000370
 8007420:	2000044c 	.word	0x2000044c

08007424 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007428:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <pvTaskIncrementMutexHeldCount+0x24>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007430:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <pvTaskIncrementMutexHeldCount+0x24>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007436:	3201      	adds	r2, #1
 8007438:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800743a:	4b03      	ldr	r3, [pc, #12]	@ (8007448 <pvTaskIncrementMutexHeldCount+0x24>)
 800743c:	681b      	ldr	r3, [r3, #0]
    }
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	2000036c 	.word	0x2000036c

0800744c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007456:	4b32      	ldr	r3, [pc, #200]	@ (8007520 <prvAddCurrentTaskToDelayedList+0xd4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800745c:	4b31      	ldr	r3, [pc, #196]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3304      	adds	r3, #4
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fb3e 	bl	8005ae4 <uxListRemove>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800746e:	4b2d      	ldr	r3, [pc, #180]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	2201      	movs	r2, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43da      	mvns	r2, r3
 800747c:	4b2a      	ldr	r3, [pc, #168]	@ (8007528 <prvAddCurrentTaskToDelayedList+0xdc>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4013      	ands	r3, r2
 8007482:	4a29      	ldr	r2, [pc, #164]	@ (8007528 <prvAddCurrentTaskToDelayedList+0xdc>)
 8007484:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800748c:	d110      	bne.n	80074b0 <prvAddCurrentTaskToDelayedList+0x64>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00d      	beq.n	80074b0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8007494:	4b23      	ldr	r3, [pc, #140]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	211b      	movs	r1, #27
 800749a:	4618      	mov	r0, r3
 800749c:	f003 f844 	bl	800a528 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a0:	4b20      	ldr	r3, [pc, #128]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4820      	ldr	r0, [pc, #128]	@ (800752c <prvAddCurrentTaskToDelayedList+0xe0>)
 80074aa:	f7fe fabe 	bl	8005a2a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80074ae:	e032      	b.n	8007516 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4413      	add	r3, r2
 80074b6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d20f      	bcs.n	80074e8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80074c8:	4b16      	ldr	r3, [pc, #88]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2104      	movs	r1, #4
 80074ce:	4618      	mov	r0, r3
 80074d0:	f003 f82a 	bl	800a528 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d4:	4b16      	ldr	r3, [pc, #88]	@ (8007530 <prvAddCurrentTaskToDelayedList+0xe4>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f7fe fac6 	bl	8005a72 <vListInsert>
}
 80074e6:	e016      	b.n	8007516 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80074e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2104      	movs	r1, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f003 f81a 	bl	800a528 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007534 <prvAddCurrentTaskToDelayedList+0xe8>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <prvAddCurrentTaskToDelayedList+0xd8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe fab6 	bl	8005a72 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007506:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <prvAddCurrentTaskToDelayedList+0xec>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	429a      	cmp	r2, r3
 800750e:	d202      	bcs.n	8007516 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8007510:	4a09      	ldr	r2, [pc, #36]	@ (8007538 <prvAddCurrentTaskToDelayedList+0xec>)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	6013      	str	r3, [r2, #0]
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000448 	.word	0x20000448
 8007524:	2000036c 	.word	0x2000036c
 8007528:	2000044c 	.word	0x2000044c
 800752c:	20000430 	.word	0x20000430
 8007530:	20000400 	.word	0x20000400
 8007534:	200003fc 	.word	0x200003fc
 8007538:	20000464 	.word	0x20000464

0800753c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3b04      	subs	r3, #4
 800754c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3b04      	subs	r3, #4
 800755a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0201 	bic.w	r2, r3, #1
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3b04      	subs	r3, #4
 800756a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800756c:	4a0c      	ldr	r2, [pc, #48]	@ (80075a0 <pxPortInitialiseStack+0x64>)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b14      	subs	r3, #20
 8007576:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3b04      	subs	r3, #4
 8007582:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f06f 0202 	mvn.w	r2, #2
 800758a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3b20      	subs	r3, #32
 8007590:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007592:	68fb      	ldr	r3, [r7, #12]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	080075a5 	.word	0x080075a5

080075a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80075ae:	4b13      	ldr	r3, [pc, #76]	@ (80075fc <prvTaskExitError+0x58>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075b6:	d00b      	beq.n	80075d0 <prvTaskExitError+0x2c>
        __asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	60fb      	str	r3, [r7, #12]
    }
 80075ca:	bf00      	nop
 80075cc:	bf00      	nop
 80075ce:	e7fd      	b.n	80075cc <prvTaskExitError+0x28>
        __asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60bb      	str	r3, [r7, #8]
    }
 80075e2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80075e4:	bf00      	nop
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0fc      	beq.n	80075e6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	20000010 	.word	0x20000010

08007600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <pxCurrentTCBConst2>)
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	6808      	ldr	r0, [r1, #0]
 8007606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	f380 8809 	msr	PSP, r0
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	4770      	bx	lr
 800761c:	f3af 8000 	nop.w

08007620 <pxCurrentTCBConst2>:
 8007620:	2000036c 	.word	0x2000036c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007628:	4808      	ldr	r0, [pc, #32]	@ (800764c <prvPortStartFirstTask+0x24>)
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f380 8808 	msr	MSP, r0
 8007632:	f04f 0000 	mov.w	r0, #0
 8007636:	f380 8814 	msr	CONTROL, r0
 800763a:	b662      	cpsie	i
 800763c:	b661      	cpsie	f
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	df00      	svc	0
 8007648:	bf00      	nop
 800764a:	0000      	.short	0x0000
 800764c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop

08007654 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800765a:	4b47      	ldr	r3, [pc, #284]	@ (8007778 <xPortStartScheduler+0x124>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a47      	ldr	r2, [pc, #284]	@ (800777c <xPortStartScheduler+0x128>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d10b      	bne.n	800767c <xPortStartScheduler+0x28>
        __asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	613b      	str	r3, [r7, #16]
    }
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	e7fd      	b.n	8007678 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800767c:	4b3e      	ldr	r3, [pc, #248]	@ (8007778 <xPortStartScheduler+0x124>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a3f      	ldr	r2, [pc, #252]	@ (8007780 <xPortStartScheduler+0x12c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d10b      	bne.n	800769e <xPortStartScheduler+0x4a>
        __asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60fb      	str	r3, [r7, #12]
    }
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800769e:	4b39      	ldr	r3, [pc, #228]	@ (8007784 <xPortStartScheduler+0x130>)
 80076a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	22ff      	movs	r2, #255	@ 0xff
 80076ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	4b31      	ldr	r3, [pc, #196]	@ (8007788 <xPortStartScheduler+0x134>)
 80076c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076c6:	4b31      	ldr	r3, [pc, #196]	@ (800778c <xPortStartScheduler+0x138>)
 80076c8:	2207      	movs	r2, #7
 80076ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076cc:	e009      	b.n	80076e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80076ce:	4b2f      	ldr	r3, [pc, #188]	@ (800778c <xPortStartScheduler+0x138>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4a2d      	ldr	r2, [pc, #180]	@ (800778c <xPortStartScheduler+0x138>)
 80076d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b80      	cmp	r3, #128	@ 0x80
 80076ec:	d0ef      	beq.n	80076ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076ee:	4b27      	ldr	r3, [pc, #156]	@ (800778c <xPortStartScheduler+0x138>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1c3 0307 	rsb	r3, r3, #7
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d00b      	beq.n	8007712 <xPortStartScheduler+0xbe>
        __asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	60bb      	str	r3, [r7, #8]
    }
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	e7fd      	b.n	800770e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007712:	4b1e      	ldr	r3, [pc, #120]	@ (800778c <xPortStartScheduler+0x138>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	4a1c      	ldr	r2, [pc, #112]	@ (800778c <xPortStartScheduler+0x138>)
 800771a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800771c:	4b1b      	ldr	r3, [pc, #108]	@ (800778c <xPortStartScheduler+0x138>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007724:	4a19      	ldr	r2, [pc, #100]	@ (800778c <xPortStartScheduler+0x138>)
 8007726:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	b2da      	uxtb	r2, r3
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007730:	4b17      	ldr	r3, [pc, #92]	@ (8007790 <xPortStartScheduler+0x13c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a16      	ldr	r2, [pc, #88]	@ (8007790 <xPortStartScheduler+0x13c>)
 8007736:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800773a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800773c:	4b14      	ldr	r3, [pc, #80]	@ (8007790 <xPortStartScheduler+0x13c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a13      	ldr	r2, [pc, #76]	@ (8007790 <xPortStartScheduler+0x13c>)
 8007742:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007746:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007748:	f000 f968 	bl	8007a1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800774c:	4b11      	ldr	r3, [pc, #68]	@ (8007794 <xPortStartScheduler+0x140>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007752:	f000 f987 	bl	8007a64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007756:	4b10      	ldr	r3, [pc, #64]	@ (8007798 <xPortStartScheduler+0x144>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a0f      	ldr	r2, [pc, #60]	@ (8007798 <xPortStartScheduler+0x144>)
 800775c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007760:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007762:	f7ff ff61 	bl	8007628 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007766:	f7ff fa93 	bl	8006c90 <vTaskSwitchContext>
    prvTaskExitError();
 800776a:	f7ff ff1b 	bl	80075a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed00 	.word	0xe000ed00
 800777c:	410fc271 	.word	0x410fc271
 8007780:	410fc270 	.word	0x410fc270
 8007784:	e000e400 	.word	0xe000e400
 8007788:	20000470 	.word	0x20000470
 800778c:	20000474 	.word	0x20000474
 8007790:	e000ed20 	.word	0xe000ed20
 8007794:	20000010 	.word	0x20000010
 8007798:	e000ef34 	.word	0xe000ef34

0800779c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077a2:	4b38      	ldr	r3, [pc, #224]	@ (8007884 <vInitPrioGroupValue+0xe8>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a38      	ldr	r2, [pc, #224]	@ (8007888 <vInitPrioGroupValue+0xec>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d10b      	bne.n	80077c4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	613b      	str	r3, [r7, #16]
    }
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007884 <vInitPrioGroupValue+0xe8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a30      	ldr	r2, [pc, #192]	@ (800788c <vInitPrioGroupValue+0xf0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d10b      	bne.n	80077e6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
    }
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007890 <vInitPrioGroupValue+0xf4>)
 80077e8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	22ff      	movs	r2, #255	@ 0xff
 80077f6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007808:	b2da      	uxtb	r2, r3
 800780a:	4b22      	ldr	r3, [pc, #136]	@ (8007894 <vInitPrioGroupValue+0xf8>)
 800780c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800780e:	4b22      	ldr	r3, [pc, #136]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 8007810:	2207      	movs	r2, #7
 8007812:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007814:	e009      	b.n	800782a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007816:	4b20      	ldr	r3, [pc, #128]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3b01      	subs	r3, #1
 800781c:	4a1e      	ldr	r2, [pc, #120]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 800781e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007832:	2b80      	cmp	r3, #128	@ 0x80
 8007834:	d0ef      	beq.n	8007816 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007836:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1c3 0307 	rsb	r3, r3, #7
 800783e:	2b04      	cmp	r3, #4
 8007840:	d00b      	beq.n	800785a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	60bb      	str	r3, [r7, #8]
    }
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800785a:	4b0f      	ldr	r3, [pc, #60]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	4a0d      	ldr	r2, [pc, #52]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 8007862:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007864:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800786c:	4a0a      	ldr	r2, [pc, #40]	@ (8007898 <vInitPrioGroupValue+0xfc>)
 800786e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007878:	bf00      	nop
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	e000ed00 	.word	0xe000ed00
 8007888:	410fc271 	.word	0x410fc271
 800788c:	410fc270 	.word	0x410fc270
 8007890:	e000e400 	.word	0xe000e400
 8007894:	20000470 	.word	0x20000470
 8007898:	20000474 	.word	0x20000474

0800789c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
        __asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	607b      	str	r3, [r7, #4]
    }
 80078b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80078b6:	4b10      	ldr	r3, [pc, #64]	@ (80078f8 <vPortEnterCritical+0x5c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	4a0e      	ldr	r2, [pc, #56]	@ (80078f8 <vPortEnterCritical+0x5c>)
 80078be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80078c0:	4b0d      	ldr	r3, [pc, #52]	@ (80078f8 <vPortEnterCritical+0x5c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d110      	bne.n	80078ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078c8:	4b0c      	ldr	r3, [pc, #48]	@ (80078fc <vPortEnterCritical+0x60>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <vPortEnterCritical+0x4e>
        __asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	603b      	str	r3, [r7, #0]
    }
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <vPortEnterCritical+0x4a>
    }
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000010 	.word	0x20000010
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007906:	4b12      	ldr	r3, [pc, #72]	@ (8007950 <vPortExitCritical+0x50>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <vPortExitCritical+0x26>
        __asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	607b      	str	r3, [r7, #4]
    }
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007926:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <vPortExitCritical+0x50>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4a08      	ldr	r2, [pc, #32]	@ (8007950 <vPortExitCritical+0x50>)
 800792e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007930:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <vPortExitCritical+0x50>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <vPortExitCritical+0x44>
 8007938:	2300      	movs	r3, #0
 800793a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007942:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000010 	.word	0x20000010
	...

08007960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007960:	f3ef 8009 	mrs	r0, PSP
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	4b15      	ldr	r3, [pc, #84]	@ (80079c0 <pxCurrentTCBConst>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	f01e 0f10 	tst.w	lr, #16
 8007970:	bf08      	it	eq
 8007972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797a:	6010      	str	r0, [r2, #0]
 800797c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007984:	f380 8811 	msr	BASEPRI, r0
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f7ff f97e 	bl	8006c90 <vTaskSwitchContext>
 8007994:	f04f 0000 	mov.w	r0, #0
 8007998:	f380 8811 	msr	BASEPRI, r0
 800799c:	bc09      	pop	{r0, r3}
 800799e:	6819      	ldr	r1, [r3, #0]
 80079a0:	6808      	ldr	r0, [r1, #0]
 80079a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a6:	f01e 0f10 	tst.w	lr, #16
 80079aa:	bf08      	it	eq
 80079ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079b0:	f380 8809 	msr	PSP, r0
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	f3af 8000 	nop.w

080079c0 <pxCurrentTCBConst>:
 80079c0:	2000036c 	.word	0x2000036c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop

080079c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
        __asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	607b      	str	r3, [r7, #4]
    }
 80079e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80079e2:	f002 fc45 	bl	800a270 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80079e6:	f7ff f895 	bl	8006b14 <xTaskIncrementTick>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80079f0:	f002 fc9c 	bl	800a32c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079f4:	4b08      	ldr	r3, [pc, #32]	@ (8007a18 <SysTick_Handler+0x50>)
 80079f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e001      	b.n	8007a02 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80079fe:	f002 fc79 	bl	800a2f4 <SEGGER_SYSVIEW_RecordExitISR>
 8007a02:	2300      	movs	r3, #0
 8007a04:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	f383 8811 	msr	BASEPRI, r3
    }
 8007a0c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a26:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <vPortSetupTimerInterrupt+0x38>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <vPortSetupTimerInterrupt+0x3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	@ (8007a5c <vPortSetupTimerInterrupt+0x40>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	4a09      	ldr	r2, [pc, #36]	@ (8007a60 <vPortSetupTimerInterrupt+0x44>)
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a3e:	4b04      	ldr	r3, [pc, #16]	@ (8007a50 <vPortSetupTimerInterrupt+0x34>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e010 	.word	0xe000e010
 8007a54:	e000e018 	.word	0xe000e018
 8007a58:	20000000 	.word	0x20000000
 8007a5c:	10624dd3 	.word	0x10624dd3
 8007a60:	e000e014 	.word	0xe000e014

08007a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a74 <vPortEnableVFP+0x10>
 8007a68:	6801      	ldr	r1, [r0, #0]
 8007a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a6e:	6001      	str	r1, [r0, #0]
 8007a70:	4770      	bx	lr
 8007a72:	0000      	.short	0x0000
 8007a74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop

08007a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007a82:	f3ef 8305 	mrs	r3, IPSR
 8007a86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d915      	bls.n	8007aba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8e:	4a18      	ldr	r2, [pc, #96]	@ (8007af0 <vPortValidateInterruptPriority+0x74>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a98:	4b16      	ldr	r3, [pc, #88]	@ (8007af4 <vPortValidateInterruptPriority+0x78>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	7afa      	ldrb	r2, [r7, #11]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d20b      	bcs.n	8007aba <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	607b      	str	r3, [r7, #4]
    }
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007aba:	4b0f      	ldr	r3, [pc, #60]	@ (8007af8 <vPortValidateInterruptPriority+0x7c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <vPortValidateInterruptPriority+0x80>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d90b      	bls.n	8007ae2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	603b      	str	r3, [r7, #0]
    }
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	e7fd      	b.n	8007ade <vPortValidateInterruptPriority+0x62>
    }
 8007ae2:	bf00      	nop
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	e000e3f0 	.word	0xe000e3f0
 8007af4:	20000470 	.word	0x20000470
 8007af8:	e000ed0c 	.word	0xe000ed0c
 8007afc:	20000474 	.word	0x20000474

08007b00 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	@ 0x28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007b0c:	f7fe ff30 	bl	8006970 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007b10:	4b66      	ldr	r3, [pc, #408]	@ (8007cac <pvPortMalloc+0x1ac>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007b18:	f000 f938 	bl	8007d8c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b1c:	4b64      	ldr	r3, [pc, #400]	@ (8007cb0 <pvPortMalloc+0x1b0>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4013      	ands	r3, r2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f040 80a9 	bne.w	8007c7c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d02e      	beq.n	8007b8e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007b30:	2208      	movs	r2, #8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d228      	bcs.n	8007b8e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4413      	add	r3, r2
 8007b42:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d022      	beq.n	8007b94 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	3308      	adds	r3, #8
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d215      	bcs.n	8007b88 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f023 0307 	bic.w	r3, r3, #7
 8007b62:	3308      	adds	r3, #8
 8007b64:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d011      	beq.n	8007b94 <pvPortMalloc+0x94>
        __asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	617b      	str	r3, [r7, #20]
    }
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b8c:	e002      	b.n	8007b94 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	e000      	b.n	8007b96 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b94:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d06f      	beq.n	8007c7c <pvPortMalloc+0x17c>
 8007b9c:	4b45      	ldr	r3, [pc, #276]	@ (8007cb4 <pvPortMalloc+0x1b4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d86a      	bhi.n	8007c7c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007ba6:	4b44      	ldr	r3, [pc, #272]	@ (8007cb8 <pvPortMalloc+0x1b8>)
 8007ba8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007baa:	4b43      	ldr	r3, [pc, #268]	@ (8007cb8 <pvPortMalloc+0x1b8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb0:	e004      	b.n	8007bbc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d903      	bls.n	8007bce <pvPortMalloc+0xce>
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f1      	bne.n	8007bb2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007bce:	4b37      	ldr	r3, [pc, #220]	@ (8007cac <pvPortMalloc+0x1ac>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d051      	beq.n	8007c7c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	4413      	add	r3, r2
 8007be0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	1ad2      	subs	r2, r2, r3
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d920      	bls.n	8007c3c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4413      	add	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <pvPortMalloc+0x124>
        __asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	613b      	str	r3, [r7, #16]
    }
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	1ad2      	subs	r2, r2, r3
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c36:	69b8      	ldr	r0, [r7, #24]
 8007c38:	f000 f90a 	bl	8007e50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb4 <pvPortMalloc+0x1b4>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb4 <pvPortMalloc+0x1b4>)
 8007c48:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb4 <pvPortMalloc+0x1b4>)
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <pvPortMalloc+0x1bc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d203      	bcs.n	8007c5e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c56:	4b17      	ldr	r3, [pc, #92]	@ (8007cb4 <pvPortMalloc+0x1b4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <pvPortMalloc+0x1bc>)
 8007c5c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	4b13      	ldr	r3, [pc, #76]	@ (8007cb0 <pvPortMalloc+0x1b0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007c72:	4b13      	ldr	r3, [pc, #76]	@ (8007cc0 <pvPortMalloc+0x1c0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3301      	adds	r3, #1
 8007c78:	4a11      	ldr	r2, [pc, #68]	@ (8007cc0 <pvPortMalloc+0x1c0>)
 8007c7a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007c7c:	f7fe fe86 	bl	800698c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <pvPortMalloc+0x1a2>
        __asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	60fb      	str	r3, [r7, #12]
    }
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <pvPortMalloc+0x19e>
    return pvReturn;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3728      	adds	r7, #40	@ 0x28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20019480 	.word	0x20019480
 8007cb0:	20019494 	.word	0x20019494
 8007cb4:	20019484 	.word	0x20019484
 8007cb8:	20019478 	.word	0x20019478
 8007cbc:	20019488 	.word	0x20019488
 8007cc0:	2001948c 	.word	0x2001948c

08007cc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d04f      	beq.n	8007d76 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	425b      	negs	r3, r3
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4413      	add	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <vPortFree+0xbc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <vPortFree+0x46>
        __asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60fb      	str	r3, [r7, #12]
    }
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
 8007d08:	e7fd      	b.n	8007d06 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <vPortFree+0x66>
        __asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60bb      	str	r3, [r7, #8]
    }
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <vPortFree+0xbc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01e      	beq.n	8007d76 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d11a      	bne.n	8007d76 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b0e      	ldr	r3, [pc, #56]	@ (8007d80 <vPortFree+0xbc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007d50:	f7fe fe0e 	bl	8006970 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	4b0a      	ldr	r3, [pc, #40]	@ (8007d84 <vPortFree+0xc0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	4a09      	ldr	r2, [pc, #36]	@ (8007d84 <vPortFree+0xc0>)
 8007d60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d62:	6938      	ldr	r0, [r7, #16]
 8007d64:	f000 f874 	bl	8007e50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007d68:	4b07      	ldr	r3, [pc, #28]	@ (8007d88 <vPortFree+0xc4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	4a06      	ldr	r2, [pc, #24]	@ (8007d88 <vPortFree+0xc4>)
 8007d70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007d72:	f7fe fe0b 	bl	800698c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007d76:	bf00      	nop
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20019494 	.word	0x20019494
 8007d84:	20019484 	.word	0x20019484
 8007d88:	20019490 	.word	0x20019490

08007d8c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d92:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8007d96:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007d98:	4b27      	ldr	r3, [pc, #156]	@ (8007e38 <prvHeapInit+0xac>)
 8007d9a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00c      	beq.n	8007dc0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3307      	adds	r3, #7
 8007daa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	4a1f      	ldr	r2, [pc, #124]	@ (8007e38 <prvHeapInit+0xac>)
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007e3c <prvHeapInit+0xb0>)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007dca:	4b1c      	ldr	r3, [pc, #112]	@ (8007e3c <prvHeapInit+0xb0>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007dd8:	2208      	movs	r2, #8
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0307 	bic.w	r3, r3, #7
 8007de6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a15      	ldr	r2, [pc, #84]	@ (8007e40 <prvHeapInit+0xb4>)
 8007dec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007dee:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <prvHeapInit+0xb4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007df6:	4b12      	ldr	r3, [pc, #72]	@ (8007e40 <prvHeapInit+0xb4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	1ad2      	subs	r2, r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <prvHeapInit+0xb4>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a0a      	ldr	r2, [pc, #40]	@ (8007e44 <prvHeapInit+0xb8>)
 8007e1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a09      	ldr	r2, [pc, #36]	@ (8007e48 <prvHeapInit+0xbc>)
 8007e22:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e24:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <prvHeapInit+0xc0>)
 8007e26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e2a:	601a      	str	r2, [r3, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	20000478 	.word	0x20000478
 8007e3c:	20019478 	.word	0x20019478
 8007e40:	20019480 	.word	0x20019480
 8007e44:	20019488 	.word	0x20019488
 8007e48:	20019484 	.word	0x20019484
 8007e4c:	20019494 	.word	0x20019494

08007e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e58:	4b28      	ldr	r3, [pc, #160]	@ (8007efc <prvInsertBlockIntoFreeList+0xac>)
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e002      	b.n	8007e64 <prvInsertBlockIntoFreeList+0x14>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d8f7      	bhi.n	8007e5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4413      	add	r3, r2
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d108      	bne.n	8007e92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	441a      	add	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	441a      	add	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d118      	bne.n	8007ed8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <prvInsertBlockIntoFreeList+0xb0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d00d      	beq.n	8007ece <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	441a      	add	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	e008      	b.n	8007ee0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ece:	4b0c      	ldr	r3, [pc, #48]	@ (8007f00 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	e003      	b.n	8007ee0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d002      	beq.n	8007eee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20019478 	.word	0x20019478
 8007f00:	20019480 	.word	0x20019480

08007f04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007f08:	4803      	ldr	r0, [pc, #12]	@ (8007f18 <_cbSendSystemDesc+0x14>)
 8007f0a:	f002 f95b 	bl	800a1c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007f0e:	4803      	ldr	r0, [pc, #12]	@ (8007f1c <_cbSendSystemDesc+0x18>)
 8007f10:	f002 f958 	bl	800a1c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007f14:	bf00      	nop
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	0800ab3c 	.word	0x0800ab3c
 8007f1c:	0800ab80 	.word	0x0800ab80

08007f20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007f24:	4b06      	ldr	r3, [pc, #24]	@ (8007f40 <SEGGER_SYSVIEW_Conf+0x20>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	4b05      	ldr	r3, [pc, #20]	@ (8007f40 <SEGGER_SYSVIEW_Conf+0x20>)
 8007f2a:	6819      	ldr	r1, [r3, #0]
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <SEGGER_SYSVIEW_Conf+0x24>)
 8007f2e:	4a06      	ldr	r2, [pc, #24]	@ (8007f48 <SEGGER_SYSVIEW_Conf+0x28>)
 8007f30:	f001 fcc4 	bl	80098bc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007f34:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8007f38:	f001 fd04 	bl	8009944 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007f3c:	bf00      	nop
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000000 	.word	0x20000000
 8007f44:	08007f05 	.word	0x08007f05
 8007f48:	0800ad90 	.word	0x0800ad90

08007f4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
 8007f56:	e033      	b.n	8007fc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007f58:	491e      	ldr	r1, [pc, #120]	@ (8007fd4 <_cbSendTaskList+0x88>)
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	491a      	ldr	r1, [pc, #104]	@ (8007fd4 <_cbSendTaskList+0x88>)
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	3304      	adds	r3, #4
 8007f78:	6819      	ldr	r1, [r3, #0]
 8007f7a:	4c16      	ldr	r4, [pc, #88]	@ (8007fd4 <_cbSendTaskList+0x88>)
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4423      	add	r3, r4
 8007f88:	3308      	adds	r3, #8
 8007f8a:	681c      	ldr	r4, [r3, #0]
 8007f8c:	4d11      	ldr	r5, [pc, #68]	@ (8007fd4 <_cbSendTaskList+0x88>)
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	442b      	add	r3, r5
 8007f9a:	330c      	adds	r3, #12
 8007f9c:	681d      	ldr	r5, [r3, #0]
 8007f9e:	4e0d      	ldr	r6, [pc, #52]	@ (8007fd4 <_cbSendTaskList+0x88>)
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4433      	add	r3, r6
 8007fac:	3310      	adds	r3, #16
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	f000 f979 	bl	80082ac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <_cbSendTaskList+0x8c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d3c6      	bcc.n	8007f58 <_cbSendTaskList+0xc>
  }
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd4:	20019498 	.word	0x20019498
 8007fd8:	20019538 	.word	0x20019538

08007fdc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007fe4:	f7fe fd84 	bl	8006af0 <xTaskGetTickCountFromISR>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2200      	movs	r2, #0
 8007fec:	469a      	mov	sl, r3
 8007fee:	4693      	mov	fp, r2
 8007ff0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	f04f 0a00 	mov.w	sl, #0
 8008000:	f04f 0b00 	mov.w	fp, #0
 8008004:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008008:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800800c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008010:	4652      	mov	r2, sl
 8008012:	465b      	mov	r3, fp
 8008014:	1a14      	subs	r4, r2, r0
 8008016:	eb63 0501 	sbc.w	r5, r3, r1
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	00ab      	lsls	r3, r5, #2
 8008024:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008028:	00a2      	lsls	r2, r4, #2
 800802a:	4614      	mov	r4, r2
 800802c:	461d      	mov	r5, r3
 800802e:	eb14 0800 	adds.w	r8, r4, r0
 8008032:	eb45 0901 	adc.w	r9, r5, r1
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800804a:	4690      	mov	r8, r2
 800804c:	4699      	mov	r9, r3
 800804e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008052:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008064 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af02      	add	r7, sp, #8
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008072:	2205      	movs	r2, #5
 8008074:	492b      	ldr	r1, [pc, #172]	@ (8008124 <SYSVIEW_AddTask+0xc0>)
 8008076:	68b8      	ldr	r0, [r7, #8]
 8008078:	f002 fc5f 	bl	800a93a <memcmp>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d04b      	beq.n	800811a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008082:	4b29      	ldr	r3, [pc, #164]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b07      	cmp	r3, #7
 8008088:	d903      	bls.n	8008092 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800808a:	4828      	ldr	r0, [pc, #160]	@ (800812c <SYSVIEW_AddTask+0xc8>)
 800808c:	f002 fbac 	bl	800a7e8 <SEGGER_SYSVIEW_Warn>
    return;
 8008090:	e044      	b.n	800811c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008092:	4b25      	ldr	r3, [pc, #148]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4926      	ldr	r1, [pc, #152]	@ (8008130 <SYSVIEW_AddTask+0xcc>)
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80080a6:	4b20      	ldr	r3, [pc, #128]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4921      	ldr	r1, [pc, #132]	@ (8008130 <SYSVIEW_AddTask+0xcc>)
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	3304      	adds	r3, #4
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80080bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	491b      	ldr	r1, [pc, #108]	@ (8008130 <SYSVIEW_AddTask+0xcc>)
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	3308      	adds	r3, #8
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80080d2:	4b15      	ldr	r3, [pc, #84]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4916      	ldr	r1, [pc, #88]	@ (8008130 <SYSVIEW_AddTask+0xcc>)
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	330c      	adds	r3, #12
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80080e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4910      	ldr	r1, [pc, #64]	@ (8008130 <SYSVIEW_AddTask+0xcc>)
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	3310      	adds	r3, #16
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80080fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	4a08      	ldr	r2, [pc, #32]	@ (8008128 <SYSVIEW_AddTask+0xc4>)
 8008106:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68b9      	ldr	r1, [r7, #8]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 f8ca 	bl	80082ac <SYSVIEW_SendTaskInfo>
 8008118:	e000      	b.n	800811c <SYSVIEW_AddTask+0xb8>
    return;
 800811a:	bf00      	nop

}
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	0800ab90 	.word	0x0800ab90
 8008128:	20019538 	.word	0x20019538
 800812c:	0800ab98 	.word	0x0800ab98
 8008130:	20019498 	.word	0x20019498

08008134 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800813c:	4b59      	ldr	r3, [pc, #356]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 80ab 	beq.w	800829c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e00d      	b.n	8008168 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800814c:	4956      	ldr	r1, [pc, #344]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	440b      	add	r3, r1
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	429a      	cmp	r2, r3
 8008160:	d008      	beq.n	8008174 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	4b4e      	ldr	r3, [pc, #312]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	429a      	cmp	r2, r3
 8008170:	d3ec      	bcc.n	800814c <SYSVIEW_DeleteTask+0x18>
 8008172:	e000      	b.n	8008176 <SYSVIEW_DeleteTask+0x42>
      break;
 8008174:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8008176:	4b4b      	ldr	r3, [pc, #300]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3b01      	subs	r3, #1
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	429a      	cmp	r2, r3
 8008180:	d111      	bne.n	80081a6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4a46      	ldr	r2, [pc, #280]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 800818e:	4413      	add	r3, r2
 8008190:	2214      	movs	r2, #20
 8008192:	2100      	movs	r1, #0
 8008194:	4618      	mov	r0, r3
 8008196:	f002 fbe0 	bl	800a95a <memset>
    _NumTasks--;
 800819a:	4b42      	ldr	r3, [pc, #264]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3b01      	subs	r3, #1
 80081a0:	4a40      	ldr	r2, [pc, #256]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	e07b      	b.n	800829e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80081a6:	4b3f      	ldr	r3, [pc, #252]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d276      	bcs.n	800829e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80081b0:	4b3c      	ldr	r3, [pc, #240]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	1e5a      	subs	r2, r3, #1
 80081b6:	493c      	ldr	r1, [pc, #240]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	4838      	ldr	r0, [pc, #224]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4403      	add	r3, r0
 80081d2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80081d4:	4b33      	ldr	r3, [pc, #204]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	1e5a      	subs	r2, r3, #1
 80081da:	4933      	ldr	r1, [pc, #204]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	3304      	adds	r3, #4
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	482f      	ldr	r0, [pc, #188]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4403      	add	r3, r0
 80081f8:	3304      	adds	r3, #4
 80081fa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80081fc:	4b29      	ldr	r3, [pc, #164]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	1e5a      	subs	r2, r3, #1
 8008202:	4929      	ldr	r1, [pc, #164]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	3308      	adds	r3, #8
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	4825      	ldr	r0, [pc, #148]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4403      	add	r3, r0
 8008220:	3308      	adds	r3, #8
 8008222:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8008224:	4b1f      	ldr	r3, [pc, #124]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	1e5a      	subs	r2, r3, #1
 800822a:	491f      	ldr	r1, [pc, #124]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 800822c:	4613      	mov	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	330c      	adds	r3, #12
 8008238:	6819      	ldr	r1, [r3, #0]
 800823a:	481b      	ldr	r0, [pc, #108]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4403      	add	r3, r0
 8008248:	330c      	adds	r3, #12
 800824a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800824c:	4b15      	ldr	r3, [pc, #84]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	1e5a      	subs	r2, r3, #1
 8008252:	4915      	ldr	r1, [pc, #84]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	3310      	adds	r3, #16
 8008260:	6819      	ldr	r1, [r3, #0]
 8008262:	4811      	ldr	r0, [pc, #68]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4403      	add	r3, r0
 8008270:	3310      	adds	r3, #16
 8008272:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8008274:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	1e5a      	subs	r2, r3, #1
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4a09      	ldr	r2, [pc, #36]	@ (80082a8 <SYSVIEW_DeleteTask+0x174>)
 8008284:	4413      	add	r3, r2
 8008286:	2214      	movs	r2, #20
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f002 fb65 	bl	800a95a <memset>
    _NumTasks--;
 8008290:	4b04      	ldr	r3, [pc, #16]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3b01      	subs	r3, #1
 8008296:	4a03      	ldr	r2, [pc, #12]	@ (80082a4 <SYSVIEW_DeleteTask+0x170>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e000      	b.n	800829e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800829c:	bf00      	nop
  }
}
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20019538 	.word	0x20019538
 80082a8:	20019498 	.word	0x20019498

080082ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	@ 0x28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80082ba:	f107 0314 	add.w	r3, r7, #20
 80082be:	2214      	movs	r2, #20
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 fb49 	bl	800a95a <memset>
  TaskInfo.TaskID     = TaskID;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80082dc:	f107 0314 	add.w	r3, r7, #20
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 fe77 	bl	8009fd4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80082e6:	bf00      	nop
 80082e8:	3728      	adds	r7, #40	@ 0x28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <__NVIC_EnableIRQ>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	db0b      	blt.n	800831a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f003 021f 	and.w	r2, r3, #31
 8008308:	4907      	ldr	r1, [pc, #28]	@ (8008328 <__NVIC_EnableIRQ+0x38>)
 800830a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	2001      	movs	r0, #1
 8008312:	fa00 f202 	lsl.w	r2, r0, r2
 8008316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	e000e100 	.word	0xe000e100

0800832c <__NVIC_SetPriority>:
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800833c:	2b00      	cmp	r3, #0
 800833e:	db0a      	blt.n	8008356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	490c      	ldr	r1, [pc, #48]	@ (8008378 <__NVIC_SetPriority+0x4c>)
 8008346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834a:	0112      	lsls	r2, r2, #4
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	440b      	add	r3, r1
 8008350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008354:	e00a      	b.n	800836c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4908      	ldr	r1, [pc, #32]	@ (800837c <__NVIC_SetPriority+0x50>)
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	3b04      	subs	r3, #4
 8008364:	0112      	lsls	r2, r2, #4
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	440b      	add	r3, r1
 800836a:	761a      	strb	r2, [r3, #24]
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	e000e100 	.word	0xe000e100
 800837c:	e000ed00 	.word	0xe000ed00

08008380 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8008386:	f002 fa8b 	bl	800a8a0 <SEGGER_SYSVIEW_IsStarted>
 800838a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8008392:	f001 fca3 	bl	8009cdc <SEGGER_SYSVIEW_Start>
  }
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80083aa:	4b0c      	ldr	r3, [pc, #48]	@ (80083dc <_cbOnUARTRx+0x3c>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d806      	bhi.n	80083c0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <_cbOnUARTRx+0x3c>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	4b08      	ldr	r3, [pc, #32]	@ (80083dc <_cbOnUARTRx+0x3c>)
 80083bc:	701a      	strb	r2, [r3, #0]
    goto Done;
 80083be:	e009      	b.n	80083d4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80083c0:	f7ff ffde 	bl	8008380 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <_cbOnUARTRx+0x3c>)
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	1dfb      	adds	r3, r7, #7
 80083cc:	2201      	movs	r2, #1
 80083ce:	4619      	mov	r1, r3
 80083d0:	f000 fb9a 	bl	8008b08 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80083d4:	bf00      	nop
}
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000014 	.word	0x20000014

080083e0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80083e8:	4b14      	ldr	r3, [pc, #80]	@ (800843c <_cbOnUARTTx+0x5c>)
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d80f      	bhi.n	8008410 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80083f0:	4b12      	ldr	r3, [pc, #72]	@ (800843c <_cbOnUARTTx+0x5c>)
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <_cbOnUARTTx+0x60>)
 80083f8:	5c9a      	ldrb	r2, [r3, r2]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80083fe:	4b0f      	ldr	r3, [pc, #60]	@ (800843c <_cbOnUARTTx+0x5c>)
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	3301      	adds	r3, #1
 8008404:	b2da      	uxtb	r2, r3
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <_cbOnUARTTx+0x5c>)
 8008408:	705a      	strb	r2, [r3, #1]
    r = 1;
 800840a:	2301      	movs	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800840e:	e00f      	b.n	8008430 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8008410:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <_cbOnUARTTx+0x5c>)
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fa19 	bl	8008850 <SEGGER_RTT_ReadUpBufferNoLock>
 800841e:	4603      	mov	r3, r0
 8008420:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	da02      	bge.n	800842e <_cbOnUARTTx+0x4e>
    r = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e000      	b.n	8008430 <_cbOnUARTTx+0x50>
  }
Done:
 800842e:	bf00      	nop
  return r;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000014 	.word	0x20000014
 8008440:	0800ad98 	.word	0x0800ad98

08008444 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800844c:	4a04      	ldr	r2, [pc, #16]	@ (8008460 <SEGGER_UART_init+0x1c>)
 800844e:	4905      	ldr	r1, [pc, #20]	@ (8008464 <SEGGER_UART_init+0x20>)
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f863 	bl	800851c <HIF_UART_Init>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	080083a1 	.word	0x080083a1
 8008464:	080083e1 	.word	0x080083e1

08008468 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800846e:	4b1e      	ldr	r3, [pc, #120]	@ (80084e8 <USART2_IRQHandler+0x80>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d011      	beq.n	80084a2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800847e:	4b1b      	ldr	r3, [pc, #108]	@ (80084ec <USART2_IRQHandler+0x84>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 030b 	and.w	r3, r3, #11
 800848c:	2b00      	cmp	r3, #0
 800848e:	d108      	bne.n	80084a2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8008490:	4b17      	ldr	r3, [pc, #92]	@ (80084f0 <USART2_IRQHandler+0x88>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8008498:	4b15      	ldr	r3, [pc, #84]	@ (80084f0 <USART2_IRQHandler+0x88>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	79fa      	ldrb	r2, [r7, #7]
 800849e:	4610      	mov	r0, r2
 80084a0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01a      	beq.n	80084e2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80084ac:	4b11      	ldr	r3, [pc, #68]	@ (80084f4 <USART2_IRQHandler+0x8c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d015      	beq.n	80084e0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80084b4:	4b0f      	ldr	r3, [pc, #60]	@ (80084f4 <USART2_IRQHandler+0x8c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	1dfa      	adds	r2, r7, #7
 80084ba:	4610      	mov	r0, r2
 80084bc:	4798      	blx	r3
 80084be:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80084c6:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <USART2_IRQHandler+0x90>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a0b      	ldr	r2, [pc, #44]	@ (80084f8 <USART2_IRQHandler+0x90>)
 80084cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e006      	b.n	80084e2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <USART2_IRQHandler+0x80>)
 80084d6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80084d8:	79fa      	ldrb	r2, [r7, #7]
 80084da:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <USART2_IRQHandler+0x84>)
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e000      	b.n	80084e2 <USART2_IRQHandler+0x7a>
      return;
 80084e0:	bf00      	nop
    }
  }
}
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40004400 	.word	0x40004400
 80084ec:	40004404 	.word	0x40004404
 80084f0:	2001953c 	.word	0x2001953c
 80084f4:	20019540 	.word	0x20019540
 80084f8:	4000440c 	.word	0x4000440c

080084fc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8008500:	4b05      	ldr	r3, [pc, #20]	@ (8008518 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a04      	ldr	r2, [pc, #16]	@ (8008518 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8008506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	4000440c 	.word	0x4000440c

0800851c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8008528:	4b2e      	ldr	r3, [pc, #184]	@ (80085e4 <HIF_UART_Init+0xc8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a2d      	ldr	r2, [pc, #180]	@ (80085e4 <HIF_UART_Init+0xc8>)
 800852e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008532:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8008534:	4b2c      	ldr	r3, [pc, #176]	@ (80085e8 <HIF_UART_Init+0xcc>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a2b      	ldr	r2, [pc, #172]	@ (80085e8 <HIF_UART_Init+0xcc>)
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8008540:	4b2a      	ldr	r3, [pc, #168]	@ (80085ec <HIF_UART_Init+0xd0>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800854c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008554:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8008556:	4a25      	ldr	r2, [pc, #148]	@ (80085ec <HIF_UART_Init+0xd0>)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800855c:	4b24      	ldr	r3, [pc, #144]	@ (80085f0 <HIF_UART_Init+0xd4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008568:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8008570:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8008572:	4a1f      	ldr	r2, [pc, #124]	@ (80085f0 <HIF_UART_Init+0xd4>)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8008578:	4b1e      	ldr	r3, [pc, #120]	@ (80085f4 <HIF_UART_Init+0xd8>)
 800857a:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800857e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8008580:	4b1d      	ldr	r3, [pc, #116]	@ (80085f8 <HIF_UART_Init+0xdc>)
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8008586:	4b1d      	ldr	r3, [pc, #116]	@ (80085fc <HIF_UART_Init+0xe0>)
 8008588:	2280      	movs	r2, #128	@ 0x80
 800858a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8008592:	4a1b      	ldr	r2, [pc, #108]	@ (8008600 <HIF_UART_Init+0xe4>)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	fbb2 f3f3 	udiv	r3, r2, r3
 800859a:	3301      	adds	r3, #1
 800859c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085aa:	d302      	bcc.n	80085b2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80085ac:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80085b0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <HIF_UART_Init+0xa6>
    SEGGER_USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	4a11      	ldr	r2, [pc, #68]	@ (8008604 <HIF_UART_Init+0xe8>)
 80085be:	b29b      	uxth	r3, r3
 80085c0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80085c2:	4a11      	ldr	r2, [pc, #68]	@ (8008608 <HIF_UART_Init+0xec>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80085c8:	4a10      	ldr	r2, [pc, #64]	@ (800860c <HIF_UART_Init+0xf0>)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80085ce:	2106      	movs	r1, #6
 80085d0:	2026      	movs	r0, #38	@ 0x26
 80085d2:	f7ff feab 	bl	800832c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80085d6:	2026      	movs	r0, #38	@ 0x26
 80085d8:	f7ff fe8a 	bl	80082f0 <__NVIC_EnableIRQ>
}
 80085dc:	bf00      	nop
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40023840 	.word	0x40023840
 80085e8:	40023830 	.word	0x40023830
 80085ec:	40020020 	.word	0x40020020
 80085f0:	40020000 	.word	0x40020000
 80085f4:	4000440c 	.word	0x4000440c
 80085f8:	40004410 	.word	0x40004410
 80085fc:	40004414 	.word	0x40004414
 8008600:	0501bd00 	.word	0x0501bd00
 8008604:	40004408 	.word	0x40004408
 8008608:	2001953c 	.word	0x2001953c
 800860c:	20019540 	.word	0x20019540

08008610 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008616:	4b24      	ldr	r3, [pc, #144]	@ (80086a8 <_DoInit+0x98>)
 8008618:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2203      	movs	r2, #3
 800861e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2203      	movs	r2, #3
 8008624:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a20      	ldr	r2, [pc, #128]	@ (80086ac <_DoInit+0x9c>)
 800862a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a20      	ldr	r2, [pc, #128]	@ (80086b0 <_DoInit+0xa0>)
 8008630:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008638:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a17      	ldr	r2, [pc, #92]	@ (80086ac <_DoInit+0x9c>)
 8008650:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a17      	ldr	r2, [pc, #92]	@ (80086b4 <_DoInit+0xa4>)
 8008656:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2210      	movs	r2, #16
 800865c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3307      	adds	r3, #7
 8008674:	4a10      	ldr	r2, [pc, #64]	@ (80086b8 <_DoInit+0xa8>)
 8008676:	6810      	ldr	r0, [r2, #0]
 8008678:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800867a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a0e      	ldr	r2, [pc, #56]	@ (80086bc <_DoInit+0xac>)
 8008682:	6810      	ldr	r0, [r2, #0]
 8008684:	6018      	str	r0, [r3, #0]
 8008686:	8891      	ldrh	r1, [r2, #4]
 8008688:	7992      	ldrb	r2, [r2, #6]
 800868a:	8099      	strh	r1, [r3, #4]
 800868c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800868e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008698:	f3bf 8f5f 	dmb	sy
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	20019544 	.word	0x20019544
 80086ac:	0800abe8 	.word	0x0800abe8
 80086b0:	200195ec 	.word	0x200195ec
 80086b4:	200199ec 	.word	0x200199ec
 80086b8:	0800abf4 	.word	0x0800abf4
 80086bc:	0800abf8 	.word	0x0800abf8

080086c0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	@ 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80086cc:	2300      	movs	r3, #0
 80086ce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d905      	bls.n	80086f0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ee:	e007      	b.n	8008700 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	69b9      	ldr	r1, [r7, #24]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	1acb      	subs	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	3b01      	subs	r3, #1
 80086fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800870a:	4293      	cmp	r3, r2
 800870c:	bf28      	it	cs
 800870e:	4613      	movcs	r3, r2
 8008710:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4293      	cmp	r3, r2
 8008718:	bf28      	it	cs
 800871a:	4613      	movcs	r3, r2
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	6978      	ldr	r0, [r7, #20]
 800872e:	f002 f941 	bl	800a9b4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	4413      	add	r3, r2
 8008738:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	4413      	add	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	4413      	add	r3, r2
 8008750:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	69fa      	ldr	r2, [r7, #28]
 8008758:	429a      	cmp	r2, r3
 800875a:	d101      	bne.n	8008760 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800875c:	2300      	movs	r3, #0
 800875e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008760:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1b2      	bne.n	80086d6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008770:	6a3b      	ldr	r3, [r7, #32]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3728      	adds	r7, #40	@ 0x28
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800877a:	b580      	push	{r7, lr}
 800877c:	b088      	sub	sp, #32
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d911      	bls.n	80087c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	6938      	ldr	r0, [r7, #16]
 80087ae:	f002 f901 	bl	800a9b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80087b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	441a      	add	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80087c0:	e01f      	b.n	8008802 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	6938      	ldr	r0, [r7, #16]
 80087d6:	f002 f8ed 	bl	800a9b4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	4413      	add	r3, r2
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6938      	ldr	r0, [r7, #16]
 80087f4:	f002 f8de 	bl	800a9b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80087f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	60da      	str	r2, [r3, #12]
}
 8008802:	bf00      	nop
 8008804:	3720      	adds	r7, #32
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800880a:	b480      	push	{r7}
 800880c:	b087      	sub	sp, #28
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d808      	bhi.n	8008838 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	1ad2      	subs	r2, r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	4413      	add	r3, r2
 8008832:	3b01      	subs	r3, #1
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	e004      	b.n	8008842 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008842:	697b      	ldr	r3, [r7, #20]
}
 8008844:	4618      	mov	r0, r3
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	@ 0x30
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800885c:	4b3e      	ldr	r3, [pc, #248]	@ (8008958 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800885e:	623b      	str	r3, [r7, #32]
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800886a:	f7ff fed1 	bl	8008610 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	4613      	mov	r3, r2
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	4413      	add	r3, r2
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	4a37      	ldr	r2, [pc, #220]	@ (8008958 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800887c:	4413      	add	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008890:	2300      	movs	r3, #0
 8008892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	429a      	cmp	r2, r3
 800889a:	d92b      	bls.n	80088f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4293      	cmp	r3, r2
 80088ac:	bf28      	it	cs
 80088ae:	4613      	movcs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	4413      	add	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	6939      	ldr	r1, [r7, #16]
 80088c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088c2:	f002 f877 	bl	800a9b4 <memcpy>
    NumBytesRead += NumBytesRem;
 80088c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4413      	add	r3, r2
 80088cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80088ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	4413      	add	r3, r2
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80088de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4413      	add	r3, r2
 80088e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d101      	bne.n	80088f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80088f0:	2300      	movs	r3, #0
 80088f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4293      	cmp	r3, r2
 8008902:	bf28      	it	cs
 8008904:	4613      	movcs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d019      	beq.n	8008942 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	4413      	add	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	6939      	ldr	r1, [r7, #16]
 800891c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800891e:	f002 f849 	bl	800a9b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8008922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	4413      	add	r3, r2
 8008928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800892a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	4413      	add	r3, r2
 8008930:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800893a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	4413      	add	r3, r2
 8008940:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8008942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800894c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800894e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008950:	4618      	mov	r0, r3
 8008952:	3730      	adds	r7, #48	@ 0x30
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20019544 	.word	0x20019544

0800895c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	@ 0x30
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008968:	4b3e      	ldr	r3, [pc, #248]	@ (8008a64 <SEGGER_RTT_ReadNoLock+0x108>)
 800896a:	623b      	str	r3, [r7, #32]
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <SEGGER_RTT_ReadNoLock+0x1e>
 8008976:	f7ff fe4b 	bl	8008610 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4613      	mov	r3, r2
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	4413      	add	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	3360      	adds	r3, #96	@ 0x60
 8008986:	4a37      	ldr	r2, [pc, #220]	@ (8008a64 <SEGGER_RTT_ReadNoLock+0x108>)
 8008988:	4413      	add	r3, r2
 800898a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800899c:	2300      	movs	r3, #0
 800899e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80089a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d92b      	bls.n	8008a00 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4293      	cmp	r3, r2
 80089b8:	bf28      	it	cs
 80089ba:	4613      	movcs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c4:	4413      	add	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	6939      	ldr	r1, [r7, #16]
 80089cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089ce:	f001 fff1 	bl	800a9b4 <memcpy>
    NumBytesRead += NumBytesRem;
 80089d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	4413      	add	r3, r2
 80089d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80089da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80089ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	4413      	add	r3, r2
 80089f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d101      	bne.n	8008a00 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80089fc:	2300      	movs	r3, #0
 80089fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bf28      	it	cs
 8008a10:	4613      	movcs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d019      	beq.n	8008a4e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a20:	4413      	add	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	6939      	ldr	r1, [r7, #16]
 8008a28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a2a:	f001 ffc3 	bl	800a9b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8008a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	4413      	add	r3, r2
 8008a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8008a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3730      	adds	r7, #48	@ 0x30
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20019544 	.word	0x20019544

08008a68 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	4413      	add	r3, r2
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	3360      	adds	r3, #96	@ 0x60
 8008a84:	4a1f      	ldr	r2, [pc, #124]	@ (8008b04 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8008a86:	4413      	add	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d029      	beq.n	8008ae6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d82e      	bhi.n	8008af4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d013      	beq.n	8008ac6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8008a9e:	e029      	b.n	8008af4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008aa0:	6978      	ldr	r0, [r7, #20]
 8008aa2:	f7ff feb2 	bl	800880a <_GetAvailWriteSpace>
 8008aa6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d202      	bcs.n	8008ab6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008ab4:	e021      	b.n	8008afa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	f7ff fe5b 	bl	800877a <_WriteNoCheck>
    break;
 8008ac4:	e019      	b.n	8008afa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008ac6:	6978      	ldr	r0, [r7, #20]
 8008ac8:	f7ff fe9f 	bl	800880a <_GetAvailWriteSpace>
 8008acc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bf28      	it	cs
 8008ad6:	4613      	movcs	r3, r2
 8008ad8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	69b9      	ldr	r1, [r7, #24]
 8008ade:	6978      	ldr	r0, [r7, #20]
 8008ae0:	f7ff fe4b 	bl	800877a <_WriteNoCheck>
    break;
 8008ae4:	e009      	b.n	8008afa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	f7ff fde8 	bl	80086c0 <_WriteBlocking>
 8008af0:	61f8      	str	r0, [r7, #28]
    break;
 8008af2:	e002      	b.n	8008afa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61fb      	str	r3, [r7, #28]
    break;
 8008af8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8008afa:	69fb      	ldr	r3, [r7, #28]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3720      	adds	r7, #32
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20019544 	.word	0x20019544

08008b08 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8008b14:	4b0e      	ldr	r3, [pc, #56]	@ (8008b50 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8008b22:	f7ff fd75 	bl	8008610 <_DoInit>
  SEGGER_RTT_LOCK();
 8008b26:	f3ef 8311 	mrs	r3, BASEPRI
 8008b2a:	f04f 0120 	mov.w	r1, #32
 8008b2e:	f381 8811 	msr	BASEPRI, r1
 8008b32:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff ff95 	bl	8008a68 <SEGGER_RTT_WriteDownBufferNoLock>
 8008b3e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008b46:	697b      	ldr	r3, [r7, #20]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20019544 	.word	0x20019544

08008b54 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008b62:	4b3d      	ldr	r3, [pc, #244]	@ (8008c58 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008b70:	f7ff fd4e 	bl	8008610 <_DoInit>
  SEGGER_RTT_LOCK();
 8008b74:	f3ef 8311 	mrs	r3, BASEPRI
 8008b78:	f04f 0120 	mov.w	r1, #32
 8008b7c:	f381 8811 	msr	BASEPRI, r1
 8008b80:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008b82:	4b35      	ldr	r3, [pc, #212]	@ (8008c58 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008b84:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008b8a:	6939      	ldr	r1, [r7, #16]
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	4613      	mov	r3, r2
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	4413      	add	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	440b      	add	r3, r1
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d008      	beq.n	8008bb4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	dbeb      	blt.n	8008b8a <SEGGER_RTT_AllocUpBuffer+0x36>
 8008bb2:	e000      	b.n	8008bb6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008bb4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	da3f      	bge.n	8008c40 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008bc0:	6939      	ldr	r1, [r7, #16]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4413      	add	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	440b      	add	r3, r1
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008bd4:	6939      	ldr	r1, [r7, #16]
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	4613      	mov	r3, r2
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	4413      	add	r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	440b      	add	r3, r1
 8008be4:	3304      	adds	r3, #4
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008bea:	6939      	ldr	r1, [r7, #16]
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	4413      	add	r3, r2
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	440b      	add	r3, r1
 8008bf8:	3320      	adds	r3, #32
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008bfe:	6939      	ldr	r1, [r7, #16]
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	4613      	mov	r3, r2
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	4413      	add	r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	440b      	add	r3, r1
 8008c0c:	3328      	adds	r3, #40	@ 0x28
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008c12:	6939      	ldr	r1, [r7, #16]
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	4613      	mov	r3, r2
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	4413      	add	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	440b      	add	r3, r1
 8008c20:	3324      	adds	r3, #36	@ 0x24
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008c26:	6939      	ldr	r1, [r7, #16]
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	4413      	add	r3, r2
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	440b      	add	r3, r1
 8008c34:	332c      	adds	r3, #44	@ 0x2c
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008c3a:	f3bf 8f5f 	dmb	sy
 8008c3e:	e002      	b.n	8008c46 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c44:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3720      	adds	r7, #32
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20019544 	.word	0x20019544

08008c5c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008c6a:	4b33      	ldr	r3, [pc, #204]	@ (8008d38 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008c78:	f7ff fcca 	bl	8008610 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8008d38 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8008c7e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	461a      	mov	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d24d      	bcs.n	8008d28 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8008c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8008c90:	f04f 0120 	mov.w	r1, #32
 8008c94:	f381 8811 	msr	BASEPRI, r1
 8008c98:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d031      	beq.n	8008d04 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8008ca0:	6979      	ldr	r1, [r7, #20]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	4413      	add	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	440b      	add	r3, r1
 8008cae:	3360      	adds	r3, #96	@ 0x60
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8008cb4:	6979      	ldr	r1, [r7, #20]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	4413      	add	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	440b      	add	r3, r1
 8008cc2:	3364      	adds	r3, #100	@ 0x64
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8008cc8:	6979      	ldr	r1, [r7, #20]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	4413      	add	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	440b      	add	r3, r1
 8008cd6:	3368      	adds	r3, #104	@ 0x68
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8008cdc:	6979      	ldr	r1, [r7, #20]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	4413      	add	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	440b      	add	r3, r1
 8008cea:	3370      	adds	r3, #112	@ 0x70
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8008cf0:	6979      	ldr	r1, [r7, #20]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	4413      	add	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	440b      	add	r3, r1
 8008cfe:	336c      	adds	r3, #108	@ 0x6c
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	4413      	add	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	440b      	add	r3, r1
 8008d12:	3374      	adds	r3, #116	@ 0x74
 8008d14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d16:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008d18:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	e002      	b.n	8008d2e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d2c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20019544 	.word	0x20019544

08008d3c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d4c:	e002      	b.n	8008d54 <_EncodeStr+0x18>
    Len++;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3301      	adds	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4413      	add	r3, r2
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1f6      	bne.n	8008d4e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d901      	bls.n	8008d6c <_EncodeStr+0x30>
    Len = Limit;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d70:	d806      	bhi.n	8008d80 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	60fa      	str	r2, [r7, #12]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e011      	b.n	8008da4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	60fa      	str	r2, [r7, #12]
 8008d86:	22ff      	movs	r2, #255	@ 0xff
 8008d88:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	60fa      	str	r2, [r7, #12]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	0a19      	lsrs	r1, r3, #8
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	60fa      	str	r2, [r7, #12]
 8008da0:	b2ca      	uxtb	r2, r1
 8008da2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008da8:	e00a      	b.n	8008dc0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	1c53      	adds	r3, r2, #1
 8008dae:	60bb      	str	r3, [r7, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	1c59      	adds	r1, r3, #1
 8008db4:	60f9      	str	r1, [r7, #12]
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	701a      	strb	r2, [r3, #0]
    n++;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d3f0      	bcc.n	8008daa <_EncodeStr+0x6e>
  }
  return pPayload;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3304      	adds	r3, #4
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008df6:	4b35      	ldr	r3, [pc, #212]	@ (8008ecc <_HandleIncomingPacket+0xdc>)
 8008df8:	7e1b      	ldrb	r3, [r3, #24]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	1cfb      	adds	r3, r7, #3
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7ff fdab 	bl	800895c <SEGGER_RTT_ReadNoLock>
 8008e06:	4603      	mov	r3, r0
 8008e08:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dd59      	ble.n	8008ec4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	2b80      	cmp	r3, #128	@ 0x80
 8008e14:	d032      	beq.n	8008e7c <_HandleIncomingPacket+0x8c>
 8008e16:	2b80      	cmp	r3, #128	@ 0x80
 8008e18:	dc42      	bgt.n	8008ea0 <_HandleIncomingPacket+0xb0>
 8008e1a:	2b07      	cmp	r3, #7
 8008e1c:	dc16      	bgt.n	8008e4c <_HandleIncomingPacket+0x5c>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dd3e      	ble.n	8008ea0 <_HandleIncomingPacket+0xb0>
 8008e22:	3b01      	subs	r3, #1
 8008e24:	2b06      	cmp	r3, #6
 8008e26:	d83b      	bhi.n	8008ea0 <_HandleIncomingPacket+0xb0>
 8008e28:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <_HandleIncomingPacket+0x40>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008e53 	.word	0x08008e53
 8008e34:	08008e59 	.word	0x08008e59
 8008e38:	08008e5f 	.word	0x08008e5f
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e6b 	.word	0x08008e6b
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	08008e77 	.word	0x08008e77
 8008e4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e4e:	d034      	beq.n	8008eba <_HandleIncomingPacket+0xca>
 8008e50:	e026      	b.n	8008ea0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008e52:	f000 ff43 	bl	8009cdc <SEGGER_SYSVIEW_Start>
      break;
 8008e56:	e035      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008e58:	f000 fffc 	bl	8009e54 <SEGGER_SYSVIEW_Stop>
      break;
 8008e5c:	e032      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008e5e:	f001 f9d5 	bl	800a20c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008e62:	e02f      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008e64:	f001 f99a 	bl	800a19c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008e68:	e02c      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008e6a:	f001 f819 	bl	8009ea0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008e6e:	e029      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008e70:	f001 fc68 	bl	800a744 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008e74:	e026      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008e76:	f001 fc47 	bl	800a708 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008e7a:	e023      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e7c:	4b13      	ldr	r3, [pc, #76]	@ (8008ecc <_HandleIncomingPacket+0xdc>)
 8008e7e:	7e1b      	ldrb	r3, [r3, #24]
 8008e80:	4618      	mov	r0, r3
 8008e82:	1cfb      	adds	r3, r7, #3
 8008e84:	2201      	movs	r2, #1
 8008e86:	4619      	mov	r1, r3
 8008e88:	f7ff fd68 	bl	800895c <SEGGER_RTT_ReadNoLock>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dd13      	ble.n	8008ebe <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fbb5 	bl	800a608 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008e9e:	e00e      	b.n	8008ebe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	b25b      	sxtb	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da0c      	bge.n	8008ec2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008ea8:	4b08      	ldr	r3, [pc, #32]	@ (8008ecc <_HandleIncomingPacket+0xdc>)
 8008eaa:	7e1b      	ldrb	r3, [r3, #24]
 8008eac:	4618      	mov	r0, r3
 8008eae:	1cfb      	adds	r3, r7, #3
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	f7ff fd52 	bl	800895c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008eb8:	e003      	b.n	8008ec2 <_HandleIncomingPacket+0xd2>
      break;
 8008eba:	bf00      	nop
 8008ebc:	e002      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
      break;
 8008ebe:	bf00      	nop
 8008ec0:	e000      	b.n	8008ec4 <_HandleIncomingPacket+0xd4>
      break;
 8008ec2:	bf00      	nop
    }
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	2001aa04 	.word	0x2001aa04

08008ed0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08c      	sub	sp, #48	@ 0x30
 8008ed4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008eda:	1d3b      	adds	r3, r7, #4
 8008edc:	3301      	adds	r3, #1
 8008ede:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ee4:	4b32      	ldr	r3, [pc, #200]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eea:	e00b      	b.n	8008f04 <_TrySendOverflowPacket+0x34>
 8008eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef2:	1c59      	adds	r1, r3, #1
 8008ef4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008ef6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f00:	09db      	lsrs	r3, r3, #7
 8008f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f08:	d8f0      	bhi.n	8008eec <_TrySendOverflowPacket+0x1c>
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f12:	b2d2      	uxtb	r2, r2
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f18:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008f1a:	4b26      	ldr	r3, [pc, #152]	@ (8008fb4 <_TrySendOverflowPacket+0xe4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008f20:	4b23      	ldr	r3, [pc, #140]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	623b      	str	r3, [r7, #32]
 8008f32:	e00b      	b.n	8008f4c <_TrySendOverflowPacket+0x7c>
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	1c59      	adds	r1, r3, #1
 8008f3c:	6279      	str	r1, [r7, #36]	@ 0x24
 8008f3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008f42:	b2d2      	uxtb	r2, r2
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	09db      	lsrs	r3, r3, #7
 8008f4a:	623b      	str	r3, [r7, #32]
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f50:	d8f0      	bhi.n	8008f34 <_TrySendOverflowPacket+0x64>
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f58:	6a3a      	ldr	r2, [r7, #32]
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008f62:	4b13      	ldr	r3, [pc, #76]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	4618      	mov	r0, r3
 8008f68:	1d3b      	adds	r3, r7, #4
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	461a      	mov	r2, r3
 8008f70:	1d3b      	adds	r3, r7, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	f7f7 f92c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8008f7c:	f7ff fabe 	bl	80084fc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008f86:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008f8c:	4b08      	ldr	r3, [pc, #32]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e004      	b.n	8008fa4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008f9a:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	4a03      	ldr	r2, [pc, #12]	@ (8008fb0 <_TrySendOverflowPacket+0xe0>)
 8008fa2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008fa4:	693b      	ldr	r3, [r7, #16]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3730      	adds	r7, #48	@ 0x30
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	2001aa04 	.word	0x2001aa04
 8008fb4:	e0001004 	.word	0xe0001004

08008fb8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	@ 0x28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008fc4:	4b6d      	ldr	r3, [pc, #436]	@ (800917c <_SendPacket+0x1c4>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d010      	beq.n	8008fee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800917c <_SendPacket+0x1c4>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80a5 	beq.w	8009120 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008fd6:	4b69      	ldr	r3, [pc, #420]	@ (800917c <_SendPacket+0x1c4>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d109      	bne.n	8008ff2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008fde:	f7ff ff77 	bl	8008ed0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008fe2:	4b66      	ldr	r3, [pc, #408]	@ (800917c <_SendPacket+0x1c4>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	f040 809c 	bne.w	8009124 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8008fec:	e001      	b.n	8008ff2 <_SendPacket+0x3a>
    goto Send;
 8008fee:	bf00      	nop
 8008ff0:	e000      	b.n	8008ff4 <_SendPacket+0x3c>
Send:
 8008ff2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b1f      	cmp	r3, #31
 8008ff8:	d809      	bhi.n	800900e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008ffa:	4b60      	ldr	r3, [pc, #384]	@ (800917c <_SendPacket+0x1c4>)
 8008ffc:	69da      	ldr	r2, [r3, #28]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	fa22 f303 	lsr.w	r3, r2, r3
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 808d 	bne.w	8009128 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b17      	cmp	r3, #23
 8009012:	d807      	bhi.n	8009024 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3b01      	subs	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	b2da      	uxtb	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e03d      	b.n	80090a0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009030:	d912      	bls.n	8009058 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	09da      	lsrs	r2, r3, #7
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3b01      	subs	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	3a01      	subs	r2, #1
 800904a:	60fa      	str	r2, [r7, #12]
 800904c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009050:	b2da      	uxtb	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	e006      	b.n	8009066 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3b01      	subs	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b7f      	cmp	r3, #127	@ 0x7f
 800906a:	d912      	bls.n	8009092 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	09da      	lsrs	r2, r3, #7
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3b01      	subs	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	3a01      	subs	r2, #1
 8009084:	60fa      	str	r2, [r7, #12]
 8009086:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800908a:	b2da      	uxtb	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	e006      	b.n	80090a0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3b01      	subs	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80090a0:	4b37      	ldr	r3, [pc, #220]	@ (8009180 <_SendPacket+0x1c8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80090a6:	4b35      	ldr	r3, [pc, #212]	@ (800917c <_SendPacket+0x1c4>)
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	623b      	str	r3, [r7, #32]
 80090b8:	e00b      	b.n	80090d2 <_SendPacket+0x11a>
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	1c59      	adds	r1, r3, #1
 80090c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80090c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80090c8:	b2d2      	uxtb	r2, r2
 80090ca:	701a      	strb	r2, [r3, #0]
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	09db      	lsrs	r3, r3, #7
 80090d0:	623b      	str	r3, [r7, #32]
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80090d6:	d8f0      	bhi.n	80090ba <_SendPacket+0x102>
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80090de:	6a3a      	ldr	r2, [r7, #32]
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80090e8:	4b24      	ldr	r3, [pc, #144]	@ (800917c <_SendPacket+0x1c4>)
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	4618      	mov	r0, r3
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	461a      	mov	r2, r3
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	f7f7 f86a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80090fc:	4603      	mov	r3, r0
 80090fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8009100:	f7ff f9fc 	bl	80084fc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800910a:	4a1c      	ldr	r2, [pc, #112]	@ (800917c <_SendPacket+0x1c4>)
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	60d3      	str	r3, [r2, #12]
 8009110:	e00b      	b.n	800912a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8009112:	4b1a      	ldr	r3, [pc, #104]	@ (800917c <_SendPacket+0x1c4>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	b2da      	uxtb	r2, r3
 800911a:	4b18      	ldr	r3, [pc, #96]	@ (800917c <_SendPacket+0x1c4>)
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e004      	b.n	800912a <_SendPacket+0x172>
    goto SendDone;
 8009120:	bf00      	nop
 8009122:	e002      	b.n	800912a <_SendPacket+0x172>
      goto SendDone;
 8009124:	bf00      	nop
 8009126:	e000      	b.n	800912a <_SendPacket+0x172>
      goto SendDone;
 8009128:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800912a:	4b14      	ldr	r3, [pc, #80]	@ (800917c <_SendPacket+0x1c4>)
 800912c:	7e1b      	ldrb	r3, [r3, #24]
 800912e:	4619      	mov	r1, r3
 8009130:	4a14      	ldr	r2, [pc, #80]	@ (8009184 <_SendPacket+0x1cc>)
 8009132:	460b      	mov	r3, r1
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	440b      	add	r3, r1
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	4413      	add	r3, r2
 800913c:	336c      	adds	r3, #108	@ 0x6c
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b0e      	ldr	r3, [pc, #56]	@ (800917c <_SendPacket+0x1c4>)
 8009142:	7e1b      	ldrb	r3, [r3, #24]
 8009144:	4618      	mov	r0, r3
 8009146:	490f      	ldr	r1, [pc, #60]	@ (8009184 <_SendPacket+0x1cc>)
 8009148:	4603      	mov	r3, r0
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	4403      	add	r3, r0
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	440b      	add	r3, r1
 8009152:	3370      	adds	r3, #112	@ 0x70
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d00b      	beq.n	8009172 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800915a:	4b08      	ldr	r3, [pc, #32]	@ (800917c <_SendPacket+0x1c4>)
 800915c:	789b      	ldrb	r3, [r3, #2]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d107      	bne.n	8009172 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009162:	4b06      	ldr	r3, [pc, #24]	@ (800917c <_SendPacket+0x1c4>)
 8009164:	2201      	movs	r2, #1
 8009166:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009168:	f7ff fe42 	bl	8008df0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800916c:	4b03      	ldr	r3, [pc, #12]	@ (800917c <_SendPacket+0x1c4>)
 800916e:	2200      	movs	r2, #0
 8009170:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009172:	bf00      	nop
 8009174:	3728      	adds	r7, #40	@ 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	2001aa04 	.word	0x2001aa04
 8009180:	e0001004 	.word	0xe0001004
 8009184:	20019544 	.word	0x20019544

08009188 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	@ 0x28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	3301      	adds	r3, #1
 800919e:	2b80      	cmp	r3, #128	@ 0x80
 80091a0:	d80a      	bhi.n	80091b8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	1c59      	adds	r1, r3, #1
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6051      	str	r1, [r2, #4]
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2b80      	cmp	r3, #128	@ 0x80
 80091be:	d15a      	bne.n	8009276 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691a      	ldr	r2, [r3, #16]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	b2d2      	uxtb	r2, r2
 80091ca:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	627b      	str	r3, [r7, #36]	@ 0x24
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	623b      	str	r3, [r7, #32]
 80091e0:	e00b      	b.n	80091fa <_StoreChar+0x72>
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e8:	1c59      	adds	r1, r3, #1
 80091ea:	6279      	str	r1, [r7, #36]	@ 0x24
 80091ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80091f0:	b2d2      	uxtb	r2, r2
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	09db      	lsrs	r3, r3, #7
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80091fe:	d8f0      	bhi.n	80091e2 <_StoreChar+0x5a>
 8009200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	627a      	str	r2, [r7, #36]	@ 0x24
 8009206:	6a3a      	ldr	r2, [r7, #32]
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	701a      	strb	r2, [r3, #0]
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	2300      	movs	r3, #0
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e00b      	b.n	8009232 <_StoreChar+0xaa>
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	b2da      	uxtb	r2, r3
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	1c59      	adds	r1, r3, #1
 8009222:	61f9      	str	r1, [r7, #28]
 8009224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009228:	b2d2      	uxtb	r2, r2
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	09db      	lsrs	r3, r3, #7
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	2b7f      	cmp	r3, #127	@ 0x7f
 8009236:	d8f0      	bhi.n	800921a <_StoreChar+0x92>
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	61fa      	str	r2, [r7, #28]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	221a      	movs	r2, #26
 800924e:	6939      	ldr	r1, [r7, #16]
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff feb1 	bl	8008fb8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fdbb 	bl	8008dd6 <_PreparePacket>
 8009260:	4602      	mov	r2, r0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	611a      	str	r2, [r3, #16]
  }
}
 8009276:	bf00      	nop
 8009278:	3728      	adds	r7, #40	@ 0x28
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
	...

08009280 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8009280:	b580      	push	{r7, lr}
 8009282:	b08a      	sub	sp, #40	@ 0x28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8009292:	2301      	movs	r3, #1
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8009296:	2301      	movs	r3, #1
 8009298:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800929a:	e007      	b.n	80092ac <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800929c:	6a3a      	ldr	r2, [r7, #32]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a4:	623b      	str	r3, [r7, #32]
    Width++;
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3301      	adds	r3, #1
 80092aa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80092ac:	6a3a      	ldr	r2, [r7, #32]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d2f3      	bcs.n	800929c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d901      	bls.n	80092c0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80092c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d000      	beq.n	80092cc <_PrintUnsigned+0x4c>
 80092ca:	e01f      	b.n	800930c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01c      	beq.n	800930c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80092d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <_PrintUnsigned+0x68>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <_PrintUnsigned+0x68>
        c = '0';
 80092e2:	2330      	movs	r3, #48	@ 0x30
 80092e4:	76fb      	strb	r3, [r7, #27]
 80092e6:	e001      	b.n	80092ec <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80092e8:	2320      	movs	r3, #32
 80092ea:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80092ec:	e007      	b.n	80092fe <_PrintUnsigned+0x7e>
        FieldWidth--;
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	3b01      	subs	r3, #1
 80092f2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80092f4:	7efb      	ldrb	r3, [r7, #27]
 80092f6:	4619      	mov	r1, r3
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff ff45 	bl	8009188 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <_PrintUnsigned+0x8c>
 8009304:	69fa      	ldr	r2, [r7, #28]
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	429a      	cmp	r2, r3
 800930a:	d3f0      	bcc.n	80092ee <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d903      	bls.n	800931a <_PrintUnsigned+0x9a>
      NumDigits--;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	3b01      	subs	r3, #1
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	e009      	b.n	800932e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009322:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d200      	bcs.n	800932e <_PrintUnsigned+0xae>
        break;
 800932c:	e005      	b.n	800933a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	fb02 f303 	mul.w	r3, r2, r3
 8009336:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8009338:	e7e8      	b.n	800930c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009342:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8009352:	4a15      	ldr	r2, [pc, #84]	@ (80093a8 <_PrintUnsigned+0x128>)
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	4413      	add	r3, r2
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	4619      	mov	r1, r3
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff ff13 	bl	8009188 <_StoreChar>
    Digit /= Base;
 8009362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	fbb2 f3f3 	udiv	r3, r2, r3
 800936a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e3      	bne.n	800933a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8009372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d011      	beq.n	80093a0 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00e      	beq.n	80093a0 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009382:	e006      	b.n	8009392 <_PrintUnsigned+0x112>
        FieldWidth--;
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	3b01      	subs	r3, #1
 8009388:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800938a:	2120      	movs	r1, #32
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff fefb 	bl	8009188 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <_PrintUnsigned+0x120>
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	429a      	cmp	r2, r3
 800939e:	d3f1      	bcc.n	8009384 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80093a0:	bf00      	nop
 80093a2:	3728      	adds	r7, #40	@ 0x28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	0800ada8 	.word	0x0800ada8

080093ac <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bfb8      	it	lt
 80093c0:	425b      	neglt	r3, r3
 80093c2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80093c4:	2301      	movs	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80093c8:	e007      	b.n	80093da <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80093d2:	613b      	str	r3, [r7, #16]
    Width++;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	3301      	adds	r3, #1
 80093d8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	daf3      	bge.n	80093ca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d901      	bls.n	80093ee <_PrintInt+0x42>
    Width = NumDigits;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <_PrintInt+0x5e>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	db04      	blt.n	8009404 <_PrintInt+0x58>
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <_PrintInt+0x5e>
    FieldWidth--;
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	3b01      	subs	r3, #1
 8009408:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800940a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <_PrintInt+0x6e>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d016      	beq.n	8009448 <_PrintInt+0x9c>
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d111      	bne.n	8009448 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00e      	beq.n	8009448 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800942a:	e006      	b.n	800943a <_PrintInt+0x8e>
        FieldWidth--;
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	3b01      	subs	r3, #1
 8009430:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8009432:	2120      	movs	r1, #32
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fea7 	bl	8009188 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <_PrintInt+0x9c>
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	429a      	cmp	r2, r3
 8009446:	d3f1      	bcc.n	800942c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	da07      	bge.n	800945e <_PrintInt+0xb2>
    v = -v;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	425b      	negs	r3, r3
 8009452:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8009454:	212d      	movs	r1, #45	@ 0x2d
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff fe96 	bl	8009188 <_StoreChar>
 800945c:	e008      	b.n	8009470 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800945e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8009468:	212b      	movs	r1, #43	@ 0x2b
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f7ff fe8c 	bl	8009188 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d019      	beq.n	80094ae <_PrintInt+0x102>
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d114      	bne.n	80094ae <_PrintInt+0x102>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d111      	bne.n	80094ae <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00e      	beq.n	80094ae <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8009490:	e006      	b.n	80094a0 <_PrintInt+0xf4>
        FieldWidth--;
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	3b01      	subs	r3, #1
 8009496:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8009498:	2130      	movs	r1, #48	@ 0x30
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fe74 	bl	8009188 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <_PrintInt+0x102>
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d3f1      	bcc.n	8009492 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fedf 	bl	8009280 <_PrintUnsigned>
}
 80094c2:	bf00      	nop
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b098      	sub	sp, #96	@ 0x60
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80094d8:	f3ef 8311 	mrs	r3, BASEPRI
 80094dc:	f04f 0120 	mov.w	r1, #32
 80094e0:	f381 8811 	msr	BASEPRI, r1
 80094e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094e6:	48b7      	ldr	r0, [pc, #732]	@ (80097c4 <_VPrintTarget+0x2f8>)
 80094e8:	f7ff fc75 	bl	8008dd6 <_PreparePacket>
 80094ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80094ee:	4bb5      	ldr	r3, [pc, #724]	@ (80097c4 <_VPrintTarget+0x2f8>)
 80094f0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80094f2:	2300      	movs	r3, #0
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80094f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3301      	adds	r3, #1
 80094fe:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8009512:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8183 	beq.w	8009822 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800951c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009520:	2b25      	cmp	r3, #37	@ 0x25
 8009522:	f040 8170 	bne.w	8009806 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8009526:	2300      	movs	r3, #0
 8009528:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800952a:	2301      	movs	r3, #1
 800952c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8009536:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800953a:	3b23      	subs	r3, #35	@ 0x23
 800953c:	2b0d      	cmp	r3, #13
 800953e:	d83f      	bhi.n	80095c0 <_VPrintTarget+0xf4>
 8009540:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <_VPrintTarget+0x7c>)
 8009542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009546:	bf00      	nop
 8009548:	080095b1 	.word	0x080095b1
 800954c:	080095c1 	.word	0x080095c1
 8009550:	080095c1 	.word	0x080095c1
 8009554:	080095c1 	.word	0x080095c1
 8009558:	080095c1 	.word	0x080095c1
 800955c:	080095c1 	.word	0x080095c1
 8009560:	080095c1 	.word	0x080095c1
 8009564:	080095c1 	.word	0x080095c1
 8009568:	080095a1 	.word	0x080095a1
 800956c:	080095c1 	.word	0x080095c1
 8009570:	08009581 	.word	0x08009581
 8009574:	080095c1 	.word	0x080095c1
 8009578:	080095c1 	.word	0x080095c1
 800957c:	08009591 	.word	0x08009591
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8009580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3301      	adds	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e01a      	b.n	80095c6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8009590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009592:	f043 0302 	orr.w	r3, r3, #2
 8009596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	e012      	b.n	80095c6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80095a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a2:	f043 0304 	orr.w	r3, r3, #4
 80095a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3301      	adds	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	e00a      	b.n	80095c6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80095b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095b2:	f043 0308 	orr.w	r3, r3, #8
 80095b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3301      	adds	r3, #1
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e002      	b.n	80095c6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80095c0:	2300      	movs	r3, #0
 80095c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80095c4:	bf00      	nop
        }
      } while (v);
 80095c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1b0      	bne.n	800952e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80095cc:	2300      	movs	r3, #0
 80095ce:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80095d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80095de:	d912      	bls.n	8009606 <_VPrintTarget+0x13a>
 80095e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095e4:	2b39      	cmp	r3, #57	@ 0x39
 80095e6:	d80e      	bhi.n	8009606 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3301      	adds	r3, #1
 80095ec:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80095ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	461a      	mov	r2, r3
 80095fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095fe:	4413      	add	r3, r2
 8009600:	3b30      	subs	r3, #48	@ 0x30
 8009602:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8009604:	e7e4      	b.n	80095d0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8009606:	2300      	movs	r3, #0
 8009608:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8009612:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009616:	2b2e      	cmp	r3, #46	@ 0x2e
 8009618:	d11d      	bne.n	8009656 <_VPrintTarget+0x18a>
        sFormat++;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3301      	adds	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8009628:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800962c:	2b2f      	cmp	r3, #47	@ 0x2f
 800962e:	d912      	bls.n	8009656 <_VPrintTarget+0x18a>
 8009630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009634:	2b39      	cmp	r3, #57	@ 0x39
 8009636:	d80e      	bhi.n	8009656 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800963e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	461a      	mov	r2, r3
 800964a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800964e:	4413      	add	r3, r2
 8009650:	3b30      	subs	r3, #48	@ 0x30
 8009652:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8009654:	e7e4      	b.n	8009620 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800965e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009662:	2b6c      	cmp	r3, #108	@ 0x6c
 8009664:	d003      	beq.n	800966e <_VPrintTarget+0x1a2>
 8009666:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800966a:	2b68      	cmp	r3, #104	@ 0x68
 800966c:	d107      	bne.n	800967e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3301      	adds	r3, #1
 800967a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800967c:	e7ef      	b.n	800965e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800967e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009682:	2b25      	cmp	r3, #37	@ 0x25
 8009684:	f000 80b3 	beq.w	80097ee <_VPrintTarget+0x322>
 8009688:	2b25      	cmp	r3, #37	@ 0x25
 800968a:	f2c0 80b7 	blt.w	80097fc <_VPrintTarget+0x330>
 800968e:	2b78      	cmp	r3, #120	@ 0x78
 8009690:	f300 80b4 	bgt.w	80097fc <_VPrintTarget+0x330>
 8009694:	2b58      	cmp	r3, #88	@ 0x58
 8009696:	f2c0 80b1 	blt.w	80097fc <_VPrintTarget+0x330>
 800969a:	3b58      	subs	r3, #88	@ 0x58
 800969c:	2b20      	cmp	r3, #32
 800969e:	f200 80ad 	bhi.w	80097fc <_VPrintTarget+0x330>
 80096a2:	a201      	add	r2, pc, #4	@ (adr r2, 80096a8 <_VPrintTarget+0x1dc>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	0800979f 	.word	0x0800979f
 80096ac:	080097fd 	.word	0x080097fd
 80096b0:	080097fd 	.word	0x080097fd
 80096b4:	080097fd 	.word	0x080097fd
 80096b8:	080097fd 	.word	0x080097fd
 80096bc:	080097fd 	.word	0x080097fd
 80096c0:	080097fd 	.word	0x080097fd
 80096c4:	080097fd 	.word	0x080097fd
 80096c8:	080097fd 	.word	0x080097fd
 80096cc:	080097fd 	.word	0x080097fd
 80096d0:	080097fd 	.word	0x080097fd
 80096d4:	0800972d 	.word	0x0800972d
 80096d8:	08009753 	.word	0x08009753
 80096dc:	080097fd 	.word	0x080097fd
 80096e0:	080097fd 	.word	0x080097fd
 80096e4:	080097fd 	.word	0x080097fd
 80096e8:	080097fd 	.word	0x080097fd
 80096ec:	080097fd 	.word	0x080097fd
 80096f0:	080097fd 	.word	0x080097fd
 80096f4:	080097fd 	.word	0x080097fd
 80096f8:	080097fd 	.word	0x080097fd
 80096fc:	080097fd 	.word	0x080097fd
 8009700:	080097fd 	.word	0x080097fd
 8009704:	080097fd 	.word	0x080097fd
 8009708:	080097c9 	.word	0x080097c9
 800970c:	080097fd 	.word	0x080097fd
 8009710:	080097fd 	.word	0x080097fd
 8009714:	080097fd 	.word	0x080097fd
 8009718:	080097fd 	.word	0x080097fd
 800971c:	08009779 	.word	0x08009779
 8009720:	080097fd 	.word	0x080097fd
 8009724:	080097fd 	.word	0x080097fd
 8009728:	0800979f 	.word	0x0800979f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	1d19      	adds	r1, r3, #4
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800973a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800973c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8009740:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009744:	f107 0314 	add.w	r3, r7, #20
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff fd1c 	bl	8009188 <_StoreChar>
        break;
 8009750:	e055      	b.n	80097fe <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	1d19      	adds	r1, r3, #4
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6011      	str	r1, [r2, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8009760:	f107 0014 	add.w	r0, r7, #20
 8009764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800976e:	220a      	movs	r2, #10
 8009770:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009772:	f7ff fe1b 	bl	80093ac <_PrintInt>
        break;
 8009776:	e042      	b.n	80097fe <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	1d19      	adds	r1, r3, #4
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6011      	str	r1, [r2, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8009786:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009788:	f107 0014 	add.w	r0, r7, #20
 800978c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009796:	220a      	movs	r2, #10
 8009798:	f7ff fd72 	bl	8009280 <_PrintUnsigned>
        break;
 800979c:	e02f      	b.n	80097fe <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	1d19      	adds	r1, r3, #4
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	6011      	str	r1, [r2, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80097ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097ae:	f107 0014 	add.w	r0, r7, #20
 80097b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097bc:	2210      	movs	r2, #16
 80097be:	f7ff fd5f 	bl	8009280 <_PrintUnsigned>
        break;
 80097c2:	e01c      	b.n	80097fe <_VPrintTarget+0x332>
 80097c4:	2001aa34 	.word	0x2001aa34
      case 'p':
        v = va_arg(*pParamList, int);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	1d19      	adds	r1, r3, #4
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	6011      	str	r1, [r2, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80097d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097d8:	f107 0014 	add.w	r0, r7, #20
 80097dc:	2300      	movs	r3, #0
 80097de:	9301      	str	r3, [sp, #4]
 80097e0:	2308      	movs	r3, #8
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	2308      	movs	r3, #8
 80097e6:	2210      	movs	r2, #16
 80097e8:	f7ff fd4a 	bl	8009280 <_PrintUnsigned>
        break;
 80097ec:	e007      	b.n	80097fe <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80097ee:	f107 0314 	add.w	r3, r7, #20
 80097f2:	2125      	movs	r1, #37	@ 0x25
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7ff fcc7 	bl	8009188 <_StoreChar>
        break;
 80097fa:	e000      	b.n	80097fe <_VPrintTarget+0x332>
      default:
        break;
 80097fc:	bf00      	nop
      }
      sFormat++;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e007      	b.n	8009816 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8009806:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800980a:	f107 0314 	add.w	r3, r7, #20
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff fcb9 	bl	8009188 <_StoreChar>
    }
  } while (*sFormat);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f47f ae72 	bne.w	8009504 <_VPrintTarget+0x38>
 8009820:	e000      	b.n	8009824 <_VPrintTarget+0x358>
      break;
 8009822:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d041      	beq.n	80098ae <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800982a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	b2d2      	uxtb	r2, r2
 8009830:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	643b      	str	r3, [r7, #64]	@ 0x40
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800983a:	e00b      	b.n	8009854 <_VPrintTarget+0x388>
 800983c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983e:	b2da      	uxtb	r2, r3
 8009840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009842:	1c59      	adds	r1, r3, #1
 8009844:	6439      	str	r1, [r7, #64]	@ 0x40
 8009846:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800984a:	b2d2      	uxtb	r2, r2
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009850:	09db      	lsrs	r3, r3, #7
 8009852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009856:	2b7f      	cmp	r3, #127	@ 0x7f
 8009858:	d8f0      	bhi.n	800983c <_VPrintTarget+0x370>
 800985a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009860:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009868:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800986e:	2300      	movs	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
 8009872:	e00b      	b.n	800988c <_VPrintTarget+0x3c0>
 8009874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009876:	b2da      	uxtb	r2, r3
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	1c59      	adds	r1, r3, #1
 800987c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800987e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009888:	09db      	lsrs	r3, r3, #7
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
 800988c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009890:	d8f0      	bhi.n	8009874 <_VPrintTarget+0x3a8>
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	221a      	movs	r2, #26
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fb85 	bl	8008fb8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80098ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80098b4:	bf00      	nop
 80098b6:	3758      	adds	r7, #88	@ 0x58
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80098ca:	2300      	movs	r3, #0
 80098cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80098d0:	4917      	ldr	r1, [pc, #92]	@ (8009930 <SEGGER_SYSVIEW_Init+0x74>)
 80098d2:	4818      	ldr	r0, [pc, #96]	@ (8009934 <SEGGER_SYSVIEW_Init+0x78>)
 80098d4:	f7ff f93e 	bl	8008b54 <SEGGER_RTT_AllocUpBuffer>
 80098d8:	4603      	mov	r3, r0
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	4b16      	ldr	r3, [pc, #88]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 80098de:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80098e0:	4b15      	ldr	r3, [pc, #84]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 80098e2:	785a      	ldrb	r2, [r3, #1]
 80098e4:	4b14      	ldr	r3, [pc, #80]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 80098e6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80098e8:	4b13      	ldr	r3, [pc, #76]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 80098ea:	7e1b      	ldrb	r3, [r3, #24]
 80098ec:	4618      	mov	r0, r3
 80098ee:	2300      	movs	r3, #0
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	2308      	movs	r3, #8
 80098f4:	4a11      	ldr	r2, [pc, #68]	@ (800993c <SEGGER_SYSVIEW_Init+0x80>)
 80098f6:	490f      	ldr	r1, [pc, #60]	@ (8009934 <SEGGER_SYSVIEW_Init+0x78>)
 80098f8:	f7ff f9b0 	bl	8008c5c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80098fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 80098fe:	2200      	movs	r2, #0
 8009900:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009902:	4b0f      	ldr	r3, [pc, #60]	@ (8009940 <SEGGER_SYSVIEW_Init+0x84>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a0c      	ldr	r2, [pc, #48]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 8009908:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800990a:	4a0b      	ldr	r2, [pc, #44]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8009910:	4a09      	ldr	r2, [pc, #36]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009916:	4a08      	ldr	r2, [pc, #32]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800991c:	4a06      	ldr	r2, [pc, #24]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8009922:	4b05      	ldr	r3, [pc, #20]	@ (8009938 <SEGGER_SYSVIEW_Init+0x7c>)
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009928:	bf00      	nop
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	200199fc 	.word	0x200199fc
 8009934:	0800ac00 	.word	0x0800ac00
 8009938:	2001aa04 	.word	0x2001aa04
 800993c:	2001a9fc 	.word	0x2001a9fc
 8009940:	e0001004 	.word	0xe0001004

08009944 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800994c:	4a04      	ldr	r2, [pc, #16]	@ (8009960 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6113      	str	r3, [r2, #16]
}
 8009952:	bf00      	nop
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	2001aa04 	.word	0x2001aa04

08009964 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800996c:	f3ef 8311 	mrs	r3, BASEPRI
 8009970:	f04f 0120 	mov.w	r1, #32
 8009974:	f381 8811 	msr	BASEPRI, r1
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	4808      	ldr	r0, [pc, #32]	@ (800999c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800997c:	f7ff fa2b 	bl	8008dd6 <_PreparePacket>
 8009980:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	68b8      	ldr	r0, [r7, #8]
 8009988:	f7ff fb16 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f383 8811 	msr	BASEPRI, r3
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	2001aa34 	.word	0x2001aa34

080099a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80099aa:	f3ef 8311 	mrs	r3, BASEPRI
 80099ae:	f04f 0120 	mov.w	r1, #32
 80099b2:	f381 8811 	msr	BASEPRI, r1
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	4816      	ldr	r0, [pc, #88]	@ (8009a14 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80099ba:	f7ff fa0c 	bl	8008dd6 <_PreparePacket>
 80099be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	61fb      	str	r3, [r7, #28]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	e00b      	b.n	80099e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	1c59      	adds	r1, r3, #1
 80099d6:	61f9      	str	r1, [r7, #28]
 80099d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	09db      	lsrs	r3, r3, #7
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80099ea:	d8f0      	bhi.n	80099ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	61fa      	str	r2, [r7, #28]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	68f9      	ldr	r1, [r7, #12]
 8009a00:	6938      	ldr	r0, [r7, #16]
 8009a02:	f7ff fad9 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f383 8811 	msr	BASEPRI, r3
}
 8009a0c:	bf00      	nop
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	2001aa34 	.word	0x2001aa34

08009a18 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08c      	sub	sp, #48	@ 0x30
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009a24:	f3ef 8311 	mrs	r3, BASEPRI
 8009a28:	f04f 0120 	mov.w	r1, #32
 8009a2c:	f381 8811 	msr	BASEPRI, r1
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	4825      	ldr	r0, [pc, #148]	@ (8009ac8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009a34:	f7ff f9cf 	bl	8008dd6 <_PreparePacket>
 8009a38:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a46:	e00b      	b.n	8009a60 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4e:	1c59      	adds	r1, r3, #1
 8009a50:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009a52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5c:	09db      	lsrs	r3, r3, #7
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a64:	d8f0      	bhi.n	8009a48 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	623b      	str	r3, [r7, #32]
 8009a7e:	e00b      	b.n	8009a98 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a86:	1c59      	adds	r1, r3, #1
 8009a88:	6279      	str	r1, [r7, #36]	@ 0x24
 8009a8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	09db      	lsrs	r3, r3, #7
 8009a96:	623b      	str	r3, [r7, #32]
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a9c:	d8f0      	bhi.n	8009a80 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	627a      	str	r2, [r7, #36]	@ 0x24
 8009aa4:	6a3a      	ldr	r2, [r7, #32]
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	6979      	ldr	r1, [r7, #20]
 8009ab2:	69b8      	ldr	r0, [r7, #24]
 8009ab4:	f7ff fa80 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f383 8811 	msr	BASEPRI, r3
}
 8009abe:	bf00      	nop
 8009ac0:	3730      	adds	r7, #48	@ 0x30
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	2001aa34 	.word	0x2001aa34

08009acc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08e      	sub	sp, #56	@ 0x38
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ada:	f3ef 8311 	mrs	r3, BASEPRI
 8009ade:	f04f 0120 	mov.w	r1, #32
 8009ae2:	f381 8811 	msr	BASEPRI, r1
 8009ae6:	61fb      	str	r3, [r7, #28]
 8009ae8:	4832      	ldr	r0, [pc, #200]	@ (8009bb4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8009aea:	f7ff f974 	bl	8008dd6 <_PreparePacket>
 8009aee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009afc:	e00b      	b.n	8009b16 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8009afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b04:	1c59      	adds	r1, r3, #1
 8009b06:	6379      	str	r1, [r7, #52]	@ 0x34
 8009b08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b0c:	b2d2      	uxtb	r2, r2
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	09db      	lsrs	r3, r3, #7
 8009b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b1a:	d8f0      	bhi.n	8009afe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b24:	b2d2      	uxtb	r2, r2
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b34:	e00b      	b.n	8009b4e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3c:	1c59      	adds	r1, r3, #1
 8009b3e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009b40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b44:	b2d2      	uxtb	r2, r2
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	09db      	lsrs	r3, r3, #7
 8009b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b52:	d8f0      	bhi.n	8009b36 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	623b      	str	r3, [r7, #32]
 8009b6c:	e00b      	b.n	8009b86 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	1c59      	adds	r1, r3, #1
 8009b76:	6279      	str	r1, [r7, #36]	@ 0x24
 8009b78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	09db      	lsrs	r3, r3, #7
 8009b84:	623b      	str	r3, [r7, #32]
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b8a:	d8f0      	bhi.n	8009b6e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b92:	6a3a      	ldr	r2, [r7, #32]
 8009b94:	b2d2      	uxtb	r2, r2
 8009b96:	701a      	strb	r2, [r3, #0]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	6979      	ldr	r1, [r7, #20]
 8009ba0:	69b8      	ldr	r0, [r7, #24]
 8009ba2:	f7ff fa09 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	f383 8811 	msr	BASEPRI, r3
}
 8009bac:	bf00      	nop
 8009bae:	3738      	adds	r7, #56	@ 0x38
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	2001aa34 	.word	0x2001aa34

08009bb8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b090      	sub	sp, #64	@ 0x40
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8009bca:	f04f 0120 	mov.w	r1, #32
 8009bce:	f381 8811 	msr	BASEPRI, r1
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	4840      	ldr	r0, [pc, #256]	@ (8009cd8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009bd6:	f7ff f8fe 	bl	8008dd6 <_PreparePacket>
 8009bda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009be8:	e00b      	b.n	8009c02 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf0:	1c59      	adds	r1, r3, #1
 8009bf2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8009bf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	09db      	lsrs	r3, r3, #7
 8009c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c06:	d8f0      	bhi.n	8009bea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009c0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c20:	e00b      	b.n	8009c3a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c28:	1c59      	adds	r1, r3, #1
 8009c2a:	6379      	str	r1, [r7, #52]	@ 0x34
 8009c2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	09db      	lsrs	r3, r3, #7
 8009c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c3e:	d8f0      	bhi.n	8009c22 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c58:	e00b      	b.n	8009c72 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c60:	1c59      	adds	r1, r3, #1
 8009c62:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009c64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	09db      	lsrs	r3, r3, #7
 8009c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c76:	d8f0      	bhi.n	8009c5a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	701a      	strb	r2, [r3, #0]
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c8e:	623b      	str	r3, [r7, #32]
 8009c90:	e00b      	b.n	8009caa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c98:	1c59      	adds	r1, r3, #1
 8009c9a:	6279      	str	r1, [r7, #36]	@ 0x24
 8009c9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009ca0:	b2d2      	uxtb	r2, r2
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	09db      	lsrs	r3, r3, #7
 8009ca8:	623b      	str	r3, [r7, #32]
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cae:	d8f0      	bhi.n	8009c92 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009cb6:	6a3a      	ldr	r2, [r7, #32]
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	6979      	ldr	r1, [r7, #20]
 8009cc4:	69b8      	ldr	r0, [r7, #24]
 8009cc6:	f7ff f977 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f383 8811 	msr	BASEPRI, r3
}
 8009cd0:	bf00      	nop
 8009cd2:	3740      	adds	r7, #64	@ 0x40
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	2001aa34 	.word	0x2001aa34

08009cdc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08c      	sub	sp, #48	@ 0x30
 8009ce0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009ce2:	4b59      	ldr	r3, [pc, #356]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009ce8:	f3ef 8311 	mrs	r3, BASEPRI
 8009cec:	f04f 0120 	mov.w	r1, #32
 8009cf0:	f381 8811 	msr	BASEPRI, r1
 8009cf4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009cf6:	4b54      	ldr	r3, [pc, #336]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	220a      	movs	r2, #10
 8009cfc:	4953      	ldr	r1, [pc, #332]	@ (8009e4c <SEGGER_SYSVIEW_Start+0x170>)
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7f6 fa66 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8009d0a:	f7fe fbf7 	bl	80084fc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009d0e:	200a      	movs	r0, #10
 8009d10:	f7ff fe28 	bl	8009964 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009d14:	f3ef 8311 	mrs	r3, BASEPRI
 8009d18:	f04f 0120 	mov.w	r1, #32
 8009d1c:	f381 8811 	msr	BASEPRI, r1
 8009d20:	60bb      	str	r3, [r7, #8]
 8009d22:	484b      	ldr	r0, [pc, #300]	@ (8009e50 <SEGGER_SYSVIEW_Start+0x174>)
 8009d24:	f7ff f857 	bl	8008dd6 <_PreparePacket>
 8009d28:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d32:	4b45      	ldr	r3, [pc, #276]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d38:	e00b      	b.n	8009d52 <SEGGER_SYSVIEW_Start+0x76>
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d40:	1c59      	adds	r1, r3, #1
 8009d42:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009d44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4e:	09db      	lsrs	r3, r3, #7
 8009d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d54:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d56:	d8f0      	bhi.n	8009d3a <SEGGER_SYSVIEW_Start+0x5e>
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d60:	b2d2      	uxtb	r2, r2
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d66:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d6c:	4b36      	ldr	r3, [pc, #216]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	623b      	str	r3, [r7, #32]
 8009d72:	e00b      	b.n	8009d8c <SEGGER_SYSVIEW_Start+0xb0>
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7a:	1c59      	adds	r1, r3, #1
 8009d7c:	6279      	str	r1, [r7, #36]	@ 0x24
 8009d7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d82:	b2d2      	uxtb	r2, r2
 8009d84:	701a      	strb	r2, [r3, #0]
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	09db      	lsrs	r3, r3, #7
 8009d8a:	623b      	str	r3, [r7, #32]
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d90:	d8f0      	bhi.n	8009d74 <SEGGER_SYSVIEW_Start+0x98>
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	61fb      	str	r3, [r7, #28]
 8009da6:	4b28      	ldr	r3, [pc, #160]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	61bb      	str	r3, [r7, #24]
 8009dac:	e00b      	b.n	8009dc6 <SEGGER_SYSVIEW_Start+0xea>
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	1c59      	adds	r1, r3, #1
 8009db6:	61f9      	str	r1, [r7, #28]
 8009db8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	09db      	lsrs	r3, r3, #7
 8009dc4:	61bb      	str	r3, [r7, #24]
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dca:	d8f0      	bhi.n	8009dae <SEGGER_SYSVIEW_Start+0xd2>
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	61fa      	str	r2, [r7, #28]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	b2d2      	uxtb	r2, r2
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	617b      	str	r3, [r7, #20]
 8009de0:	2300      	movs	r3, #0
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	e00b      	b.n	8009dfe <SEGGER_SYSVIEW_Start+0x122>
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	1c59      	adds	r1, r3, #1
 8009dee:	6179      	str	r1, [r7, #20]
 8009df0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009df4:	b2d2      	uxtb	r2, r2
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	09db      	lsrs	r3, r3, #7
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e02:	d8f0      	bhi.n	8009de6 <SEGGER_SYSVIEW_Start+0x10a>
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	617a      	str	r2, [r7, #20]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	b2d2      	uxtb	r2, r2
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009e14:	2218      	movs	r2, #24
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff f8cd 	bl	8008fb8 <_SendPacket>
      RECORD_END();
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009e24:	4b08      	ldr	r3, [pc, #32]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009e2c:	4b06      	ldr	r3, [pc, #24]	@ (8009e48 <SEGGER_SYSVIEW_Start+0x16c>)
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e30:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009e32:	f000 f9eb 	bl	800a20c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009e36:	f000 f9b1 	bl	800a19c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009e3a:	f000 fc83 	bl	800a744 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009e3e:	bf00      	nop
 8009e40:	3730      	adds	r7, #48	@ 0x30
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	2001aa04 	.word	0x2001aa04
 8009e4c:	0800ad9c 	.word	0x0800ad9c
 8009e50:	2001aa34 	.word	0x2001aa34

08009e54 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8009e5e:	f04f 0120 	mov.w	r1, #32
 8009e62:	f381 8811 	msr	BASEPRI, r1
 8009e66:	607b      	str	r3, [r7, #4]
 8009e68:	480b      	ldr	r0, [pc, #44]	@ (8009e98 <SEGGER_SYSVIEW_Stop+0x44>)
 8009e6a:	f7fe ffb4 	bl	8008dd6 <_PreparePacket>
 8009e6e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009e70:	4b0a      	ldr	r3, [pc, #40]	@ (8009e9c <SEGGER_SYSVIEW_Stop+0x48>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d007      	beq.n	8009e88 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009e78:	220b      	movs	r2, #11
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6838      	ldr	r0, [r7, #0]
 8009e7e:	f7ff f89b 	bl	8008fb8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009e82:	4b06      	ldr	r3, [pc, #24]	@ (8009e9c <SEGGER_SYSVIEW_Stop+0x48>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	2001aa34 	.word	0x2001aa34
 8009e9c:	2001aa04 	.word	0x2001aa04

08009ea0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	@ 0x30
 8009ea4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8009eaa:	f04f 0120 	mov.w	r1, #32
 8009eae:	f381 8811 	msr	BASEPRI, r1
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	4845      	ldr	r0, [pc, #276]	@ (8009fcc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009eb6:	f7fe ff8e 	bl	8008dd6 <_PreparePacket>
 8009eba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ec4:	4b42      	ldr	r3, [pc, #264]	@ (8009fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eca:	e00b      	b.n	8009ee4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed2:	1c59      	adds	r1, r3, #1
 8009ed4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009ed6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009eda:	b2d2      	uxtb	r2, r2
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee0:	09db      	lsrs	r3, r3, #7
 8009ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ee8:	d8f0      	bhi.n	8009ecc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009efe:	4b34      	ldr	r3, [pc, #208]	@ (8009fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	623b      	str	r3, [r7, #32]
 8009f04:	e00b      	b.n	8009f1e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0c:	1c59      	adds	r1, r3, #1
 8009f0e:	6279      	str	r1, [r7, #36]	@ 0x24
 8009f10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f14:	b2d2      	uxtb	r2, r2
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	09db      	lsrs	r3, r3, #7
 8009f1c:	623b      	str	r3, [r7, #32]
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f22:	d8f0      	bhi.n	8009f06 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f2a:	6a3a      	ldr	r2, [r7, #32]
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	61fb      	str	r3, [r7, #28]
 8009f38:	4b25      	ldr	r3, [pc, #148]	@ (8009fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	61bb      	str	r3, [r7, #24]
 8009f3e:	e00b      	b.n	8009f58 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	1c59      	adds	r1, r3, #1
 8009f48:	61f9      	str	r1, [r7, #28]
 8009f4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	09db      	lsrs	r3, r3, #7
 8009f56:	61bb      	str	r3, [r7, #24]
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f5c:	d8f0      	bhi.n	8009f40 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	61fa      	str	r2, [r7, #28]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	e00b      	b.n	8009f90 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	6179      	str	r1, [r7, #20]
 8009f82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	09db      	lsrs	r3, r3, #7
 8009f8e:	613b      	str	r3, [r7, #16]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f94:	d8f0      	bhi.n	8009f78 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	617a      	str	r2, [r7, #20]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009fa6:	2218      	movs	r2, #24
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	68b8      	ldr	r0, [r7, #8]
 8009fac:	f7ff f804 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009fb6:	4b06      	ldr	r3, [pc, #24]	@ (8009fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009fbe:	4b04      	ldr	r3, [pc, #16]	@ (8009fd0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc2:	4798      	blx	r3
  }
}
 8009fc4:	bf00      	nop
 8009fc6:	3730      	adds	r7, #48	@ 0x30
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	2001aa34 	.word	0x2001aa34
 8009fd0:	2001aa04 	.word	0x2001aa04

08009fd4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b092      	sub	sp, #72	@ 0x48
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8009fe0:	f04f 0120 	mov.w	r1, #32
 8009fe4:	f381 8811 	msr	BASEPRI, r1
 8009fe8:	617b      	str	r3, [r7, #20]
 8009fea:	486a      	ldr	r0, [pc, #424]	@ (800a194 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009fec:	f7fe fef3 	bl	8008dd6 <_PreparePacket>
 8009ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b66      	ldr	r3, [pc, #408]	@ (800a198 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	643b      	str	r3, [r7, #64]	@ 0x40
 800a006:	e00b      	b.n	800a020 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a00e:	1c59      	adds	r1, r3, #1
 800a010:	6479      	str	r1, [r7, #68]	@ 0x44
 800a012:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	701a      	strb	r2, [r3, #0]
 800a01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a01c:	09db      	lsrs	r3, r3, #7
 800a01e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a022:	2b7f      	cmp	r3, #127	@ 0x7f
 800a024:	d8f0      	bhi.n	800a008 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a02c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a034:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a040:	e00b      	b.n	800a05a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a044:	b2da      	uxtb	r2, r3
 800a046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a048:	1c59      	adds	r1, r3, #1
 800a04a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800a04c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	701a      	strb	r2, [r3, #0]
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	09db      	lsrs	r3, r3, #7
 800a058:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a05e:	d8f0      	bhi.n	800a042 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a06e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	4619      	mov	r1, r3
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7fe fe5f 	bl	8008d3c <_EncodeStr>
 800a07e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a080:	2209      	movs	r2, #9
 800a082:	68f9      	ldr	r1, [r7, #12]
 800a084:	6938      	ldr	r0, [r7, #16]
 800a086:	f7fe ff97 	bl	8008fb8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	4b40      	ldr	r3, [pc, #256]	@ (800a198 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a09e:	e00b      	b.n	800a0b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a6:	1c59      	adds	r1, r3, #1
 800a0a8:	6379      	str	r1, [r7, #52]	@ 0x34
 800a0aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	09db      	lsrs	r3, r3, #7
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0bc:	d8f0      	bhi.n	800a0a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	637a      	str	r2, [r7, #52]	@ 0x34
 800a0c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0d8:	e00b      	b.n	800a0f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e0:	1c59      	adds	r1, r3, #1
 800a0e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a0e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a0e8:	b2d2      	uxtb	r2, r2
 800a0ea:	701a      	strb	r2, [r3, #0]
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	09db      	lsrs	r3, r3, #7
 800a0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0f6:	d8f0      	bhi.n	800a0da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	701a      	strb	r2, [r3, #0]
 800a104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a106:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	623b      	str	r3, [r7, #32]
 800a112:	e00b      	b.n	800a12c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	b2da      	uxtb	r2, r3
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	1c59      	adds	r1, r3, #1
 800a11c:	6279      	str	r1, [r7, #36]	@ 0x24
 800a11e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	701a      	strb	r2, [r3, #0]
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	09db      	lsrs	r3, r3, #7
 800a12a:	623b      	str	r3, [r7, #32]
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a130:	d8f0      	bhi.n	800a114 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	627a      	str	r2, [r7, #36]	@ 0x24
 800a138:	6a3a      	ldr	r2, [r7, #32]
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a140:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	61fb      	str	r3, [r7, #28]
 800a146:	2300      	movs	r3, #0
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	e00b      	b.n	800a164 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	1c59      	adds	r1, r3, #1
 800a154:	61f9      	str	r1, [r7, #28]
 800a156:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	701a      	strb	r2, [r3, #0]
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	09db      	lsrs	r3, r3, #7
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b7f      	cmp	r3, #127	@ 0x7f
 800a168:	d8f0      	bhi.n	800a14c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	61fa      	str	r2, [r7, #28]
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800a17a:	2215      	movs	r2, #21
 800a17c:	68f9      	ldr	r1, [r7, #12]
 800a17e:	6938      	ldr	r0, [r7, #16]
 800a180:	f7fe ff1a 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f383 8811 	msr	BASEPRI, r3
}
 800a18a:	bf00      	nop
 800a18c:	3748      	adds	r7, #72	@ 0x48
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	2001aa34 	.word	0x2001aa34
 800a198:	2001aa04 	.word	0x2001aa04

0800a19c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800a1a0:	4b07      	ldr	r3, [pc, #28]	@ (800a1c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800a1b2:	4b03      	ldr	r3, [pc, #12]	@ (800a1c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4798      	blx	r3
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	2001aa04 	.word	0x2001aa04

0800a1c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a1cc:	f3ef 8311 	mrs	r3, BASEPRI
 800a1d0:	f04f 0120 	mov.w	r1, #32
 800a1d4:	f381 8811 	msr	BASEPRI, r1
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	480b      	ldr	r0, [pc, #44]	@ (800a208 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800a1dc:	f7fe fdfb 	bl	8008dd6 <_PreparePacket>
 800a1e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a1e2:	2280      	movs	r2, #128	@ 0x80
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	6938      	ldr	r0, [r7, #16]
 800a1e8:	f7fe fda8 	bl	8008d3c <_EncodeStr>
 800a1ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800a1ee:	220e      	movs	r2, #14
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	6938      	ldr	r0, [r7, #16]
 800a1f4:	f7fe fee0 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f383 8811 	msr	BASEPRI, r3
}
 800a1fe:	bf00      	nop
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	2001aa34 	.word	0x2001aa34

0800a20c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800a20c:	b590      	push	{r4, r7, lr}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800a212:	4b15      	ldr	r3, [pc, #84]	@ (800a268 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01a      	beq.n	800a250 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800a21a:	4b13      	ldr	r3, [pc, #76]	@ (800a268 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d015      	beq.n	800a250 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800a224:	4b10      	ldr	r3, [pc, #64]	@ (800a268 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4798      	blx	r3
 800a22c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a230:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800a232:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	f04f 0300 	mov.w	r3, #0
 800a23e:	000a      	movs	r2, r1
 800a240:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800a242:	4613      	mov	r3, r2
 800a244:	461a      	mov	r2, r3
 800a246:	4621      	mov	r1, r4
 800a248:	200d      	movs	r0, #13
 800a24a:	f7ff fbe5 	bl	8009a18 <SEGGER_SYSVIEW_RecordU32x2>
 800a24e:	e006      	b.n	800a25e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800a250:	4b06      	ldr	r3, [pc, #24]	@ (800a26c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4619      	mov	r1, r3
 800a256:	200c      	movs	r0, #12
 800a258:	f7ff fba2 	bl	80099a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800a25c:	bf00      	nop
 800a25e:	bf00      	nop
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	bd90      	pop	{r4, r7, pc}
 800a266:	bf00      	nop
 800a268:	2001aa04 	.word	0x2001aa04
 800a26c:	e0001004 	.word	0xe0001004

0800a270 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a276:	f3ef 8311 	mrs	r3, BASEPRI
 800a27a:	f04f 0120 	mov.w	r1, #32
 800a27e:	f381 8811 	msr	BASEPRI, r1
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	4819      	ldr	r0, [pc, #100]	@ (800a2ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800a286:	f7fe fda6 	bl	8008dd6 <_PreparePacket>
 800a28a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800a290:	4b17      	ldr	r3, [pc, #92]	@ (800a2f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a298:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	613b      	str	r3, [r7, #16]
 800a2a2:	e00b      	b.n	800a2bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	1c59      	adds	r1, r3, #1
 800a2ac:	6179      	str	r1, [r7, #20]
 800a2ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	09db      	lsrs	r3, r3, #7
 800a2ba:	613b      	str	r3, [r7, #16]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2c0:	d8f0      	bhi.n	800a2a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	617a      	str	r2, [r7, #20]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	68b8      	ldr	r0, [r7, #8]
 800a2d8:	f7fe fe6e 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f383 8811 	msr	BASEPRI, r3
}
 800a2e2:	bf00      	nop
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	2001aa34 	.word	0x2001aa34
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a2fa:	f3ef 8311 	mrs	r3, BASEPRI
 800a2fe:	f04f 0120 	mov.w	r1, #32
 800a302:	f381 8811 	msr	BASEPRI, r1
 800a306:	607b      	str	r3, [r7, #4]
 800a308:	4807      	ldr	r0, [pc, #28]	@ (800a328 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800a30a:	f7fe fd64 	bl	8008dd6 <_PreparePacket>
 800a30e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800a310:	2203      	movs	r2, #3
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6838      	ldr	r0, [r7, #0]
 800a316:	f7fe fe4f 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f383 8811 	msr	BASEPRI, r3
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	2001aa34 	.word	0x2001aa34

0800a32c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a332:	f3ef 8311 	mrs	r3, BASEPRI
 800a336:	f04f 0120 	mov.w	r1, #32
 800a33a:	f381 8811 	msr	BASEPRI, r1
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	4807      	ldr	r0, [pc, #28]	@ (800a360 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800a342:	f7fe fd48 	bl	8008dd6 <_PreparePacket>
 800a346:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800a348:	2212      	movs	r2, #18
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6838      	ldr	r0, [r7, #0]
 800a34e:	f7fe fe33 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f383 8811 	msr	BASEPRI, r3
}
 800a358:	bf00      	nop
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	2001aa34 	.word	0x2001aa34

0800a364 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a36a:	f3ef 8311 	mrs	r3, BASEPRI
 800a36e:	f04f 0120 	mov.w	r1, #32
 800a372:	f381 8811 	msr	BASEPRI, r1
 800a376:	607b      	str	r3, [r7, #4]
 800a378:	4807      	ldr	r0, [pc, #28]	@ (800a398 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a37a:	f7fe fd2c 	bl	8008dd6 <_PreparePacket>
 800a37e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a380:	2211      	movs	r2, #17
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6838      	ldr	r0, [r7, #0]
 800a386:	f7fe fe17 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f383 8811 	msr	BASEPRI, r3
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	2001aa34 	.word	0x2001aa34

0800a39c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a3a4:	f3ef 8311 	mrs	r3, BASEPRI
 800a3a8:	f04f 0120 	mov.w	r1, #32
 800a3ac:	f381 8811 	msr	BASEPRI, r1
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	4819      	ldr	r0, [pc, #100]	@ (800a418 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a3b4:	f7fe fd0f 	bl	8008dd6 <_PreparePacket>
 800a3b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a3be:	4b17      	ldr	r3, [pc, #92]	@ (800a41c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	61fb      	str	r3, [r7, #28]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	61bb      	str	r3, [r7, #24]
 800a3d0:	e00b      	b.n	800a3ea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	1c59      	adds	r1, r3, #1
 800a3da:	61f9      	str	r1, [r7, #28]
 800a3dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	09db      	lsrs	r3, r3, #7
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3ee:	d8f0      	bhi.n	800a3d2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	61fa      	str	r2, [r7, #28]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a400:	2208      	movs	r2, #8
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	6938      	ldr	r0, [r7, #16]
 800a406:	f7fe fdd7 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f383 8811 	msr	BASEPRI, r3
}
 800a410:	bf00      	nop
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	2001aa34 	.word	0x2001aa34
 800a41c:	2001aa04 	.word	0x2001aa04

0800a420 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a428:	f3ef 8311 	mrs	r3, BASEPRI
 800a42c:	f04f 0120 	mov.w	r1, #32
 800a430:	f381 8811 	msr	BASEPRI, r1
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	4819      	ldr	r0, [pc, #100]	@ (800a49c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a438:	f7fe fccd 	bl	8008dd6 <_PreparePacket>
 800a43c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a442:	4b17      	ldr	r3, [pc, #92]	@ (800a4a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	61fb      	str	r3, [r7, #28]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	61bb      	str	r3, [r7, #24]
 800a454:	e00b      	b.n	800a46e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	1c59      	adds	r1, r3, #1
 800a45e:	61f9      	str	r1, [r7, #28]
 800a460:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a464:	b2d2      	uxtb	r2, r2
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	09db      	lsrs	r3, r3, #7
 800a46c:	61bb      	str	r3, [r7, #24]
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2b7f      	cmp	r3, #127	@ 0x7f
 800a472:	d8f0      	bhi.n	800a456 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	61fa      	str	r2, [r7, #28]
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	b2d2      	uxtb	r2, r2
 800a47e:	701a      	strb	r2, [r3, #0]
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a484:	2204      	movs	r2, #4
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	6938      	ldr	r0, [r7, #16]
 800a48a:	f7fe fd95 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f383 8811 	msr	BASEPRI, r3
}
 800a494:	bf00      	nop
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	2001aa34 	.word	0x2001aa34
 800a4a0:	2001aa04 	.word	0x2001aa04

0800a4a4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a4ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a4b0:	f04f 0120 	mov.w	r1, #32
 800a4b4:	f381 8811 	msr	BASEPRI, r1
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	4819      	ldr	r0, [pc, #100]	@ (800a520 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a4bc:	f7fe fc8b 	bl	8008dd6 <_PreparePacket>
 800a4c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a4c6:	4b17      	ldr	r3, [pc, #92]	@ (800a524 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	61fb      	str	r3, [r7, #28]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	61bb      	str	r3, [r7, #24]
 800a4d8:	e00b      	b.n	800a4f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	1c59      	adds	r1, r3, #1
 800a4e2:	61f9      	str	r1, [r7, #28]
 800a4e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	09db      	lsrs	r3, r3, #7
 800a4f0:	61bb      	str	r3, [r7, #24]
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4f6:	d8f0      	bhi.n	800a4da <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	61fa      	str	r2, [r7, #28]
 800a4fe:	69ba      	ldr	r2, [r7, #24]
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a508:	2206      	movs	r2, #6
 800a50a:	68f9      	ldr	r1, [r7, #12]
 800a50c:	6938      	ldr	r0, [r7, #16]
 800a50e:	f7fe fd53 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f383 8811 	msr	BASEPRI, r3
}
 800a518:	bf00      	nop
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	2001aa34 	.word	0x2001aa34
 800a524:	2001aa04 	.word	0x2001aa04

0800a528 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	@ 0x28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a532:	f3ef 8311 	mrs	r3, BASEPRI
 800a536:	f04f 0120 	mov.w	r1, #32
 800a53a:	f381 8811 	msr	BASEPRI, r1
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	4827      	ldr	r0, [pc, #156]	@ (800a5e0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800a542:	f7fe fc48 	bl	8008dd6 <_PreparePacket>
 800a546:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a54c:	4b25      	ldr	r3, [pc, #148]	@ (800a5e4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	627b      	str	r3, [r7, #36]	@ 0x24
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	623b      	str	r3, [r7, #32]
 800a55e:	e00b      	b.n	800a578 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	b2da      	uxtb	r2, r3
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	1c59      	adds	r1, r3, #1
 800a568:	6279      	str	r1, [r7, #36]	@ 0x24
 800a56a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	09db      	lsrs	r3, r3, #7
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	6a3b      	ldr	r3, [r7, #32]
 800a57a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a57c:	d8f0      	bhi.n	800a560 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	627a      	str	r2, [r7, #36]	@ 0x24
 800a584:	6a3a      	ldr	r2, [r7, #32]
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	61fb      	str	r3, [r7, #28]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	61bb      	str	r3, [r7, #24]
 800a596:	e00b      	b.n	800a5b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	1c59      	adds	r1, r3, #1
 800a5a0:	61f9      	str	r1, [r7, #28]
 800a5a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5a6:	b2d2      	uxtb	r2, r2
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	09db      	lsrs	r3, r3, #7
 800a5ae:	61bb      	str	r3, [r7, #24]
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5b4:	d8f0      	bhi.n	800a598 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	61fa      	str	r2, [r7, #28]
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800a5c6:	2207      	movs	r2, #7
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f7fe fcf4 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f383 8811 	msr	BASEPRI, r3
}
 800a5d6:	bf00      	nop
 800a5d8:	3728      	adds	r7, #40	@ 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	2001aa34 	.word	0x2001aa34
 800a5e4:	2001aa04 	.word	0x2001aa04

0800a5e8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a5f0:	4b04      	ldr	r3, [pc, #16]	@ (800a604 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	1ad3      	subs	r3, r2, r3
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	2001aa04 	.word	0x2001aa04

0800a608 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08c      	sub	sp, #48	@ 0x30
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a612:	4b3b      	ldr	r3, [pc, #236]	@ (800a700 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d06d      	beq.n	800a6f6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800a61a:	4b39      	ldr	r3, [pc, #228]	@ (800a700 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a620:	2300      	movs	r3, #0
 800a622:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a624:	e008      	b.n	800a638 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800a62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	3301      	adds	r3, #1
 800a636:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d3f2      	bcc.n	800a626 <SEGGER_SYSVIEW_SendModule+0x1e>
 800a640:	e000      	b.n	800a644 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a642:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d055      	beq.n	800a6f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a64a:	f3ef 8311 	mrs	r3, BASEPRI
 800a64e:	f04f 0120 	mov.w	r1, #32
 800a652:	f381 8811 	msr	BASEPRI, r1
 800a656:	617b      	str	r3, [r7, #20]
 800a658:	482a      	ldr	r0, [pc, #168]	@ (800a704 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800a65a:	f7fe fbbc 	bl	8008dd6 <_PreparePacket>
 800a65e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	627b      	str	r3, [r7, #36]	@ 0x24
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	623b      	str	r3, [r7, #32]
 800a66c:	e00b      	b.n	800a686 <SEGGER_SYSVIEW_SendModule+0x7e>
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	6279      	str	r1, [r7, #36]	@ 0x24
 800a678:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a67c:	b2d2      	uxtb	r2, r2
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	09db      	lsrs	r3, r3, #7
 800a684:	623b      	str	r3, [r7, #32]
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	2b7f      	cmp	r3, #127	@ 0x7f
 800a68a:	d8f0      	bhi.n	800a66e <SEGGER_SYSVIEW_SendModule+0x66>
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	627a      	str	r2, [r7, #36]	@ 0x24
 800a692:	6a3a      	ldr	r2, [r7, #32]
 800a694:	b2d2      	uxtb	r2, r2
 800a696:	701a      	strb	r2, [r3, #0]
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	61bb      	str	r3, [r7, #24]
 800a6a6:	e00b      	b.n	800a6c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	1c59      	adds	r1, r3, #1
 800a6b0:	61f9      	str	r1, [r7, #28]
 800a6b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a6b6:	b2d2      	uxtb	r2, r2
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	09db      	lsrs	r3, r3, #7
 800a6be:	61bb      	str	r3, [r7, #24]
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6c4:	d8f0      	bhi.n	800a6a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	61fa      	str	r2, [r7, #28]
 800a6cc:	69ba      	ldr	r2, [r7, #24]
 800a6ce:	b2d2      	uxtb	r2, r2
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2280      	movs	r2, #128	@ 0x80
 800a6dc:	4619      	mov	r1, r3
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7fe fb2c 	bl	8008d3c <_EncodeStr>
 800a6e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a6e6:	2216      	movs	r2, #22
 800a6e8:	68f9      	ldr	r1, [r7, #12]
 800a6ea:	6938      	ldr	r0, [r7, #16]
 800a6ec:	f7fe fc64 	bl	8008fb8 <_SendPacket>
      RECORD_END();
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	3730      	adds	r7, #48	@ 0x30
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	2001aa2c 	.word	0x2001aa2c
 800a704:	2001aa34 	.word	0x2001aa34

0800a708 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a70e:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00f      	beq.n	800a736 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a716:	4b0a      	ldr	r3, [pc, #40]	@ (800a740 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f2      	bne.n	800a71c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	2001aa2c 	.word	0x2001aa2c

0800a744 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a74a:	f3ef 8311 	mrs	r3, BASEPRI
 800a74e:	f04f 0120 	mov.w	r1, #32
 800a752:	f381 8811 	msr	BASEPRI, r1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	4817      	ldr	r0, [pc, #92]	@ (800a7b8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a75a:	f7fe fb3c 	bl	8008dd6 <_PreparePacket>
 800a75e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	4b14      	ldr	r3, [pc, #80]	@ (800a7bc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	e00b      	b.n	800a788 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	b2da      	uxtb	r2, r3
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	1c59      	adds	r1, r3, #1
 800a778:	6179      	str	r1, [r7, #20]
 800a77a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	09db      	lsrs	r3, r3, #7
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a78c:	d8f0      	bhi.n	800a770 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	617a      	str	r2, [r7, #20]
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	b2d2      	uxtb	r2, r2
 800a798:	701a      	strb	r2, [r3, #0]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a79e:	221b      	movs	r2, #27
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	68b8      	ldr	r0, [r7, #8]
 800a7a4:	f7fe fc08 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f383 8811 	msr	BASEPRI, r3
}
 800a7ae:	bf00      	nop
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	2001aa34 	.word	0x2001aa34
 800a7bc:	2001aa30 	.word	0x2001aa30

0800a7c0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800a7c0:	b40f      	push	{r0, r1, r2, r3}
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800a7c8:	f107 0314 	add.w	r3, r7, #20
 800a7cc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800a7ce:	1d3b      	adds	r3, r7, #4
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	6938      	ldr	r0, [r7, #16]
 800a7d6:	f7fe fe79 	bl	80094cc <_VPrintTarget>
  va_end(ParamList);
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7e4:	b004      	add	sp, #16
 800a7e6:	4770      	bx	lr

0800a7e8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08a      	sub	sp, #40	@ 0x28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a7f0:	f3ef 8311 	mrs	r3, BASEPRI
 800a7f4:	f04f 0120 	mov.w	r1, #32
 800a7f8:	f381 8811 	msr	BASEPRI, r1
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	4827      	ldr	r0, [pc, #156]	@ (800a89c <SEGGER_SYSVIEW_Warn+0xb4>)
 800a800:	f7fe fae9 	bl	8008dd6 <_PreparePacket>
 800a804:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a806:	2280      	movs	r2, #128	@ 0x80
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	6938      	ldr	r0, [r7, #16]
 800a80c:	f7fe fa96 	bl	8008d3c <_EncodeStr>
 800a810:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	627b      	str	r3, [r7, #36]	@ 0x24
 800a816:	2301      	movs	r3, #1
 800a818:	623b      	str	r3, [r7, #32]
 800a81a:	e00b      	b.n	800a834 <SEGGER_SYSVIEW_Warn+0x4c>
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a822:	1c59      	adds	r1, r3, #1
 800a824:	6279      	str	r1, [r7, #36]	@ 0x24
 800a826:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	09db      	lsrs	r3, r3, #7
 800a832:	623b      	str	r3, [r7, #32]
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	2b7f      	cmp	r3, #127	@ 0x7f
 800a838:	d8f0      	bhi.n	800a81c <SEGGER_SYSVIEW_Warn+0x34>
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a840:	6a3a      	ldr	r2, [r7, #32]
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	61fb      	str	r3, [r7, #28]
 800a84e:	2300      	movs	r3, #0
 800a850:	61bb      	str	r3, [r7, #24]
 800a852:	e00b      	b.n	800a86c <SEGGER_SYSVIEW_Warn+0x84>
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	b2da      	uxtb	r2, r3
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	1c59      	adds	r1, r3, #1
 800a85c:	61f9      	str	r1, [r7, #28]
 800a85e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	09db      	lsrs	r3, r3, #7
 800a86a:	61bb      	str	r3, [r7, #24]
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a870:	d8f0      	bhi.n	800a854 <SEGGER_SYSVIEW_Warn+0x6c>
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	61fa      	str	r2, [r7, #28]
 800a878:	69ba      	ldr	r2, [r7, #24]
 800a87a:	b2d2      	uxtb	r2, r2
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a882:	221a      	movs	r2, #26
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	6938      	ldr	r0, [r7, #16]
 800a888:	f7fe fb96 	bl	8008fb8 <_SendPacket>
  RECORD_END();
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f383 8811 	msr	BASEPRI, r3
}
 800a892:	bf00      	nop
 800a894:	3728      	adds	r7, #40	@ 0x28
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	2001aa34 	.word	0x2001aa34

0800a8a0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a8a4:	4b13      	ldr	r3, [pc, #76]	@ (800a8f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8a6:	7e1b      	ldrb	r3, [r3, #24]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4a13      	ldr	r2, [pc, #76]	@ (800a8f8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	440b      	add	r3, r1
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	336c      	adds	r3, #108	@ 0x6c
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8bc:	7e1b      	ldrb	r3, [r3, #24]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	490d      	ldr	r1, [pc, #52]	@ (800a8f8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	4403      	add	r3, r0
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	440b      	add	r3, r1
 800a8cc:	3370      	adds	r3, #112	@ 0x70
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d00b      	beq.n	800a8ec <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a8d4:	4b07      	ldr	r3, [pc, #28]	@ (800a8f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8d6:	789b      	ldrb	r3, [r3, #2]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d107      	bne.n	800a8ec <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a8dc:	4b05      	ldr	r3, [pc, #20]	@ (800a8f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a8e2:	f7fe fa85 	bl	8008df0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a8e6:	4b03      	ldr	r3, [pc, #12]	@ (800a8f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800a8ec:	4b01      	ldr	r3, [pc, #4]	@ (800a8f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	2001aa04 	.word	0x2001aa04
 800a8f8:	20019544 	.word	0x20019544

0800a8fc <strchr>:
 800a8fc:	b2c9      	uxtb	r1, r1
 800a8fe:	4603      	mov	r3, r0
 800a900:	4618      	mov	r0, r3
 800a902:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a906:	b112      	cbz	r2, 800a90e <strchr+0x12>
 800a908:	428a      	cmp	r2, r1
 800a90a:	d1f9      	bne.n	800a900 <strchr+0x4>
 800a90c:	4770      	bx	lr
 800a90e:	2900      	cmp	r1, #0
 800a910:	bf18      	it	ne
 800a912:	2000      	movne	r0, #0
 800a914:	4770      	bx	lr

0800a916 <strncmp>:
 800a916:	b510      	push	{r4, lr}
 800a918:	b16a      	cbz	r2, 800a936 <strncmp+0x20>
 800a91a:	3901      	subs	r1, #1
 800a91c:	1884      	adds	r4, r0, r2
 800a91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a922:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a926:	429a      	cmp	r2, r3
 800a928:	d103      	bne.n	800a932 <strncmp+0x1c>
 800a92a:	42a0      	cmp	r0, r4
 800a92c:	d001      	beq.n	800a932 <strncmp+0x1c>
 800a92e:	2a00      	cmp	r2, #0
 800a930:	d1f5      	bne.n	800a91e <strncmp+0x8>
 800a932:	1ad0      	subs	r0, r2, r3
 800a934:	bd10      	pop	{r4, pc}
 800a936:	4610      	mov	r0, r2
 800a938:	e7fc      	b.n	800a934 <strncmp+0x1e>

0800a93a <memcmp>:
 800a93a:	b510      	push	{r4, lr}
 800a93c:	3901      	subs	r1, #1
 800a93e:	4402      	add	r2, r0
 800a940:	4290      	cmp	r0, r2
 800a942:	d101      	bne.n	800a948 <memcmp+0xe>
 800a944:	2000      	movs	r0, #0
 800a946:	e005      	b.n	800a954 <memcmp+0x1a>
 800a948:	7803      	ldrb	r3, [r0, #0]
 800a94a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a94e:	42a3      	cmp	r3, r4
 800a950:	d001      	beq.n	800a956 <memcmp+0x1c>
 800a952:	1b18      	subs	r0, r3, r4
 800a954:	bd10      	pop	{r4, pc}
 800a956:	3001      	adds	r0, #1
 800a958:	e7f2      	b.n	800a940 <memcmp+0x6>

0800a95a <memset>:
 800a95a:	4402      	add	r2, r0
 800a95c:	4603      	mov	r3, r0
 800a95e:	4293      	cmp	r3, r2
 800a960:	d100      	bne.n	800a964 <memset+0xa>
 800a962:	4770      	bx	lr
 800a964:	f803 1b01 	strb.w	r1, [r3], #1
 800a968:	e7f9      	b.n	800a95e <memset+0x4>
	...

0800a96c <__libc_init_array>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9a4 <__libc_init_array+0x38>)
 800a970:	4c0d      	ldr	r4, [pc, #52]	@ (800a9a8 <__libc_init_array+0x3c>)
 800a972:	1b64      	subs	r4, r4, r5
 800a974:	10a4      	asrs	r4, r4, #2
 800a976:	2600      	movs	r6, #0
 800a978:	42a6      	cmp	r6, r4
 800a97a:	d109      	bne.n	800a990 <__libc_init_array+0x24>
 800a97c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9ac <__libc_init_array+0x40>)
 800a97e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9b0 <__libc_init_array+0x44>)
 800a980:	f000 f82e 	bl	800a9e0 <_init>
 800a984:	1b64      	subs	r4, r4, r5
 800a986:	10a4      	asrs	r4, r4, #2
 800a988:	2600      	movs	r6, #0
 800a98a:	42a6      	cmp	r6, r4
 800a98c:	d105      	bne.n	800a99a <__libc_init_array+0x2e>
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	f855 3b04 	ldr.w	r3, [r5], #4
 800a994:	4798      	blx	r3
 800a996:	3601      	adds	r6, #1
 800a998:	e7ee      	b.n	800a978 <__libc_init_array+0xc>
 800a99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99e:	4798      	blx	r3
 800a9a0:	3601      	adds	r6, #1
 800a9a2:	e7f2      	b.n	800a98a <__libc_init_array+0x1e>
 800a9a4:	0800adc0 	.word	0x0800adc0
 800a9a8:	0800adc0 	.word	0x0800adc0
 800a9ac:	0800adc0 	.word	0x0800adc0
 800a9b0:	0800adc4 	.word	0x0800adc4

0800a9b4 <memcpy>:
 800a9b4:	440a      	add	r2, r1
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a9bc:	d100      	bne.n	800a9c0 <memcpy+0xc>
 800a9be:	4770      	bx	lr
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	d1f9      	bne.n	800a9c2 <memcpy+0xe>
 800a9ce:	bd10      	pop	{r4, pc}

0800a9d0 <strcpy>:
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d6:	f803 2b01 	strb.w	r2, [r3], #1
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d1f9      	bne.n	800a9d2 <strcpy+0x2>
 800a9de:	4770      	bx	lr

0800a9e0 <_init>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	bf00      	nop
 800a9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e6:	bc08      	pop	{r3}
 800a9e8:	469e      	mov	lr, r3
 800a9ea:	4770      	bx	lr

0800a9ec <_fini>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	bf00      	nop
 800a9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f2:	bc08      	pop	{r3}
 800a9f4:	469e      	mov	lr, r3
 800a9f6:	4770      	bx	lr
